***********************************************************************
*
*	CODE GENERATION LISTING FOR: sw37
*	COMPILER VERSION: 6.0.0.52
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
A1904460  FB90 F3F1		sdiv r3, r0, r1
A1904464  4359     		mul r1, r1, r3
A1904466  EBC1 0000		rsb r0, r1, r0
A190446A  4770     		bx lr

$$MOD_U:
A190446C  FBB0 F3F1		udiv r3, r0, r1
A1904470  4359     		mul r1, r1, r3
A1904472  EBC1 0000		rsb r0, r1, r0
A1904476  4770     		bx lr

**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"<HTML>The output Q will remain FALSE as long as the input variable CLK is FALSE.<br>
As soon as CLK returns TRUE, Q will first return TRUE.<br><br>
This means each time the function is called up, Q will return FALSE until CLK has falling edge followed by an rising edge.<br><br>
<img src= r_trig.png>" }

        VAR_INPUT
clk : BOOL;	{ DE:"Input for edge detection" }
	END_VAR

        VAR_OUTPUT
q : BOOL;	{ DE:"Raising edge output" }
	END_VAR

        VAR
m : BOOL := FALSE;
	END_VAR

END_FUNCTION_BLOCK

A1904478  E92D 4040		stmdb sp!, { r6, lr }
A190447C  462E     		mov r6, r5

#0		{SRC:R_TRIG}
#1		
#2			LD		clk
(*) UNDEF
A190447E  F8DF 7028		ldr r7, [pc, #+40] ; 0x1
A1904482  5DF0     		ldrb r0, [r6, +r7]

#3			ANDN	m
(*) BOOL
A1904484  7837     		ldrb r7, [r6]
A1904486  2F00     		cmp r7, #0
A1904488  BF08 2701		eqmov r7, #1
A190448C  BF18 2700		nemov r7, #0
A1904490  4038     		and r0, r0, r7

#4			ST		q
(*) BOOL
A1904492  F8DF 7018		ldr r7, [pc, #+24] ; 0x2
A1904496  55F0     		strb r0, [r6, +r7]

#5		
#6			LD		clk
(*) UNDEF
A1904498  F8DF 700C		ldr r7, [pc, #+12] ; 0x1
A190449C  5DF0     		ldrb r0, [r6, +r7]

#7			ST		m
(-) BOOL
A190449E  7030     		strb r0, [r6]

A19044A0  E8BD 4040		ldmia sp!, { r6, lr }

A19044A4  4770     		bx lr

A19044A8  00000001		; 0x00000001
A19044AC  00000002		; 0x00000002


Frame allocation (hex):

	0000 bit  0: VAR m
	0001 bit  0: VAR clk
	0002 bit  0: VAR q

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

A19044B0  E92D 4040		stmdb sp!, { r6, lr }
A19044B4  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
A19044B6  F8DF 7084		ldr r7, [pc, #+132] ; 0x4
A19044BA  5DF0     		ldrb r0, [r6, +r7]

#5			JMPCN	lReset
(-) BOOL
A19044BC  2800     		cmp r0, #0
A19044BE  D031     		beq #98 ; 0xA1904524


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
A19044C2  F8DF 7080		ldr r7, [pc, #+128] ; 0xC
A19044C6  5DF0     		ldrb r0, [r6, +r7]

#9			RETC
#10			
(-) BOOL
A19044C8  2800     		cmp r0, #0
A19044CA  D134     		bne #104 ; 0xA1904536


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
A19044CE  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
A19044D0  2800     		cmp r0, #0
A19044D2  BF18 2000		nemov r0, #0
A19044D6  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
A19044DA  2800     		cmp r0, #0
A19044DC  D004     		beq #8 ; 0xA19044E8


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
A19044E0  F8DF 7068		ldr r7, [pc, #+104] ; 0x1000052C
A19044E4  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
A19044E6  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
A19044E8  F8DF 7060		ldr r7, [pc, #+96] ; 0x1000052C
A19044EC  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
A19044EE  6837     		ldr r7, [r6]
A19044F0  1BC0     		sub r0, r0, r7

#25			ST		ET
(*) UDINT
A19044F2  F8DF 7054		ldr r7, [pc, #+84] ; 0x10
A19044F6  51F0     		str r0, [r6, +r7]

#26			GE		PT
(*) UDINT
A19044F8  F8DF 7044		ldr r7, [pc, #+68] ; 0x8
A19044FC  59F7     		ldr r7, [r6, +r7]
A19044FE  42B8     		cmp r0, r7
A1904500  BF38 2000		lomov r0, #0
A1904504  BF28 2001		hsmov r0, #1

#27			ST		Q
(*) BOOL
A1904508  F8DF 7038		ldr r7, [pc, #+56] ; 0xC
A190450C  55F0     		strb r0, [r6, +r7]

#28			RETCN
#29		
(-) BOOL
A190450E  2800     		cmp r0, #0
A1904510  D011     		beq #34 ; 0xA1904536


#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
A1904514  F8DF 7028		ldr r7, [pc, #+40] ; 0x8
A1904518  59F0     		ldr r0, [r6, +r7]

#32			ST		ET
(*) UDINT
A190451A  F8DF 702C		ldr r7, [pc, #+44] ; 0x10
A190451E  51F0     		str r0, [r6, +r7]

#33			RET
#34		
(-) UDINT
A1904520  E009     		b #18 ; 0xA1904536


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
A1904524  2000     		mov r0, #0 ; 0

#39			ST		ET
(*) USINT
A1904526  F8DF 7020		ldr r7, [pc, #+32] ; 0x10
A190452A  51F0     		str r0, [r6, +r7]

#40			ST		timStart
(-) UDINT
A190452C  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
A190452E  2000     		mov r0, #0 ; 0

#42			ST		Q
(*) BOOL
A1904530  F8DF 7010		ldr r7, [pc, #+16] ; 0xC
A1904534  55F0     		strb r0, [r6, +r7]

A1904536  E8BD 4040		ldmia sp!, { r6, lr }

A190453A  4770     		bx lr

A190453C  00000004		; 0x00000004
A1904540  00000008		; 0x00000008
A1904544  0000000C		; 0x0000000C
A1904548  00000010		; 0x00000010
A190454C  FFFFFFFF		; 0x1000052C


Frame allocation (hex):

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: CheckAlarmVal
**************************************************

FUNCTION_BLOCK CheckAlarmVal

        VAR_IN_OUT
di_val_open_state_fall_FB : INT^;
di_val_close_state_fall_FB : INT^;
di_val_open_state_R_FB : INT^;
di_val_close_state_R_FB : BOOL^;
Alarm_Val_FB : WORD^;
o_val_open_R_FB : BOOL^;
o_val_close_R_FB : BOOL^;
o_val_open_fall_FB : BOOL^;
o_val_close_fall_FB : BOOL^;
start_check : BOOL^;
	END_VAR

        VAR_OUTPUT
check_timer : TON;	{ DE:"локальний FB таймера" }
is_check_done : BOOL;
isOK : BOOL;
	END_VAR

        VAR
should_run_timer : BOOL;
	END_VAR

END_FUNCTION_BLOCK

A1904550  E92D 4040		stmdb sp!, { r6, lr }
A1904554  462E     		mov r6, r5

#0		{SRC:CheckAlarmVal}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF check_timer.IN *)
#5			LD		check_timer.IN	{LNXT:3|-1|-1}
(*) UNDEF
A1904556  F8DF 71E0		ldr r7, [pc, #+480] ; 0x8
A190455A  5DF0     		ldrb r0, [r6, +r7]

#6			JMPCN	$label0	{LNXT:3|4|8}
(-) BOOL
A190455C  2800     		cmp r0, #0
A190455E  D008     		beq #16 ; 0xA1904572


#7		
#8			(* THEN *)
#9		
#10				(* isOK := TRUE; *)
#11				MOVE		TRUE,isOK	{LNXT:4|5|-1}
(*) BOOL
A1904562  2001     		mov r0, #1 ; 1
A1904564  F8DF 71E0		ldr r7, [pc, #+480] ; 0x19
A1904568  55F0     		strb r0, [r6, +r7]

#12		
#13				(* is_check_done := false; *)
#14				MOVE		false,is_check_done	{LNXT:5|8|-1}
(*) BOOL
A190456A  2000     		mov r0, #0 ; 0
A190456C  F8DF 71D4		ldr r7, [pc, #+468] ; 0x18
A1904570  55F0     		strb r0, [r6, +r7]

#15		
#16		$label0:
#17			(* END_IF *)
#18		
#19		
#20			(* IF start_check *)
#21			LD		start_check	{LNXT:8|-1|-1}
(*) UNDEF
A1904572  F8DF 71FC		ldr r7, [pc, #+508] ; 0x40
A1904576  F856 C007		ldr r12, [r6, +r7]
A190457A  F89C 0000		ldrb r0, [r12]

#22			JMPCN	$label1	{LNXT:8|9|13}
(-) BOOL
A190457E  2800     		cmp r0, #0
A1904580  D016     		beq #44 ; 0xA19045B0


#23		
#24			(* THEN *)
#25		
#26				(* check_timer *)
#27				MOVE		true,check_timer.IN	{LNXT:9|-1|-1}
(*) BOOL
A1904584  2001     		mov r0, #1 ; 1
A1904586  F8DF 71B0		ldr r7, [pc, #+432] ; 0x8
A190458A  55F0     		strb r0, [r6, +r7]

#28				MOVE		10000,check_timer.PT	{LNXT:9|-1|-1}
(*) BOOL
A190458C  F8DF 71E4		ldr r7, [pc, #+484] ; 0x2710
A1904590  4638     		mov r0, r7
A1904592  F8DF 71A8		ldr r7, [pc, #+424] ; 0xC
A1904596  51F0     		str r0, [r6, +r7]

#29				CAL		check_timer	{LNXT:9|13|-1}
(*) UDINT
A1904598  E92D 0021		stmdb sp!, { r0, r5 }
A190459C  F8DF 7194		ldr r7, [pc, #+404] ; 0x4
A19045A0  19F5     		add r5, r6, r7
A19045A2  467C     		mov r4, pc
A19045A4  3CF6     		sub  r4, r4, #+0xF6 ; 0xA19044B0
A19045A6  F044 0401		orr r4, r4, #1
A19045AA  47A0     		blx r4
A19045AC  E8BD 0021		ldmia sp!, { r0, r5 }

#30		
#31		$label1:
#32			(* END_IF *)
#33		
#34		
#35			(* IF check_timer.Q *)
#36			LD		check_timer.Q	{LNXT:13|-1|-1}
(*) UNDEF
A19045B0  F8DF 718C		ldr r7, [pc, #+396] ; 0x10
A19045B4  5DF0     		ldrb r0, [r6, +r7]

#37			JMPCN	$label2	{LNXT:13|15|41}
(-) BOOL
A19045B6  2800     		cmp r0, #0
A19045B8  F000 80AA		beq #340 ; 0xA1904710


#38		
#39			(* THEN *)
#40		
#41				(* check_timer *)
#42				MOVE		false,check_timer.IN	{LNXT:15|-1|-1}
(*) BOOL
A19045BC  2000     		mov r0, #0 ; 0
A19045BE  F8DF 7178		ldr r7, [pc, #+376] ; 0x8
A19045C2  55F0     		strb r0, [r6, +r7]

#43				CAL		check_timer	{LNXT:15|17|-1}
(*) BOOL
A19045C4  E92D 0021		stmdb sp!, { r0, r5 }
A19045C8  F8DF 7168		ldr r7, [pc, #+360] ; 0x4
A19045CC  19F5     		add r5, r6, r7
A19045CE  F8DF 4160		ldr r4, [pc, #+352] ; 0xA19044B0
A19045D2  F044 0401		orr r4, r4, #1
A19045D6  47A0     		blx r4
A19045D8  E8BD 0021		ldmia sp!, { r0, r5 }

#44		
#45		
#46				(* IF o_val_open_R_FB^ AND NOT di_val_open_state_R_FB^ *)
#47				LD		di_val_open_state_R_FB^	{LNXT:17|-1|-1}
(*) UNDEF
A19045DC  F8DF 7174		ldr r7, [pc, #+372] ; 0x24
A19045E0  F856 C007		ldr r12, [r6, +r7]
A19045E4  F9BC 0000		ldrsh r0, [r12]

#48				NOT	{LNXT:17|-1|-1}
(-) INT
A19045E8  43C0     		mvn r0, r0

#49				AND		o_val_open_R_FB^	{LNXT:17|-1|-1}
(*) INT
A19045EA  F8DF 7174		ldr r7, [pc, #+372] ; 0x30
A19045EE  F856 C007		ldr r12, [r6, +r7]
A19045F2  F8DF 716C		ldr r7, [pc, #+364] ; 0x30
A19045F6  F856 C007		ldr r12, [r6, +r7]
A19045FA  F89C 7000		ldrb r7, [r12]
A19045FE  4038     		and r0, r0, r7

#50				JMPCN	$label3	{LNXT:17|18|21}
(-) INT
A1904600  2800     		cmp r0, #0
A1904602  D00B     		beq #22 ; 0xA190461C


#51		
#52				(* THEN *)
#53		
#54					(* Alarm_Val_FB^.0 := TRUE; *)
#55					MOVE		TRUE,Alarm_Val_FB^.0	{LNXT:18|21|-1}
(*) INT
A1904606  2001     		mov r0, #1 ; 1
A1904608  F8DF 7150		ldr r7, [pc, #+336] ; 0x2C
A190460C  F856 C007		ldr r12, [r6, +r7]
A1904610  F8BC 8000		ldrh r8, [r12]
A1904614  F360 0800		bfi r8, r0, #0, #1
A1904618  F8AC 8000		strh r8, [r12]

#56		
#57		$label3:
#58				(* END_IF *)
#59		
#60		
#61				(* IF o_val_close_R_FB^ AND NOT di_val_close_state_R_FB^ *)
#62				LD		di_val_close_state_R_FB^	{LNXT:21|-1|-1}
(*) UNDEF
A190461C  F8DF 7138		ldr r7, [pc, #+312] ; 0x28
A1904620  F856 C007		ldr r12, [r6, +r7]
A1904624  F89C 0000		ldrb r0, [r12]

#63				NOT	{LNXT:21|-1|-1}
(*) BOOL
A1904628  2800     		cmp r0, #0
A190462A  BF08 2001		eqmov r0, #1
A190462E  BF18 2000		nemov r0, #0

#64				AND		o_val_close_R_FB^	{LNXT:21|-1|-1}
(*) BOOL
A1904632  F8DF 7130		ldr r7, [pc, #+304] ; 0x34
A1904636  F856 C007		ldr r12, [r6, +r7]
A190463A  F8DF 7128		ldr r7, [pc, #+296] ; 0x34
A190463E  F856 C007		ldr r12, [r6, +r7]
A1904642  F89C 7000		ldrb r7, [r12]
A1904646  4038     		and r0, r0, r7

#65				JMPCN	$label4	{LNXT:21|22|25}
(-) BOOL
A1904648  2800     		cmp r0, #0
A190464A  D00B     		beq #22 ; 0xA1904664


#66		
#67				(* THEN *)
#68		
#69					(* Alarm_Val_FB^.1 := TRUE; *)
#70					MOVE		TRUE,Alarm_Val_FB^.1	{LNXT:22|25|-1}
(*) BOOL
A190464E  2001     		mov r0, #1 ; 1
A1904650  F8DF 7108		ldr r7, [pc, #+264] ; 0x2C
A1904654  F856 C007		ldr r12, [r6, +r7]
A1904658  F8BC 8000		ldrh r8, [r12]
A190465C  F360 0841		bfi r8, r0, #1, #1
A1904660  F8AC 8000		strh r8, [r12]

#71		
#72		$label4:
#73				(* END_IF *)
#74		
#75		
#76				(* IF o_val_open_fall_FB^ AND NOT di_val_open_state_fall_FB^ *)
#77				LD		di_val_open_state_fall_FB^	{LNXT:25|-1|-1}
(*) UNDEF
A1904664  F8DF 70E4		ldr r7, [pc, #+228] ; 0x1C
A1904668  F856 C007		ldr r12, [r6, +r7]
A190466C  F9BC 0000		ldrsh r0, [r12]

#78				NOT	{LNXT:25|-1|-1}
(-) INT
A1904670  43C0     		mvn r0, r0

#79				AND		o_val_open_fall_FB^	{LNXT:25|-1|-1}
(*) INT
A1904672  F8DF 70F4		ldr r7, [pc, #+244] ; 0x38
A1904676  F856 C007		ldr r12, [r6, +r7]
A190467A  F8DF 70EC		ldr r7, [pc, #+236] ; 0x38
A190467E  F856 C007		ldr r12, [r6, +r7]
A1904682  F89C 7000		ldrb r7, [r12]
A1904686  4038     		and r0, r0, r7

#80				JMPCN	$label5	{LNXT:25|26|29}
(-) INT
A1904688  2800     		cmp r0, #0
A190468A  D00B     		beq #22 ; 0xA19046A4


#81		
#82				(* THEN *)
#83		
#84					(* Alarm_Val_FB^.2 := TRUE; *)
#85					MOVE		TRUE,Alarm_Val_FB^.2	{LNXT:26|29|-1}
(*) INT
A190468E  2001     		mov r0, #1 ; 1
A1904690  F8DF 70C8		ldr r7, [pc, #+200] ; 0x2C
A1904694  F856 C007		ldr r12, [r6, +r7]
A1904698  F8BC 8000		ldrh r8, [r12]
A190469C  F360 0882		bfi r8, r0, #2, #1
A19046A0  F8AC 8000		strh r8, [r12]

#86		
#87		$label5:
#88				(* END_IF *)
#89		
#90		
#91				(* IF o_val_close_fall_FB^ AND NOT di_val_close_state_fall_FB^ *)
#92				LD		di_val_close_state_fall_FB^	{LNXT:29|-1|-1}
(*) UNDEF
A19046A4  F8DF 70A8		ldr r7, [pc, #+168] ; 0x20
A19046A8  F856 C007		ldr r12, [r6, +r7]
A19046AC  F9BC 0000		ldrsh r0, [r12]

#93				NOT	{LNXT:29|-1|-1}
(-) INT
A19046B0  43C0     		mvn r0, r0

#94				AND		o_val_close_fall_FB^	{LNXT:29|-1|-1}
(*) INT
A19046B2  F8DF 70B8		ldr r7, [pc, #+184] ; 0x3C
A19046B6  F856 C007		ldr r12, [r6, +r7]
A19046BA  F8DF 70B0		ldr r7, [pc, #+176] ; 0x3C
A19046BE  F856 C007		ldr r12, [r6, +r7]
A19046C2  F89C 7000		ldrb r7, [r12]
A19046C6  4038     		and r0, r0, r7

#95				JMPCN	$label6	{LNXT:29|30|34}
(-) INT
A19046C8  2800     		cmp r0, #0
A19046CA  D00B     		beq #22 ; 0xA19046E4


#96		
#97				(* THEN *)
#98		
#99					(* Alarm_Val_FB^.3 := TRUE; *)
#100					MOVE		TRUE,Alarm_Val_FB^.3	{LNXT:30|34|-1}
(*) INT
A19046CE  2001     		mov r0, #1 ; 1
A19046D0  F8DF 7088		ldr r7, [pc, #+136] ; 0x2C
A19046D4  F856 C007		ldr r12, [r6, +r7]
A19046D8  F8BC 8000		ldrh r8, [r12]
A19046DC  F360 08C3		bfi r8, r0, #3, #1
A19046E0  F8AC 8000		strh r8, [r12]

#101		
#102		$label6:
#103				(* END_IF *)
#104		
#105		
#106				(* IF Alarm_Val_FB^ > 0 *)
#107				LD		Alarm_Val_FB^	{LNXT:34|-1|-1}
(*) UNDEF
A19046E4  F8DF 7074		ldr r7, [pc, #+116] ; 0x2C
A19046E8  F856 C007		ldr r12, [r6, +r7]
A19046EC  F8BC 0000		ldrh r0, [r12]

#108				GT		0	{LNXT:34|-1|-1}
(*) WORD
A19046F0  2800     		cmp r0, #0
A19046F2  BFD8 2000		lemov r0, #0
A19046F6  BFC8 2001		gtmov r0, #1

#109				JMPCN	$label7	{LNXT:34|35|38}
(-) BOOL
A19046FA  2800     		cmp r0, #0
A19046FC  D004     		beq #8 ; 0xA1904708


#110		
#111				(* THEN *)
#112		
#113					(* isOK := FALSE; *)
#114					MOVE		FALSE,isOK	{LNXT:35|38|-1}
(*) BOOL
A1904700  2000     		mov r0, #0 ; 0
A1904702  F8DF 7044		ldr r7, [pc, #+68] ; 0x19
A1904706  55F0     		strb r0, [r6, +r7]

#115		
#116		$label7:
#117				(* END_IF *)
#118		
#119				(* is_check_done := TRUE; *)
#120				MOVE		TRUE,is_check_done	{LNXT:38|41|-1}
(*) BOOL
A1904708  2001     		mov r0, #1 ; 1
A190470A  F8DF 7038		ldr r7, [pc, #+56] ; 0x18
A190470E  55F0     		strb r0, [r6, +r7]

#121		
#122		$label2:
#123			(* END_IF *)
#124		
#125			(* check_timer *)
#126			CAL		check_timer	{LNXT:41|-1|-1}
(*) BOOL
A1904710  E92D 0021		stmdb sp!, { r0, r5 }
A1904714  F8DF 701C		ldr r7, [pc, #+28] ; 0x4
A1904718  19F5     		add r5, r6, r7
A190471A  F8DF 4014		ldr r4, [pc, #+20] ; 0xA19044B0
A190471E  F044 0401		orr r4, r4, #1
A1904722  47A0     		blx r4
A1904724  E8BD 0021		ldmia sp!, { r0, r5 }

A1904728  E8BD 4040		ldmia sp!, { r6, lr }

A190472C  4770     		bx lr

A1904730  A19044B0		; 0xA19044B0
A1904734  00000004		; 0x00000004
A1904738  00000008		; 0x00000008
A190473C  0000000C		; 0x0000000C
A1904740  00000010		; 0x00000010
A1904744  00000018		; 0x00000018
A1904748  00000019		; 0x00000019
A190474C  0000001C		; 0x0000001C
A1904750  00000020		; 0x00000020
A1904754  00000024		; 0x00000024
A1904758  00000028		; 0x00000028
A190475C  0000002C		; 0x0000002C
A1904760  00000030		; 0x00000030
A1904764  00000034		; 0x00000034
A1904768  00000038		; 0x00000038
A190476C  0000003C		; 0x0000003C
A1904770  00000040		; 0x00000040
A1904774  00002710		; 0x00002710


Frame allocation (hex):

	0000 bit  0: VAR should_run_timer
	0004       : FB check_timer
	0018 bit  0: VAR is_check_done
	0019 bit  0: VAR isOK
	001C       : VAR di_val_open_state_fall_FB
	0020       : VAR di_val_close_state_fall_FB
	0024       : VAR di_val_open_state_R_FB
	0028       : VAR di_val_close_state_R_FB
	002C       : VAR Alarm_Val_FB
	0030       : VAR o_val_open_R_FB
	0034       : VAR o_val_close_R_FB
	0038       : VAR o_val_open_fall_FB
	003C       : VAR o_val_close_fall_FB
	0040       : VAR start_check

END_FUNCTION_BLOCK
**************************************************
	List function block: CheckWashAndStart
**************************************************

FUNCTION_BLOCK CheckWashAndStart

        VAR_IN_OUT
sv_washing_FB : BOOL^;
o_val_open_R_FB : BOOL^;
o_val_close_R_FB : BOOL^;
o_val_open_fall_FB : BOOL^;
o_val_close_fall_FB : BOOL^;
q_start_ats_FB : BOOL^;
ep_time_wash_FB : INT^;
i_val_state_FB : INT^;
di_val_open_state_fall_FB : INT^;
di_val_close_state_fall_FB : INT^;
di_val_open_state_R_FB : INT^;
di_val_close_state_R_FB : BOOL^;
Alarm_Val_FB : WORD^;
	END_VAR

        VAR_OUTPUT
is_running_wash : BOOL;
	END_VAR

        VAR
washing_timer : TON;	{ DE:"локальний FB таймера" }
onWash : BOOL;
checkAlarmVal : CheckAlarmVal;
valve_rising : BOOL;
prev_val_open_fall : BOOL;
prev_val_close_fall : BOOL;
prev_val_open_R : BOOL;
prev_val_close_R : BOOL;
finish_val_rising : BOOL;
	END_VAR

END_FUNCTION_BLOCK

A1904778  E92D 4040		stmdb sp!, { r6, lr }
A190477C  462E     		mov r6, r5

#0		{SRC:CheckWashAndStart}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF sv_washing_FB^ and i_val_state_FB^=1 *)
#5			LD		i_val_state_FB^	{LNXT:1|-1|-1}
(*) UNDEF
A190477E  F8DF 75E4		ldr r7, [pc, #+1508] ; 0x80
A1904782  F856 C007		ldr r12, [r6, +r7]
A1904786  F9BC 0000		ldrsh r0, [r12]

#6			EQ		1	{LNXT:1|-1|-1}
(*) INT
A190478A  2801     		cmp r0, #1
A190478C  BF18 2000		nemov r0, #0
A1904790  BF08 2001		eqmov r0, #1

#7			AND		sv_washing_FB^	{LNXT:1|-1|-1}
(*) BOOL
A1904794  F8DF 75B0		ldr r7, [pc, #+1456] ; 0x64
A1904798  F856 C007		ldr r12, [r6, +r7]
A190479C  F8DF 75A8		ldr r7, [pc, #+1448] ; 0x64
A19047A0  F856 C007		ldr r12, [r6, +r7]
A19047A4  F89C 7000		ldrb r7, [r12]
A19047A8  4038     		and r0, r0, r7

#8			JMPCN	$label0	{LNXT:1|2|4}
(-) BOOL
A19047AA  2800     		cmp r0, #0
A19047AC  D006     		beq #12 ; 0xA19047BC


#9		
#10			(* THEN *)
#11		
#12				(* onWash :=true; *)
#13				MOVE		true,onWash	{LNXT:2|7|-1}
(*) BOOL
A19047B0  2001     		mov r0, #1 ; 1
A19047B2  F8DF 753C		ldr r7, [pc, #+1340] ; 0x14
A19047B6  55F0     		strb r0, [r6, +r7]

#14				JMP		$label1	{LNXT:1|2|4}
(-) BOOL
A19047B8  E004     		b #8 ; 0xA19047C4


#15		$label0:
#16		
#17			(* ELSE *)
#18		
#19				(* onWash :=false; *)
#20				MOVE		false,onWash	{LNXT:4|7|-1}
(*) BOOL
A19047BC  2000     		mov r0, #0 ; 0
A19047BE  F8DF 7530		ldr r7, [pc, #+1328] ; 0x14
A19047C2  55F0     		strb r0, [r6, +r7]

#21		
#22		$label1:
#23			(* END_IF *)
#24		
#25		
#26			(* IF onWash *)
#27			LD		onWash	{LNXT:7|-1|-1}
(*) UNDEF
A19047C4  F8DF 7528		ldr r7, [pc, #+1320] ; 0x14
A19047C8  5DF0     		ldrb r0, [r6, +r7]

#28			JMPCN	$label2	{LNXT:7|10|53}
(-) BOOL
A19047CA  2800     		cmp r0, #0
A19047CC  F000 8121		beq #578 ; 0xA1904A12


#29		
#30			(* THEN *)
#31		
#32				(* is_running_wash :=true; *)
#33				MOVE		true,is_running_wash	{LNXT:10|12|-1}
(*) BOOL
A19047D0  2001     		mov r0, #1 ; 1
A19047D2  F8DF 7570		ldr r7, [pc, #+1392] ; 0x62
A19047D6  55F0     		strb r0, [r6, +r7]

#34		
#35				(* prev_val_open_fall:=o_val_open_fall_FB^; *)
#36				MOVE		o_val_open_fall_FB^,prev_val_open_fall	{LNXT:12|13|-1}
(*) BOOL
A19047D8  F8DF 7578		ldr r7, [pc, #+1400] ; 0x70
A19047DC  F856 C007		ldr r12, [r6, +r7]
A19047E0  F89C 0000		ldrb r0, [r12]
A19047E4  F8DF 7548		ldr r7, [pc, #+1352] ; 0x5D
A19047E8  55F0     		strb r0, [r6, +r7]

#37		
#38				(* prev_val_close_fall:=o_val_close_fall_FB^; *)
#39				MOVE		o_val_close_fall_FB^,prev_val_close_fall	{LNXT:13|14|-1}
(*) BOOL
A19047EA  F8DF 756C		ldr r7, [pc, #+1388] ; 0x74
A19047EE  F856 C007		ldr r12, [r6, +r7]
A19047F2  F89C 0000		ldrb r0, [r12]
A19047F6  F8DF 753C		ldr r7, [pc, #+1340] ; 0x5E
A19047FA  55F0     		strb r0, [r6, +r7]

#40		
#41				(* prev_val_open_R:=o_val_open_R_FB^; *)
#42				MOVE		o_val_open_R_FB^,prev_val_open_R	{LNXT:14|15|-1}
(*) BOOL
A19047FC  F8DF 754C		ldr r7, [pc, #+1356] ; 0x68
A1904800  F856 C007		ldr r12, [r6, +r7]
A1904804  F89C 0000		ldrb r0, [r12]
A1904808  F8DF 752C		ldr r7, [pc, #+1324] ; 0x5F
A190480C  55F0     		strb r0, [r6, +r7]

#43		
#44				(* prev_val_close_R:=o_val_close_R_FB^; *)
#45				MOVE		o_val_close_R_FB^,prev_val_close_R	{LNXT:15|17|-1}
(*) BOOL
A190480E  F8DF 7540		ldr r7, [pc, #+1344] ; 0x6C
A1904812  F856 C007		ldr r12, [r6, +r7]
A1904816  F89C 0000		ldrb r0, [r12]
A190481A  F8DF 7520		ldr r7, [pc, #+1312] ; 0x60
A190481E  55F0     		strb r0, [r6, +r7]

#46		
#47				(* o_val_close_R_FB^:=true; *)
#48				MOVE		true,o_val_close_R_FB^	{LNXT:17|18|-1}
(*) BOOL
A1904820  2001     		mov r0, #1 ; 1
A1904822  F8DF 752C		ldr r7, [pc, #+1324] ; 0x6C
A1904826  F856 C007		ldr r12, [r6, +r7]
A190482A  F88C 0000		strb r0, [r12]

#49		
#50				(* o_val_open_R_FB^:=false; *)
#51				MOVE		false,o_val_open_R_FB^	{LNXT:18|19|-1}
(*) BOOL
A190482E  2000     		mov r0, #0 ; 0
A1904830  F8DF 7518		ldr r7, [pc, #+1304] ; 0x68
A1904834  F856 C007		ldr r12, [r6, +r7]
A1904838  F88C 0000		strb r0, [r12]

#52		
#53				(* o_val_open_fall_FB^:=true; *)
#54				MOVE		true,o_val_open_fall_FB^	{LNXT:19|20|-1}
(*) BOOL
A190483C  2001     		mov r0, #1 ; 1
A190483E  F8DF 7514		ldr r7, [pc, #+1300] ; 0x70
A1904842  F856 C007		ldr r12, [r6, +r7]
A1904846  F88C 0000		strb r0, [r12]

#55		
#56				(* o_val_close_fall_FB^:=false; *)
#57				MOVE		false,o_val_close_fall_FB^	{LNXT:20|22|-1}
(*) BOOL
A190484A  2000     		mov r0, #0 ; 0
A190484C  F8DF 7508		ldr r7, [pc, #+1288] ; 0x74
A1904850  F856 C007		ldr r12, [r6, +r7]
A1904854  F88C 0000		strb r0, [r12]

#58		
#59				(* valve_rising :=
#60		    (o_val_open_fall_FB^ AND NOT prev_val_open_fall) OR
#61			(o_val_close_fall_FB^ AND NOT prev_val_close_fall) OR
#62			(o_val_open_R_FB^ AND NOT prev_val_open_R) OR
#63			(o_val_close_R_FB^ AND NOT prev_val_close_R); *)
#64				LD		prev_val_close_R	{LNXT:22|30|-1}
(*) UNDEF
A1904858  F8DF 74E0		ldr r7, [pc, #+1248] ; 0x60
A190485C  5DF0     		ldrb r0, [r6, +r7]

#65				NOT	{LNXT:22|30|-1}
(*) BOOL
A190485E  2800     		cmp r0, #0
A1904860  BF08 2001		eqmov r0, #1
A1904864  BF18 2000		nemov r0, #0

#66				AND		o_val_close_R_FB^	{LNXT:22|30|-1}
(*) BOOL
A1904868  F8DF 74E4		ldr r7, [pc, #+1252] ; 0x6C
A190486C  F856 C007		ldr r12, [r6, +r7]
A1904870  F8DF 74DC		ldr r7, [pc, #+1244] ; 0x6C
A1904874  F856 C007		ldr r12, [r6, +r7]
A1904878  F89C 7000		ldrb r7, [r12]
A190487C  4038     		and r0, r0, r7

#67				OR(		prev_val_open_R	{LNXT:22|30|-1}
(*) BOOL
A190487E  B082     		sub sp, sp, #8
A1904880  F8CD 0000		str r0, [sp]
A1904884  F8DF 74B0		ldr r7, [pc, #+1200] ; 0x5F
A1904888  5DF0     		ldrb r0, [r6, +r7]

#68				NOT	{LNXT:22|30|-1}
(*) BOOL
A190488A  2800     		cmp r0, #0
A190488C  BF08 2001		eqmov r0, #1
A1904890  BF18 2000		nemov r0, #0

#69				AND		o_val_open_R_FB^	{LNXT:22|30|-1}
(*) BOOL
A1904894  F8DF 74B4		ldr r7, [pc, #+1204] ; 0x68
A1904898  F856 C007		ldr r12, [r6, +r7]
A190489C  F8DF 74AC		ldr r7, [pc, #+1196] ; 0x68
A19048A0  F856 C007		ldr r12, [r6, +r7]
A19048A4  F89C 7000		ldrb r7, [r12]
A19048A8  4038     		and r0, r0, r7

#70				OR(		prev_val_close_fall	{LNXT:22|30|-1}
(*) BOOL
A19048AA  B082     		sub sp, sp, #8
A19048AC  F8CD 0000		str r0, [sp]
A19048B0  F8DF 7480		ldr r7, [pc, #+1152] ; 0x5E
A19048B4  5DF0     		ldrb r0, [r6, +r7]

#71				NOT	{LNXT:22|30|-1}
(*) BOOL
A19048B6  2800     		cmp r0, #0
A19048B8  BF08 2001		eqmov r0, #1
A19048BC  BF18 2000		nemov r0, #0

#72				AND		o_val_close_fall_FB^	{LNXT:22|30|-1}
(*) BOOL
A19048C0  F8DF 7494		ldr r7, [pc, #+1172] ; 0x74
A19048C4  F856 C007		ldr r12, [r6, +r7]
A19048C8  F8DF 748C		ldr r7, [pc, #+1164] ; 0x74
A19048CC  F856 C007		ldr r12, [r6, +r7]
A19048D0  F89C 7000		ldrb r7, [r12]
A19048D4  4038     		and r0, r0, r7

#73				OR(		prev_val_open_fall	{LNXT:22|30|-1}
(*) BOOL
A19048D6  B082     		sub sp, sp, #8
A19048D8  F8CD 0000		str r0, [sp]
A19048DC  F8DF 7450		ldr r7, [pc, #+1104] ; 0x5D
A19048E0  5DF0     		ldrb r0, [r6, +r7]

#74				NOT	{LNXT:22|30|-1}
(*) BOOL
A19048E2  2800     		cmp r0, #0
A19048E4  BF08 2001		eqmov r0, #1
A19048E8  BF18 2000		nemov r0, #0

#75				AND		o_val_open_fall_FB^	{LNXT:22|30|-1}
(*) BOOL
A19048EC  F8DF 7464		ldr r7, [pc, #+1124] ; 0x70
A19048F0  F856 C007		ldr r12, [r6, +r7]
A19048F4  F8DF 745C		ldr r7, [pc, #+1116] ; 0x70
A19048F8  F856 C007		ldr r12, [r6, +r7]
A19048FC  F89C 7000		ldrb r7, [r12]
A1904900  4038     		and r0, r0, r7

#76				)	{LNXT:22|30|-1}
(*) BOOL
A1904902  4607     		mov r7, r0
A1904904  F8DD 0000		ldr r0, [sp]
A1904908  B002     		add sp, sp, #8
A190490A  4338     		orr r0, r0, r7

#77				)	{LNXT:22|30|-1}
(*) BOOL
A190490C  4607     		mov r7, r0
A190490E  F8DD 0000		ldr r0, [sp]
A1904912  B002     		add sp, sp, #8
A1904914  4338     		orr r0, r0, r7

#78				)	{LNXT:22|30|-1}
(*) BOOL
A1904916  4607     		mov r7, r0
A1904918  F8DD 0000		ldr r0, [sp]
A190491C  B002     		add sp, sp, #8
A190491E  4338     		orr r0, r0, r7

#79				ST		valve_rising	{LNXT:22|30|-1}
(*) BOOL
A1904920  F8DF 7408		ldr r7, [pc, #+1032] ; 0x5C
A1904924  55F0     		strb r0, [r6, +r7]

#80		
#81				(* checkAlarmVal *)
#82				MOVE		di_val_open_state_fall_FB,checkAlarmVal.di_val_open_state_fall_FB	{LNXT:30|-1|-1}
(*) BOOL
A1904926  F8DF 7440		ldr r7, [pc, #+1088] ; 0x84
A190492A  F856 C007		ldr r12, [r6, +r7]
A190492E  4660     		mov r0, r12
A1904930  F8DF 73D0		ldr r7, [pc, #+976] ; 0x34
A1904934  51F0     		str r0, [r6, +r7]

#83				MOVE		di_val_close_state_fall_FB,checkAlarmVal.di_val_close_state_fall_FB	{LNXT:30|-1|-1}
(*) INT^
A1904936  F8DF 7434		ldr r7, [pc, #+1076] ; 0x88
A190493A  F856 C007		ldr r12, [r6, +r7]
A190493E  4660     		mov r0, r12
A1904940  F8DF 73C4		ldr r7, [pc, #+964] ; 0x38
A1904944  51F0     		str r0, [r6, +r7]

#84				MOVE		di_val_open_state_R_FB,checkAlarmVal.di_val_open_state_R_FB	{LNXT:31|-1|-1}
(*) INT^
A1904946  F8DF 7428		ldr r7, [pc, #+1064] ; 0x8C
A190494A  F856 C007		ldr r12, [r6, +r7]
A190494E  4660     		mov r0, r12
A1904950  F8DF 73B8		ldr r7, [pc, #+952] ; 0x3C
A1904954  51F0     		str r0, [r6, +r7]

#85				MOVE		di_val_close_state_R_FB,checkAlarmVal.di_val_close_state_R_FB	{LNXT:32|-1|-1}
(*) INT^
A1904956  F8DF 741C		ldr r7, [pc, #+1052] ; 0x90
A190495A  F856 C007		ldr r12, [r6, +r7]
A190495E  4660     		mov r0, r12
A1904960  F8DF 73AC		ldr r7, [pc, #+940] ; 0x40
A1904964  51F0     		str r0, [r6, +r7]

#86				MOVE		Alarm_Val_FB,checkAlarmVal.Alarm_Val_FB	{LNXT:33|-1|-1}
(*) BOOL^
A1904966  F8DF 7410		ldr r7, [pc, #+1040] ; 0x94
A190496A  F856 C007		ldr r12, [r6, +r7]
A190496E  4660     		mov r0, r12
A1904970  F8DF 73A0		ldr r7, [pc, #+928] ; 0x44
A1904974  51F0     		str r0, [r6, +r7]

#87				MOVE		o_val_open_R_FB,checkAlarmVal.o_val_open_R_FB	{LNXT:34|-1|-1}
(*) WORD^
A1904976  F8DF 73D4		ldr r7, [pc, #+980] ; 0x68
A190497A  F856 C007		ldr r12, [r6, +r7]
A190497E  4660     		mov r0, r12
A1904980  F8DF 7394		ldr r7, [pc, #+916] ; 0x48
A1904984  51F0     		str r0, [r6, +r7]

#88				MOVE		o_val_close_R_FB,checkAlarmVal.o_val_close_R_FB	{LNXT:35|-1|-1}
(*) BOOL^
A1904986  F8DF 73C8		ldr r7, [pc, #+968] ; 0x6C
A190498A  F856 C007		ldr r12, [r6, +r7]
A190498E  4660     		mov r0, r12
A1904990  F8DF 7388		ldr r7, [pc, #+904] ; 0x4C
A1904994  51F0     		str r0, [r6, +r7]

#89				MOVE		o_val_open_fall_FB,checkAlarmVal.o_val_open_fall_FB	{LNXT:36|-1|-1}
(*) BOOL^
A1904996  F8DF 73BC		ldr r7, [pc, #+956] ; 0x70
A190499A  F856 C007		ldr r12, [r6, +r7]
A190499E  4660     		mov r0, r12
A19049A0  F8DF 737C		ldr r7, [pc, #+892] ; 0x50
A19049A4  51F0     		str r0, [r6, +r7]

#90				MOVE		o_val_close_fall_FB,checkAlarmVal.o_val_close_fall_FB	{LNXT:37|-1|-1}
(*) BOOL^
A19049A6  F8DF 73B0		ldr r7, [pc, #+944] ; 0x74
A19049AA  F856 C007		ldr r12, [r6, +r7]
A19049AE  4660     		mov r0, r12
A19049B0  F8DF 7370		ldr r7, [pc, #+880] ; 0x54
A19049B4  51F0     		str r0, [r6, +r7]

#91				MOVE		valve_rising,checkAlarmVal.start_check	{LNXT:38|-1|-1}
(*) BOOL^
A19049B6  F8DF 7374		ldr r7, [pc, #+884] ; 0x5C
A19049BA  19F0     		add r0, r6, r7
A19049BC  F8DF 7368		ldr r7, [pc, #+872] ; 0x58
A19049C0  51F0     		str r0, [r6, +r7]

#92				CAL		checkAlarmVal	{LNXT:30|43|-1}
(*) BOOL^
A19049C2  E92D 0021		stmdb sp!, { r0, r5 }
A19049C6  F8DF 732C		ldr r7, [pc, #+812] ; 0x18
A19049CA  19F5     		add r5, r6, r7
A19049CC  F8DF 4310		ldr r4, [pc, #+784] ; 0xA1904550
A19049D0  F044 0401		orr r4, r4, #1
A19049D4  47A0     		blx r4
A19049D6  E8BD 0021		ldmia sp!, { r0, r5 }

#93		
#94		
#95				(* IF checkAlarmVal.is_check_done and checkAlarmVal.isOK *)
#96				LD		checkAlarmVal.is_check_done	{LNXT:43|-1|-1}
(*) UNDEF
A19049DA  F8DF 7320		ldr r7, [pc, #+800] ; 0x30
A19049DE  5DF0     		ldrb r0, [r6, +r7]

#97				AND		checkAlarmVal.isOK	{LNXT:43|-1|-1}
(*) BOOL
A19049E0  F8DF 731C		ldr r7, [pc, #+796] ; 0x31
A19049E4  5DF7     		ldrb r7, [r6, +r7]
A19049E6  4038     		and r0, r0, r7

#98				JMPCN	$label4	{LNXT:43|44|47}
(-) BOOL
A19049E8  2800     		cmp r0, #0
A19049EA  D009     		beq #18 ; 0xA1904A00


#99		
#100				(* THEN *)
#101		
#102					(* q_start_ats_FB^:=true; *)
#103					MOVE		true,q_start_ats_FB^	{LNXT:44|57|-1}
(*) BOOL
A19049EE  2001     		mov r0, #1 ; 1
A19049F0  F8DF 7368		ldr r7, [pc, #+872] ; 0x78
A19049F4  F856 C007		ldr r12, [r6, +r7]
A19049F8  F88C 0000		strb r0, [r12]

#104					JMP		$label5	{LNXT:43|44|47}
(-) BOOL
A19049FC  E007     		b #14 ; 0xA1904A0E


#105		$label4:
#106		
#107				(* ELSE *)
#108		
#109					(* q_start_ats_FB^:=false; *)
#110					MOVE		false,q_start_ats_FB^	{LNXT:47|57|-1}
(*) BOOL
A1904A00  2000     		mov r0, #0 ; 0
A1904A02  F8DF 7358		ldr r7, [pc, #+856] ; 0x78
A1904A06  F856 C007		ldr r12, [r6, +r7]
A1904A0A  F88C 0000		strb r0, [r12]

#111		
#112		$label5:
#113				(* END_IF *)
#114				JMP		$label3	{LNXT:7|10|53}
(-) BOOL
A1904A0E  E007     		b #14 ; 0xA1904A20


#115		$label2:
#116		
#117			(* ELSE *)
#118		
#119				(* q_start_ats_FB^:=true; *)
#120				MOVE		true,q_start_ats_FB^	{LNXT:53|57|-1}
(*) BOOL
A1904A12  2001     		mov r0, #1 ; 1
A1904A14  F8DF 7344		ldr r7, [pc, #+836] ; 0x78
A1904A18  F856 C007		ldr r12, [r6, +r7]
A1904A1C  F88C 0000		strb r0, [r12]

#121		
#122		$label3:
#123			(* END_IF *)
#124		
#125		
#126			(* IF washing_timer.Q *)
#127			LD		washing_timer.Q	{LNXT:57|-1|-1}
(*) UNDEF
A1904A20  F8DF 72C8		ldr r7, [pc, #+712] ; 0xC
A1904A24  5DF0     		ldrb r0, [r6, +r7]

#128			JMPCN	$label6	{LNXT:57|60|93}
(-) BOOL
A1904A26  2800     		cmp r0, #0
A1904A28  F000 80B1		beq #354 ; 0xA1904B8E


#129		
#130			(* THEN *)
#131		
#132				(* prev_val_open_fall:=o_val_open_fall_FB^; *)
#133				MOVE		o_val_open_fall_FB^,prev_val_open_fall	{LNXT:60|61|-1}
(*) BOOL
A1904A2C  F8DF 7324		ldr r7, [pc, #+804] ; 0x70
A1904A30  F856 C007		ldr r12, [r6, +r7]
A1904A34  F89C 0000		ldrb r0, [r12]
A1904A38  F8DF 72F4		ldr r7, [pc, #+756] ; 0x5D
A1904A3C  55F0     		strb r0, [r6, +r7]

#134		
#135				(* prev_val_close_fall:=o_val_close_fall_FB^; *)
#136				MOVE		o_val_close_fall_FB^,prev_val_close_fall	{LNXT:61|62|-1}
(*) BOOL
A1904A3E  F8DF 7318		ldr r7, [pc, #+792] ; 0x74
A1904A42  F856 C007		ldr r12, [r6, +r7]
A1904A46  F89C 0000		ldrb r0, [r12]
A1904A4A  F8DF 72E8		ldr r7, [pc, #+744] ; 0x5E
A1904A4E  55F0     		strb r0, [r6, +r7]

#137		
#138				(* prev_val_open_R:=o_val_open_R_FB^; *)
#139				MOVE		o_val_open_R_FB^,prev_val_open_R	{LNXT:62|63|-1}
(*) BOOL
A1904A50  F8DF 72F8		ldr r7, [pc, #+760] ; 0x68
A1904A54  F856 C007		ldr r12, [r6, +r7]
A1904A58  F89C 0000		ldrb r0, [r12]
A1904A5C  F8DF 72D8		ldr r7, [pc, #+728] ; 0x5F
A1904A60  55F0     		strb r0, [r6, +r7]

#140		
#141				(* prev_val_close_R:=o_val_close_R_FB^; *)
#142				MOVE		o_val_close_R_FB^,prev_val_close_R	{LNXT:63|66|-1}
(*) BOOL
A1904A62  F8DF 72EC		ldr r7, [pc, #+748] ; 0x6C
A1904A66  F856 C007		ldr r12, [r6, +r7]
A1904A6A  F89C 0000		ldrb r0, [r12]
A1904A6E  F8DF 72CC		ldr r7, [pc, #+716] ; 0x60
A1904A72  55F0     		strb r0, [r6, +r7]

#143		
#144				(* o_val_close_R_FB^:=false; *)
#145				MOVE		false,o_val_close_R_FB^	{LNXT:66|67|-1}
(*) BOOL
A1904A74  2000     		mov r0, #0 ; 0
A1904A76  F8DF 72D8		ldr r7, [pc, #+728] ; 0x6C
A1904A7A  F856 C007		ldr r12, [r6, +r7]
A1904A7E  F88C 0000		strb r0, [r12]

#146		
#147				(* o_val_open_fall_FB^:=false; *)
#148				MOVE		false,o_val_open_fall_FB^	{LNXT:67|69|-1}
(*) BOOL
A1904A82  2000     		mov r0, #0 ; 0
A1904A84  F8DF 72CC		ldr r7, [pc, #+716] ; 0x70
A1904A88  F856 C007		ldr r12, [r6, +r7]
A1904A8C  F88C 0000		strb r0, [r12]

#149		
#150				(* o_val_open_R_FB^:=true; *)
#151				MOVE		true,o_val_open_R_FB^	{LNXT:69|70|-1}
(*) BOOL
A1904A90  2001     		mov r0, #1 ; 1
A1904A92  F8DF 72B8		ldr r7, [pc, #+696] ; 0x68
A1904A96  F856 C007		ldr r12, [r6, +r7]
A1904A9A  F88C 0000		strb r0, [r12]

#152		
#153				(* o_val_close_fall_FB^:=true; *)
#154				MOVE		true,o_val_close_fall_FB^	{LNXT:70|72|-1}
(*) BOOL
A1904A9E  2001     		mov r0, #1 ; 1
A1904AA0  F8DF 72B4		ldr r7, [pc, #+692] ; 0x74
A1904AA4  F856 C007		ldr r12, [r6, +r7]
A1904AA8  F88C 0000		strb r0, [r12]

#155		
#156				(* valve_rising :=
#157		    (o_val_open_fall_FB^ AND NOT prev_val_open_fall) OR
#158			(o_val_close_fall_FB^ AND NOT prev_val_close_fall) OR
#159			(o_val_open_R_FB^ AND NOT prev_val_open_R) OR
#160			(o_val_close_R_FB^ AND NOT prev_val_close_R); *)
#161				LD		prev_val_close_R	{LNXT:72|78|-1}
(*) UNDEF
A1904AAC  F8DF 728C		ldr r7, [pc, #+652] ; 0x60
A1904AB0  5DF0     		ldrb r0, [r6, +r7]

#162				NOT	{LNXT:72|78|-1}
(*) BOOL
A1904AB2  2800     		cmp r0, #0
A1904AB4  BF08 2001		eqmov r0, #1
A1904AB8  BF18 2000		nemov r0, #0

#163				AND		o_val_close_R_FB^	{LNXT:72|78|-1}
(*) BOOL
A1904ABC  F8DF 7290		ldr r7, [pc, #+656] ; 0x6C
A1904AC0  F856 C007		ldr r12, [r6, +r7]
A1904AC4  F8DF 7288		ldr r7, [pc, #+648] ; 0x6C
A1904AC8  F856 C007		ldr r12, [r6, +r7]
A1904ACC  F89C 7000		ldrb r7, [r12]
A1904AD0  4038     		and r0, r0, r7

#164				OR(		prev_val_open_R	{LNXT:72|78|-1}
(*) BOOL
A1904AD2  B082     		sub sp, sp, #8
A1904AD4  F8CD 0000		str r0, [sp]
A1904AD8  F8DF 725C		ldr r7, [pc, #+604] ; 0x5F
A1904ADC  5DF0     		ldrb r0, [r6, +r7]

#165				NOT	{LNXT:72|78|-1}
(*) BOOL
A1904ADE  2800     		cmp r0, #0
A1904AE0  BF08 2001		eqmov r0, #1
A1904AE4  BF18 2000		nemov r0, #0

#166				AND		o_val_open_R_FB^	{LNXT:72|78|-1}
(*) BOOL
A1904AE8  F8DF 7260		ldr r7, [pc, #+608] ; 0x68
A1904AEC  F856 C007		ldr r12, [r6, +r7]
A1904AF0  F8DF 7258		ldr r7, [pc, #+600] ; 0x68
A1904AF4  F856 C007		ldr r12, [r6, +r7]
A1904AF8  F89C 7000		ldrb r7, [r12]
A1904AFC  4038     		and r0, r0, r7

#167				OR(		prev_val_close_fall	{LNXT:72|78|-1}
(*) BOOL
A1904AFE  B082     		sub sp, sp, #8
A1904B00  F8CD 0000		str r0, [sp]
A1904B04  F8DF 722C		ldr r7, [pc, #+556] ; 0x5E
A1904B08  5DF0     		ldrb r0, [r6, +r7]

#168				NOT	{LNXT:72|78|-1}
(*) BOOL
A1904B0A  2800     		cmp r0, #0
A1904B0C  BF08 2001		eqmov r0, #1
A1904B10  BF18 2000		nemov r0, #0

#169				AND		o_val_close_fall_FB^	{LNXT:72|78|-1}
(*) BOOL
A1904B14  F8DF 7240		ldr r7, [pc, #+576] ; 0x74
A1904B18  F856 C007		ldr r12, [r6, +r7]
A1904B1C  F8DF 7238		ldr r7, [pc, #+568] ; 0x74
A1904B20  F856 C007		ldr r12, [r6, +r7]
A1904B24  F89C 7000		ldrb r7, [r12]
A1904B28  4038     		and r0, r0, r7

#170				OR(		prev_val_open_fall	{LNXT:72|78|-1}
(*) BOOL
A1904B2A  B082     		sub sp, sp, #8
A1904B2C  F8CD 0000		str r0, [sp]
A1904B30  F8DF 71FC		ldr r7, [pc, #+508] ; 0x5D
A1904B34  5DF0     		ldrb r0, [r6, +r7]

#171				NOT	{LNXT:72|78|-1}
(*) BOOL
A1904B36  2800     		cmp r0, #0
A1904B38  BF08 2001		eqmov r0, #1
A1904B3C  BF18 2000		nemov r0, #0

#172				AND		o_val_open_fall_FB^	{LNXT:72|78|-1}
(*) BOOL
A1904B40  F8DF 7210		ldr r7, [pc, #+528] ; 0x70
A1904B44  F856 C007		ldr r12, [r6, +r7]
A1904B48  F8DF 7208		ldr r7, [pc, #+520] ; 0x70
A1904B4C  F856 C007		ldr r12, [r6, +r7]
A1904B50  F89C 7000		ldrb r7, [r12]
A1904B54  4038     		and r0, r0, r7

#173				)	{LNXT:72|78|-1}
(*) BOOL
A1904B56  4607     		mov r7, r0
A1904B58  F8DD 0000		ldr r0, [sp]
A1904B5C  B002     		add sp, sp, #8
A1904B5E  4338     		orr r0, r0, r7

#174				)	{LNXT:72|78|-1}
(*) BOOL
A1904B60  4607     		mov r7, r0
A1904B62  F8DD 0000		ldr r0, [sp]
A1904B66  B002     		add sp, sp, #8
A1904B68  4338     		orr r0, r0, r7

#175				)	{LNXT:72|78|-1}
(*) BOOL
A1904B6A  4607     		mov r7, r0
A1904B6C  F8DD 0000		ldr r0, [sp]
A1904B70  B002     		add sp, sp, #8
A1904B72  4338     		orr r0, r0, r7

#176				ST		valve_rising	{LNXT:72|78|-1}
(*) BOOL
A1904B74  F8DF 71B4		ldr r7, [pc, #+436] ; 0x5C
A1904B78  55F0     		strb r0, [r6, +r7]

#177		
#178		
#179				(* IF valve_rising *)
#180				LD		valve_rising	{LNXT:78|-1|-1}
(*) UNDEF
A1904B7A  F8DF 71B0		ldr r7, [pc, #+432] ; 0x5C
A1904B7E  5DF0     		ldrb r0, [r6, +r7]

#181				JMPCN	$label7	{LNXT:78|79|93}
(-) BOOL
A1904B80  2800     		cmp r0, #0
A1904B82  D004     		beq #8 ; 0xA1904B8E


#182		
#183				(* THEN *)
#184		
#185					(* finish_val_rising :=true; *)
#186					MOVE		true,finish_val_rising	{LNXT:79|93|-1}
(*) BOOL
A1904B86  2001     		mov r0, #1 ; 1
A1904B88  F8DF 71B4		ldr r7, [pc, #+436] ; 0x61
A1904B8C  55F0     		strb r0, [r6, +r7]

#187		
#188		$label7:
#189				(* END_IF *)
#190		
#191		$label6:
#192			(* END_IF *)
#193		
#194		
#195			(* IF finish_val_rising *)
#196			LD		finish_val_rising	{LNXT:93|-1|-1}
(*) UNDEF
A1904B8E  F8DF 71B0		ldr r7, [pc, #+432] ; 0x61
A1904B92  5DF0     		ldrb r0, [r6, +r7]

#197			JMPCN	$label8	{LNXT:93|94|98}
(-) BOOL
A1904B94  2800     		cmp r0, #0
A1904B96  D00B     		beq #22 ; 0xA1904BB0


#198		
#199			(* THEN *)
#200		
#201				(* sv_washing_FB^:=false; *)
#202				MOVE		false,sv_washing_FB^	{LNXT:94|95|-1}
(*) BOOL
A1904B9A  2000     		mov r0, #0 ; 0
A1904B9C  F8DF 71A8		ldr r7, [pc, #+424] ; 0x64
A1904BA0  F856 C007		ldr r12, [r6, +r7]
A1904BA4  F88C 0000		strb r0, [r12]

#203		
#204				(* onWash :=false; *)
#205				MOVE		false,onWash	{LNXT:95|98|-1}
(*) BOOL
A1904BA8  2000     		mov r0, #0 ; 0
A1904BAA  F8DF 7144		ldr r7, [pc, #+324] ; 0x14
A1904BAE  55F0     		strb r0, [r6, +r7]

#206		
#207		$label8:
#208			(* END_IF *)
#209		
#210		
#211			(* IF checkAlarmVal.check_timer.Q *)
#212			LD		checkAlarmVal.check_timer.Q	{LNXT:98|-1|-1}
(*) UNDEF
A1904BB0  F8DF 7144		ldr r7, [pc, #+324] ; 0x28
A1904BB4  5DF0     		ldrb r0, [r6, +r7]

#213			JMPCN	$label9	{LNXT:98|100|106}
(-) BOOL
A1904BB6  2800     		cmp r0, #0
A1904BB8  D004     		beq #8 ; 0xA1904BC4


#214		
#215			(* THEN *)
#216		
#217				(* is_running_wash :=false; *)
#218				MOVE		false,is_running_wash	{LNXT:100|106|-1}
(*) BOOL
A1904BBC  2000     		mov r0, #0 ; 0
A1904BBE  F8DF 7184		ldr r7, [pc, #+388] ; 0x62
A1904BC2  55F0     		strb r0, [r6, +r7]

#219		
#220		$label9:
#221			(* END_IF *)
#222		
#223			(* checkAlarmVal *)
#224			MOVE		di_val_open_state_fall_FB,checkAlarmVal.di_val_open_state_fall_FB	{LNXT:106|-1|-1}
(*) BOOL
A1904BC4  F8DF 71A0		ldr r7, [pc, #+416] ; 0x84
A1904BC8  F856 C007		ldr r12, [r6, +r7]
A1904BCC  4660     		mov r0, r12
A1904BCE  F8DF 7134		ldr r7, [pc, #+308] ; 0x34
A1904BD2  51F0     		str r0, [r6, +r7]

#225			MOVE		di_val_close_state_fall_FB,checkAlarmVal.di_val_close_state_fall_FB	{LNXT:106|-1|-1}
(*) INT^
A1904BD4  F8DF 7194		ldr r7, [pc, #+404] ; 0x88
A1904BD8  F856 C007		ldr r12, [r6, +r7]
A1904BDC  4660     		mov r0, r12
A1904BDE  F8DF 7128		ldr r7, [pc, #+296] ; 0x38
A1904BE2  51F0     		str r0, [r6, +r7]

#226			MOVE		di_val_open_state_R_FB,checkAlarmVal.di_val_open_state_R_FB	{LNXT:107|-1|-1}
(*) INT^
A1904BE4  F8DF 7188		ldr r7, [pc, #+392] ; 0x8C
A1904BE8  F856 C007		ldr r12, [r6, +r7]
A1904BEC  4660     		mov r0, r12
A1904BEE  F8DF 711C		ldr r7, [pc, #+284] ; 0x3C
A1904BF2  51F0     		str r0, [r6, +r7]

#227			MOVE		di_val_close_state_R_FB,checkAlarmVal.di_val_close_state_R_FB	{LNXT:108|-1|-1}
(*) INT^
A1904BF4  F8DF 717C		ldr r7, [pc, #+380] ; 0x90
A1904BF8  F856 C007		ldr r12, [r6, +r7]
A1904BFC  4660     		mov r0, r12
A1904BFE  F8DF 7110		ldr r7, [pc, #+272] ; 0x40
A1904C02  51F0     		str r0, [r6, +r7]

#228			MOVE		Alarm_Val_FB,checkAlarmVal.Alarm_Val_FB	{LNXT:109|-1|-1}
(*) BOOL^
A1904C04  F8DF 7170		ldr r7, [pc, #+368] ; 0x94
A1904C08  F856 C007		ldr r12, [r6, +r7]
A1904C0C  4660     		mov r0, r12
A1904C0E  F8DF 7104		ldr r7, [pc, #+260] ; 0x44
A1904C12  51F0     		str r0, [r6, +r7]

#229			MOVE		o_val_open_R_FB,checkAlarmVal.o_val_open_R_FB	{LNXT:110|-1|-1}
(*) WORD^
A1904C14  F8DF 7134		ldr r7, [pc, #+308] ; 0x68
A1904C18  F856 C007		ldr r12, [r6, +r7]
A1904C1C  4660     		mov r0, r12
A1904C1E  F8DF 70F8		ldr r7, [pc, #+248] ; 0x48
A1904C22  51F0     		str r0, [r6, +r7]

#230			MOVE		o_val_close_R_FB,checkAlarmVal.o_val_close_R_FB	{LNXT:111|-1|-1}
(*) BOOL^
A1904C24  F8DF 7128		ldr r7, [pc, #+296] ; 0x6C
A1904C28  F856 C007		ldr r12, [r6, +r7]
A1904C2C  4660     		mov r0, r12
A1904C2E  F8DF 70EC		ldr r7, [pc, #+236] ; 0x4C
A1904C32  51F0     		str r0, [r6, +r7]

#231			MOVE		o_val_open_fall_FB,checkAlarmVal.o_val_open_fall_FB	{LNXT:112|-1|-1}
(*) BOOL^
A1904C34  F8DF 711C		ldr r7, [pc, #+284] ; 0x70
A1904C38  F856 C007		ldr r12, [r6, +r7]
A1904C3C  4660     		mov r0, r12
A1904C3E  F8DF 70E0		ldr r7, [pc, #+224] ; 0x50
A1904C42  51F0     		str r0, [r6, +r7]

#232			MOVE		o_val_close_fall_FB,checkAlarmVal.o_val_close_fall_FB	{LNXT:113|-1|-1}
(*) BOOL^
A1904C44  F8DF 7110		ldr r7, [pc, #+272] ; 0x74
A1904C48  F856 C007		ldr r12, [r6, +r7]
A1904C4C  4660     		mov r0, r12
A1904C4E  F8DF 70D4		ldr r7, [pc, #+212] ; 0x54
A1904C52  51F0     		str r0, [r6, +r7]

#233			MOVE		finish_val_rising,checkAlarmVal.start_check	{LNXT:114|-1|-1}
(*) BOOL^
A1904C54  F8DF 70E8		ldr r7, [pc, #+232] ; 0x61
A1904C58  19F0     		add r0, r6, r7
A1904C5A  F8DF 70CC		ldr r7, [pc, #+204] ; 0x58
A1904C5E  51F0     		str r0, [r6, +r7]

#234			CAL		checkAlarmVal	{LNXT:106|117|-1}
(*) BOOL^
A1904C60  E92D 0021		stmdb sp!, { r0, r5 }
A1904C64  F8DF 708C		ldr r7, [pc, #+140] ; 0x18
A1904C68  19F5     		add r5, r6, r7
A1904C6A  F8DF 4074		ldr r4, [pc, #+116] ; 0xA1904550
A1904C6E  F044 0401		orr r4, r4, #1
A1904C72  47A0     		blx r4
A1904C74  E8BD 0021		ldmia sp!, { r0, r5 }

#235		
#236		
#237			(* IF finish_val_rising *)
#238			LD		finish_val_rising	{LNXT:117|-1|-1}
(*) UNDEF
A1904C78  F8DF 70C4		ldr r7, [pc, #+196] ; 0x61
A1904C7C  5DF0     		ldrb r0, [r6, +r7]

#239			JMPCN	$label10	{LNXT:117|118|121}
(-) BOOL
A1904C7E  2800     		cmp r0, #0
A1904C80  D004     		beq #8 ; 0xA1904C8C


#240		
#241			(* THEN *)
#242		
#243				(* finish_val_rising:=false; *)
#244				MOVE		false,finish_val_rising	{LNXT:118|121|-1}
(*) BOOL
A1904C84  2000     		mov r0, #0 ; 0
A1904C86  F8DF 70B8		ldr r7, [pc, #+184] ; 0x61
A1904C8A  55F0     		strb r0, [r6, +r7]

#245		
#246		$label10:
#247			(* END_IF *)
#248		
#249			(* washing_timer *)
#250			LD		onWash	{LNXT:121|-1|-1}
(*) UNDEF
A1904C8C  F8DF 7060		ldr r7, [pc, #+96] ; 0x14
A1904C90  5DF0     		ldrb r0, [r6, +r7]

#251			AND		q_start_ats_FB^	{LNXT:121|-1|-1}
(*) BOOL
A1904C92  F8DF 70C8		ldr r7, [pc, #+200] ; 0x78
A1904C96  F856 C007		ldr r12, [r6, +r7]
A1904C9A  F8DF 70C0		ldr r7, [pc, #+192] ; 0x78
A1904C9E  F856 C007		ldr r12, [r6, +r7]
A1904CA2  F89C 7000		ldrb r7, [r12]
A1904CA6  4038     		and r0, r0, r7

#252			ST		washing_timer.IN	{LNXT:121|-1|-1}
(*) BOOL
A1904CA8  F8DF 7038		ldr r7, [pc, #+56] ; 0x4
A1904CAC  55F0     		strb r0, [r6, +r7]

#253			MOVE		ep_time_wash_FB^,washing_timer.PT	{LNXT:121|-1|-1}
(*) BOOL
A1904CAE  F8DF 70B0		ldr r7, [pc, #+176] ; 0x7C
A1904CB2  F856 C007		ldr r12, [r6, +r7]
A1904CB6  F9BC 0000		ldrsh r0, [r12]
A1904CBA  F8DF 702C		ldr r7, [pc, #+44] ; 0x8
A1904CBE  51F0     		str r0, [r6, +r7]

#254			CAL		washing_timer	{LNXT:121|-1|-1}
(*) UDINT
A1904CC0  E92D 0021		stmdb sp!, { r0, r5 }
A1904CC4  4635     		mov r5, r6
A1904CC6  F8DF 4014		ldr r4, [pc, #+20] ; 0xA19044B0
A1904CCA  F044 0401		orr r4, r4, #1
A1904CCE  47A0     		blx r4
A1904CD0  E8BD 0021		ldmia sp!, { r0, r5 }

A1904CD4  E8BD 4040		ldmia sp!, { r6, lr }

A1904CD8  4770     		bx lr

A1904CDC  A19044B0		; 0xA19044B0
A1904CE0  A1904550		; 0xA1904550
A1904CE4  00000004		; 0x00000004
A1904CE8  00000008		; 0x00000008
A1904CEC  0000000C		; 0x0000000C
A1904CF0  00000014		; 0x00000014
A1904CF4  00000018		; 0x00000018
A1904CF8  00000028		; 0x00000028
A1904CFC  00000030		; 0x00000030
A1904D00  00000031		; 0x00000031
A1904D04  00000034		; 0x00000034
A1904D08  00000038		; 0x00000038
A1904D0C  0000003C		; 0x0000003C
A1904D10  00000040		; 0x00000040
A1904D14  00000044		; 0x00000044
A1904D18  00000048		; 0x00000048
A1904D1C  0000004C		; 0x0000004C
A1904D20  00000050		; 0x00000050
A1904D24  00000054		; 0x00000054
A1904D28  00000058		; 0x00000058
A1904D2C  0000005C		; 0x0000005C
A1904D30  0000005D		; 0x0000005D
A1904D34  0000005E		; 0x0000005E
A1904D38  0000005F		; 0x0000005F
A1904D3C  00000060		; 0x00000060
A1904D40  00000061		; 0x00000061
A1904D44  00000062		; 0x00000062
A1904D48  00000064		; 0x00000064
A1904D4C  00000068		; 0x00000068
A1904D50  0000006C		; 0x0000006C
A1904D54  00000070		; 0x00000070
A1904D58  00000074		; 0x00000074
A1904D5C  00000078		; 0x00000078
A1904D60  0000007C		; 0x0000007C
A1904D64  00000080		; 0x00000080
A1904D68  00000084		; 0x00000084
A1904D6C  00000088		; 0x00000088
A1904D70  0000008C		; 0x0000008C
A1904D74  00000090		; 0x00000090
A1904D78  00000094		; 0x00000094


Frame allocation (hex):

	0000       : FB washing_timer
	0014 bit  0: VAR onWash
	0018       : FB checkAlarmVal
	005C bit  0: VAR valve_rising
	005D bit  0: VAR prev_val_open_fall
	005E bit  0: VAR prev_val_close_fall
	005F bit  0: VAR prev_val_open_R
	0060 bit  0: VAR prev_val_close_R
	0061 bit  0: VAR finish_val_rising
	0062 bit  0: VAR is_running_wash
	0064       : VAR sv_washing_FB
	0068       : VAR o_val_open_R_FB
	006C       : VAR o_val_close_R_FB
	0070       : VAR o_val_open_fall_FB
	0074       : VAR o_val_close_fall_FB
	0078       : VAR q_start_ats_FB
	007C       : VAR ep_time_wash_FB
	0080       : VAR i_val_state_FB
	0084       : VAR di_val_open_state_fall_FB
	0088       : VAR di_val_close_state_fall_FB
	008C       : VAR di_val_open_state_R_FB
	0090       : VAR di_val_close_state_R_FB
	0094       : VAR Alarm_Val_FB

END_FUNCTION_BLOCK
**************************************************
	List program: ATS_mdb
**************************************************

PROGRAM ATS_mdb

        VAR
res_eta_lcr : UINT;
resp_eta_lcr : ARRAY[0..3] OF INT;
res : INT;
xTON : TON;
	END_VAR

END_PROGRAM

A1904D80  B082     		sub sp, sp, #8
A1904D82  F8CD E000		str lr, [sp]
A1904D86  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ATS_mdb}
#1		(*$WAITSWITCH$*)
#2		
#3			(* res := sysMbMRTU_FC03(	addr := 1, 
#4											base := 257, // 256
#5											no := 4, 
#6											object := ADR(resp_eta_lcr), 
#7											timeout := 200); *)
#8			ADR		resp_eta_lcr	{LNXT:2|8|-1}
(*) UDINT
A1904D8A  F8DF 0510		ldr r0, [pc, #+1296] ; 0xA1A0000C

#9			ST		$$TMP0	{LNXT:2|8|-1}
(*) @INT
A1904D8E  F8DF 751C		ldr r7, [pc, #+1308] ; 0xA1A00014
A1904D92  6038     		str r0, [r7]

#10			LDP0		1	{LNXT:2|8|-1}
(-) @INT
#11			sysMbMRTU_FC03		257, 4, $$TMP0, 200	{LNXT:2|8|-1}
(*) @INT
A1904D94  B082     		sub sp, sp, #8
A1904D96  2001     		mov r0, #1 ; 1
A1904D98  F8DF 7570		ldr r7, [pc, #+1392] ; 0x101
A1904D9C  4639     		mov r1, r7
A1904D9E  2704     		mov r7, #4 ; 4
A1904DA0  463A     		mov r2, r7
A1904DA2  F8DF 7508		ldr r7, [pc, #+1288] ; 0xA1A00014
A1904DA6  683B     		ldr r3, [r7]
A1904DA8  27C8     		mov r7, #200 ; 200
A1904DAA  F8CD 7000		str r7, [sp]
A1904DAE  F8DF 4564		ldr r4, [pc, #+1380] ; 0x23E1F
A1904DB2  F044 0401		orr r4, r4, #1
A1904DB6  47A0     		blx r4
A1904DB8  B002     		add sp, sp, #8

#12			ST		res	{LNXT:2|8|-1}
(*) UINT
A1904DBA  F8DF 74F4		ldr r7, [pc, #+1268] ; 0xA1A00018
A1904DBE  8038     		strh r0, [r7]

#13		
#14			(* ATS22_DUT.Ready 	:= to_bool(resp_eta_lcr[0] And 16#01); *)
#15			LD		resp_eta_lcr[0]	{LNXT:8|9|-1}
(*) UNDEF
A1904DC0  F8DF 74D8		ldr r7, [pc, #+1240] ; 0xA1A0000C
A1904DC4  F9B7 0000		ldrsh r0, [r7]

#16			AND		16#01	{LNXT:8|9|-1}
(*) INT
A1904DC8  2701     		mov r7, #1 ; 1
A1904DCA  4038     		and r0, r0, r7

#17			to_bool	{LNXT:8|9|-1}
(*) INT
A1904DCC  2800     		cmp r0, #0
A1904DCE  BF18 2001		nemov r0, #1
A1904DD2  BF08 2000		eqmov r0, #0

#18			ST		ATS22_DUT.Ready	{LNXT:8|9|-1}
(*) BOOL
A1904DD6  F8DF 74E4		ldr r7, [pc, #+1252] ; 0xA1A0001C
A1904DDA  7038     		strb r0, [r7]

#19		
#20			(* ATS22_DUT.On 		:= to_bool(resp_eta_lcr[0] And 16#02); *)
#21			LD		resp_eta_lcr[0]	{LNXT:9|10|-1}
(*) UNDEF
A1904DDC  F8DF 74BC		ldr r7, [pc, #+1212] ; 0xA1A0000C
A1904DE0  F9B7 0000		ldrsh r0, [r7]

#22			AND		16#02	{LNXT:9|10|-1}
(*) INT
A1904DE4  2702     		mov r7, #2 ; 2
A1904DE6  4038     		and r0, r0, r7

#23			to_bool	{LNXT:9|10|-1}
(*) INT
A1904DE8  2800     		cmp r0, #0
A1904DEA  BF18 2001		nemov r0, #1
A1904DEE  BF08 2000		eqmov r0, #0

#24			ST		ATS22_DUT.On	{LNXT:9|10|-1}
(*) BOOL
A1904DF2  F8DF 74CC		ldr r7, [pc, #+1228] ; 0xA1A0001D
A1904DF6  7038     		strb r0, [r7]

#25		
#26			(* ATS22_DUT.Trip 		:= to_bool(resp_eta_lcr[0] And 16#04); *)
#27			LD		resp_eta_lcr[0]	{LNXT:10|11|-1}
(*) UNDEF
A1904DF8  F8DF 74A0		ldr r7, [pc, #+1184] ; 0xA1A0000C
A1904DFC  F9B7 0000		ldrsh r0, [r7]

#28			AND		16#04	{LNXT:10|11|-1}
(*) INT
A1904E00  2704     		mov r7, #4 ; 4
A1904E02  4038     		and r0, r0, r7

#29			to_bool	{LNXT:10|11|-1}
(*) INT
A1904E04  2800     		cmp r0, #0
A1904E06  BF18 2001		nemov r0, #1
A1904E0A  BF08 2000		eqmov r0, #0

#30			ST		ATS22_DUT.Trip	{LNXT:10|11|-1}
(*) BOOL
A1904E0E  F8DF 74B4		ldr r7, [pc, #+1204] ; 0xA1A0001E
A1904E12  7038     		strb r0, [r7]

#31		
#32			(* ATS22_DUT.Warning 	:= to_bool(resp_eta_lcr[0] And 16#08); *)
#33			LD		resp_eta_lcr[0]	{LNXT:11|12|-1}
(*) UNDEF
A1904E14  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A0000C
A1904E18  F9B7 0000		ldrsh r0, [r7]

#34			AND		16#08	{LNXT:11|12|-1}
(*) INT
A1904E1C  2708     		mov r7, #8 ; 8
A1904E1E  4038     		and r0, r0, r7

#35			to_bool	{LNXT:11|12|-1}
(*) INT
A1904E20  2800     		cmp r0, #0
A1904E22  BF18 2001		nemov r0, #1
A1904E26  BF08 2000		eqmov r0, #0

#36			ST		ATS22_DUT.Warning	{LNXT:11|12|-1}
(*) BOOL
A1904E2A  F8DF 749C		ldr r7, [pc, #+1180] ; 0xA1A0001F
A1904E2E  7038     		strb r0, [r7]

#37		
#38			(* ATS22_DUT.LI3 		:= to_bool(resp_eta_lcr[0] And 16#20); *)
#39			LD		resp_eta_lcr[0]	{LNXT:12|13|-1}
(*) UNDEF
A1904E30  F8DF 7468		ldr r7, [pc, #+1128] ; 0xA1A0000C
A1904E34  F9B7 0000		ldrsh r0, [r7]

#40			AND		16#20	{LNXT:12|13|-1}
(*) INT
A1904E38  2720     		mov r7, #32 ; 32
A1904E3A  4038     		and r0, r0, r7

#41			to_bool	{LNXT:12|13|-1}
(*) INT
A1904E3C  2800     		cmp r0, #0
A1904E3E  BF18 2001		nemov r0, #1
A1904E42  BF08 2000		eqmov r0, #0

#42			ST		ATS22_DUT.LI3	{LNXT:12|13|-1}
(*) BOOL
A1904E46  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A00020
A1904E4A  7038     		strb r0, [r7]

#43		
#44			(* ATS22_DUT.LI2 		:= to_bool(resp_eta_lcr[0] And 16#40); *)
#45			LD		resp_eta_lcr[0]	{LNXT:13|14|-1}
(*) UNDEF
A1904E4C  F8DF 744C		ldr r7, [pc, #+1100] ; 0xA1A0000C
A1904E50  F9B7 0000		ldrsh r0, [r7]

#46			AND		16#40	{LNXT:13|14|-1}
(*) INT
A1904E54  2740     		mov r7, #64 ; 64
A1904E56  4038     		and r0, r0, r7

#47			to_bool	{LNXT:13|14|-1}
(*) INT
A1904E58  2800     		cmp r0, #0
A1904E5A  BF18 2001		nemov r0, #1
A1904E5E  BF08 2000		eqmov r0, #0

#48			ST		ATS22_DUT.LI2	{LNXT:13|14|-1}
(*) BOOL
A1904E62  F8DF 746C		ldr r7, [pc, #+1132] ; 0xA1A00021
A1904E66  7038     		strb r0, [r7]

#49		
#50			(* ATS22_DUT.LI1 		:= to_bool(resp_eta_lcr[0] And 16#80); *)
#51			LD		resp_eta_lcr[0]	{LNXT:14|17|-1}
(*) UNDEF
A1904E68  F8DF 7430		ldr r7, [pc, #+1072] ; 0xA1A0000C
A1904E6C  F9B7 0000		ldrsh r0, [r7]

#52			AND		16#80	{LNXT:14|17|-1}
(*) INT
A1904E70  2780     		mov r7, #128 ; 128
A1904E72  4038     		and r0, r0, r7

#53			to_bool	{LNXT:14|17|-1}
(*) INT
A1904E74  2800     		cmp r0, #0
A1904E76  BF18 2001		nemov r0, #1
A1904E7A  BF08 2000		eqmov r0, #0

#54			ST		ATS22_DUT.LI1	{LNXT:14|17|-1}
(*) BOOL
A1904E7E  F8DF 7454		ldr r7, [pc, #+1108] ; 0xA1A00022
A1904E82  7038     		strb r0, [r7]

#55		
#56			(* ATS_State_bits.0 := ATS22_DUT.Ready; *)
#57			MOVE		ATS22_DUT.Ready,ATS_State_bits.0	{LNXT:17|18|-1}
(*) BOOL
A1904E84  F8DF 7434		ldr r7, [pc, #+1076] ; 0xA1A0001C
A1904E88  7838     		ldrb r0, [r7]
A1904E8A  F8DF 73E8		ldr r7, [pc, #+1000] ; 0xA0003F08
A1904E8E  F8B7 8000		ldrh r8, [r7]
A1904E92  F360 0800		bfi r8, r0, #0, #1
A1904E96  F8A7 8000		strh r8, [r7]

#58		
#59			(* ATS_State_bits.1 := ATS22_DUT.On And i_run_ats; *)
#60			LD		ATS22_DUT.On	{LNXT:18|19|-1}
(*) UNDEF
A1904E9A  F8DF 7424		ldr r7, [pc, #+1060] ; 0xA1A0001D
A1904E9E  7838     		ldrb r0, [r7]

#61			AND		i_run_ats	{LNXT:18|19|-1}
(*) BOOL
A1904EA0  F8DF 7414		ldr r7, [pc, #+1044] ; 0xA1A0001B
A1904EA4  783F     		ldrb r7, [r7]
A1904EA6  4038     		and r0, r0, r7

#62			ST		ATS_State_bits.1	{LNXT:18|19|-1}
(*) BOOL
A1904EA8  F8DF 73C8		ldr r7, [pc, #+968] ; 0xA0003F08
A1904EAC  F8B7 8000		ldrh r8, [r7]
A1904EB0  F360 0841		bfi r8, r0, #1, #1
A1904EB4  F8A7 8000		strh r8, [r7]

#63		
#64			(* ATS_State_bits.2 := ATS22_DUT.Trip Or Not i_no_alm_ats ; *)
#65			LD		i_no_alm_ats	{LNXT:19|20|-1}
(*) UNDEF
A1904EB8  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001A
A1904EBC  7838     		ldrb r0, [r7]

#66			NOT	{LNXT:19|20|-1}
(*) BOOL
A1904EBE  2800     		cmp r0, #0
A1904EC0  BF08 2001		eqmov r0, #1
A1904EC4  BF18 2000		nemov r0, #0

#67			OR		ATS22_DUT.Trip	{LNXT:19|20|-1}
(*) BOOL
A1904EC8  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001E
A1904ECC  783F     		ldrb r7, [r7]
A1904ECE  4338     		orr r0, r0, r7

#68			ST		ATS_State_bits.2	{LNXT:19|20|-1}
(*) BOOL
A1904ED0  F8DF 73A0		ldr r7, [pc, #+928] ; 0xA0003F08
A1904ED4  F8B7 8000		ldrh r8, [r7]
A1904ED8  F360 0882		bfi r8, r0, #2, #1
A1904EDC  F8A7 8000		strh r8, [r7]

#69		
#70			(* ATS_State_bits.3 := ATS22_DUT.Warning; *)
#71			MOVE		ATS22_DUT.Warning,ATS_State_bits.3	{LNXT:20|21|-1}
(*) BOOL
A1904EE0  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A0001F
A1904EE4  7838     		ldrb r0, [r7]
A1904EE6  F8DF 738C		ldr r7, [pc, #+908] ; 0xA0003F08
A1904EEA  F8B7 8000		ldrh r8, [r7]
A1904EEE  F360 08C3		bfi r8, r0, #3, #1
A1904EF2  F8A7 8000		strh r8, [r7]

#72		
#73			(* ATS_State_bits.4 := ATS22_DUT.Local; *)
#74			MOVE		ATS22_DUT.Local,ATS_State_bits.4	{LNXT:21|22|-1}
(*) BOOL
A1904EF6  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A00024
A1904EFA  7838     		ldrb r0, [r7]
A1904EFC  F8DF 7374		ldr r7, [pc, #+884] ; 0xA0003F08
A1904F00  F8B7 8000		ldrh r8, [r7]
A1904F04  F360 1804		bfi r8, r0, #4, #1
A1904F08  F8A7 8000		strh r8, [r7]

#75		
#76			(* ATS_State_bits.5 := ATS22_DUT.Ramping; *)
#77			MOVE		ATS22_DUT.Ramping,ATS_State_bits.5	{LNXT:22|23|-1}
(*) BOOL
A1904F0C  F8DF 73D0		ldr r7, [pc, #+976] ; 0xA1A00025
A1904F10  7838     		ldrb r0, [r7]
A1904F12  F8DF 7360		ldr r7, [pc, #+864] ; 0xA0003F08
A1904F16  F8B7 8000		ldrh r8, [r7]
A1904F1A  F360 1845		bfi r8, r0, #5, #1
A1904F1E  F8A7 8000		strh r8, [r7]

#78		
#79			(* ATS_State_bits.6 := ATS22_DUT.LI1; *)
#80			MOVE		ATS22_DUT.LI1,ATS_State_bits.6	{LNXT:23|24|-1}
(*) BOOL
A1904F22  F8DF 73B0		ldr r7, [pc, #+944] ; 0xA1A00022
A1904F26  7838     		ldrb r0, [r7]
A1904F28  F8DF 7348		ldr r7, [pc, #+840] ; 0xA0003F08
A1904F2C  F8B7 8000		ldrh r8, [r7]
A1904F30  F360 1886		bfi r8, r0, #6, #1
A1904F34  F8A7 8000		strh r8, [r7]

#81		
#82			(* ATS_State_bits.7 := ATS22_DUT.LI2; *)
#83			MOVE		ATS22_DUT.LI2,ATS_State_bits.7	{LNXT:24|25|-1}
(*) BOOL
A1904F38  F8DF 7394		ldr r7, [pc, #+916] ; 0xA1A00021
A1904F3C  7838     		ldrb r0, [r7]
A1904F3E  F8DF 7334		ldr r7, [pc, #+820] ; 0xA0003F08
A1904F42  F8B7 8000		ldrh r8, [r7]
A1904F46  F360 18C7		bfi r8, r0, #7, #1
A1904F4A  F8A7 8000		strh r8, [r7]

#84		
#85			(* ATS_State_bits.8 := ATS22_DUT.LI3; *)
#86			MOVE		ATS22_DUT.LI3,ATS_State_bits.8	{LNXT:25|28|-1}
(*) BOOL
A1904F4E  F8DF 737C		ldr r7, [pc, #+892] ; 0xA1A00020
A1904F52  7838     		ldrb r0, [r7]
A1904F54  F8DF 731C		ldr r7, [pc, #+796] ; 0xA0003F08
A1904F58  F8B7 8000		ldrh r8, [r7]
A1904F5C  F360 2808		bfi r8, r0, #8, #1
A1904F60  F8A7 8000		strh r8, [r7]

#87		
#88			(* ATS_State_bits.9 := i_pb_loc; *)
#89			MOVE		i_pb_loc,ATS_State_bits.9	{LNXT:28|29|-1}
(*) BOOL
A1904F64  F8DF 739C		ldr r7, [pc, #+924] ; 0xA1A00038
A1904F68  F9B7 0000		ldrsh r0, [r7]
A1904F6C  F8DF 7304		ldr r7, [pc, #+772] ; 0xA0003F08
A1904F70  B082     		sub sp, sp, #8
A1904F72  F8CD 0000		str r0, [sp]
A1904F76  2800     		cmp r0, #0
A1904F78  BF08 2000		eqmov r0, #0
A1904F7C  BF18 2001		nemov r0, #1
A1904F80  F8B7 8000		ldrh r8, [r7]
A1904F84  F360 2849		bfi r8, r0, #9, #1
A1904F88  F8A7 8000		strh r8, [r7]
A1904F8C  F8DD 0000		ldr r0, [sp]
A1904F90  B002     		add sp, sp, #8

#90		
#91			(* ATS_State_bits.10 := i_pb_rem; *)
#92			MOVE		i_pb_rem,ATS_State_bits.10	{LNXT:29|31|-1}
(*) INT
A1904F92  F8DF 7374		ldr r7, [pc, #+884] ; 0xA1A0003A
A1904F96  F9B7 0000		ldrsh r0, [r7]
A1904F9A  F8DF 72D8		ldr r7, [pc, #+728] ; 0xA0003F08
A1904F9E  B082     		sub sp, sp, #8
A1904FA0  F8CD 0000		str r0, [sp]
A1904FA4  2800     		cmp r0, #0
A1904FA6  BF08 2000		eqmov r0, #0
A1904FAA  BF18 2001		nemov r0, #1
A1904FAE  F8B7 8000		ldrh r8, [r7]
A1904FB2  F360 288A		bfi r8, r0, #10, #1
A1904FB6  F8A7 8000		strh r8, [r7]
A1904FBA  F8DD 0000		ldr r0, [sp]
A1904FBE  B002     		add sp, sp, #8

#93		
#94		
#95			(* IF i_pb_loc AND not i_pb_rem *)
#96			LD		i_pb_rem	{LNXT:31|-1|-1}
(*) UNDEF
A1904FC0  F8DF 7344		ldr r7, [pc, #+836] ; 0xA1A0003A
A1904FC4  F9B7 0000		ldrsh r0, [r7]

#97			NOT	{LNXT:31|-1|-1}
(-) INT
A1904FC8  43C0     		mvn r0, r0

#98			AND(		i_pb_loc	{LNXT:31|-1|-1}
(*) INT
A1904FCA  B082     		sub sp, sp, #8
A1904FCC  F8CD 0000		str r0, [sp]
A1904FD0  F8DF 7330		ldr r7, [pc, #+816] ; 0xA1A00038
A1904FD4  F9B7 0000		ldrsh r0, [r7]

#99			NOT	{LNXT:31|-1|-1}
(-) INT
A1904FD8  43C0     		mvn r0, r0

#100			)	{LNXT:31|-1|-1}
(*) INT
A1904FDA  4607     		mov r7, r0
A1904FDC  F8DD 0000		ldr r0, [sp]
A1904FE0  B002     		add sp, sp, #8
A1904FE2  4038     		and r0, r0, r7

#101			JMPCN	$label0	{LNXT:31|32|34}
(-) INT
A1904FE4  2800     		cmp r0, #0
A1904FE6  D009     		beq #18 ; 0xA1904FFC


#102		
#103			(* THEN *)
#104		
#105				(* ATS_State_bits.11 := TRUE; *)
#106				MOVE		TRUE,ATS_State_bits.11	{LNXT:32|34|-1}
(*) INT
A1904FEA  2001     		mov r0, #1 ; 1
A1904FEC  F8DF 7284		ldr r7, [pc, #+644] ; 0xA0003F08
A1904FF0  F8B7 8000		ldrh r8, [r7]
A1904FF4  F360 28CB		bfi r8, r0, #11, #1
A1904FF8  F8A7 8000		strh r8, [r7]

#107		
#108		$label0:
#109			(* END_IF *)
#110		
#111		
#112			(* IF i_pb_loc AND i_pb_rem *)
#113			LD		i_pb_loc	{LNXT:34|-1|-1}
(*) UNDEF
A1904FFC  F8DF 7304		ldr r7, [pc, #+772] ; 0xA1A00038
A1905000  F9B7 0000		ldrsh r0, [r7]

#114			NOT	{LNXT:34|-1|-1}
(-) INT
A1905004  43C0     		mvn r0, r0

#115			AND		i_pb_rem	{LNXT:34|-1|-1}
(*) INT
A1905006  F8DF 7300		ldr r7, [pc, #+768] ; 0xA1A0003A
A190500A  F9B7 7000		ldrsh r7, [r7]
A190500E  4038     		and r0, r0, r7

#116			JMPCN	$label1	{LNXT:34|35|37}
(-) INT
A1905010  2800     		cmp r0, #0
A1905012  D009     		beq #18 ; 0xA1905028


#117		
#118			(* THEN *)
#119		
#120				(* ATS_State_bits.11 := FALSE; *)
#121				MOVE		FALSE,ATS_State_bits.11	{LNXT:35|37|-1}
(*) INT
A1905016  2000     		mov r0, #0 ; 0
A1905018  F8DF 7258		ldr r7, [pc, #+600] ; 0xA0003F08
A190501C  F8B7 8000		ldrh r8, [r7]
A1905020  F360 28CB		bfi r8, r0, #11, #1
A1905024  F8A7 8000		strh r8, [r7]

#122		
#123		$label1:
#124			(* END_IF *)
#125		
#126		
#127			(* IF i_pb_loc AND not i_pb_rem *)
#128			LD		i_pb_rem	{LNXT:37|-1|-1}
(*) UNDEF
A1905028  F8DF 72DC		ldr r7, [pc, #+732] ; 0xA1A0003A
A190502C  F9B7 0000		ldrsh r0, [r7]

#129			NOT	{LNXT:37|-1|-1}
(-) INT
A1905030  43C0     		mvn r0, r0

#130			AND		i_pb_loc	{LNXT:37|-1|-1}
(*) INT
A1905032  F8DF 72D0		ldr r7, [pc, #+720] ; 0xA1A00038
A1905036  F9B7 7000		ldrsh r7, [r7]
A190503A  4038     		and r0, r0, r7

#131			JMPCN	$label2	{LNXT:37|38|43}
(-) INT
A190503C  2800     		cmp r0, #0
A190503E  D009     		beq #18 ; 0xA1905054


#132		
#133			(* THEN *)
#134		
#135				(* ATS_State_bits.11 := FALSE; *)
#136				MOVE		FALSE,ATS_State_bits.11	{LNXT:38|43|-1}
(*) INT
A1905042  2000     		mov r0, #0 ; 0
A1905044  F8DF 722C		ldr r7, [pc, #+556] ; 0xA0003F08
A1905048  F8B7 8000		ldrh r8, [r7]
A190504C  F360 28CB		bfi r8, r0, #11, #1
A1905050  F8A7 8000		strh r8, [r7]

#137		
#138		$label2:
#139			(* END_IF *)
#140		
#141			(* ATS22_DUT.EtaCurrent := to_byte(SHR(resp_eta_lcr[0] AND 16#3F00, 16#08) * 200 / 63); *)
#142			LD		resp_eta_lcr[0]	{LNXT:43|44|-1}
(*) UNDEF
A1905054  F8DF 7244		ldr r7, [pc, #+580] ; 0xA1A0000C
A1905058  F9B7 0000		ldrsh r0, [r7]

#143			AND		16#3F00	{LNXT:43|44|-1}
(*) INT
A190505C  F44F 577C		mov r7, #16128 ; 16128
A1905060  4038     		and r0, r0, r7

#144			SHR		16#08	{LNXT:43|44|-1}
(*) INT
A1905062  0A00     		lsr r0, r0, #8
A1905064  0400     		lsl r0, r0, #16
A1905066  0C00     		lsr r0, r0, #16

#145			MUL		200	{LNXT:43|44|-1}
(*) INT
A1905068  27C8     		mov r7, #200 ; 200
A190506A  4378     		mul r0, r0, r7

#146			DIV		63	{LNXT:43|44|-1}
(*) INT
A190506C  273F     		mov r7, #63 ; 63
A190506E  B082     		sub sp, sp, #8
A1905070  F8CD 1000		str r1, [sp]
A1905074  4639     		mov r1, r7
A1905076  FB90 F0F1		sdiv r0, r0, r1
A190507A  F8DD 1000		ldr r1, [sp]
A190507E  B002     		add sp, sp, #8

#147			to_byte	{LNXT:43|44|-1}
(-) INT
#148			ST		ATS22_DUT.EtaCurrent	{LNXT:43|44|-1}
(*) BYTE
A1905080  F8DF 7254		ldr r7, [pc, #+596] ; 0xA1A00023
A1905084  7038     		strb r0, [r7]

#149		
#150			(* ATS_Current_prsnt	 := ATS22_DUT.EtaCurrent; *)
#151			MOVE		ATS22_DUT.EtaCurrent,ATS_Current_prsnt	{LNXT:44|46|-1}
(*) BYTE
A1905086  F8DF 7250		ldr r7, [pc, #+592] ; 0xA1A00023
A190508A  7838     		ldrb r0, [r7]
A190508C  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA0003F0A
A1905090  8038     		strh r0, [r7]

#152		
#153			(* ATS22_DUT.Local 	:= to_bool(resp_eta_lcr[0] And 16#4000); *)
#154			LD		resp_eta_lcr[0]	{LNXT:46|47|-1}
(*) UNDEF
A1905092  F8DF 7208		ldr r7, [pc, #+520] ; 0xA1A0000C
A1905096  F9B7 0000		ldrsh r0, [r7]

#155			AND		16#4000	{LNXT:46|47|-1}
(*) INT
A190509A  F44F 4780		mov r7, #16384 ; 16384
A190509E  4038     		and r0, r0, r7

#156			to_bool	{LNXT:46|47|-1}
(*) INT
A19050A0  2800     		cmp r0, #0
A19050A2  BF18 2001		nemov r0, #1
A19050A6  BF08 2000		eqmov r0, #0

#157			ST		ATS22_DUT.Local	{LNXT:46|47|-1}
(*) BOOL
A19050AA  F8DF 7230		ldr r7, [pc, #+560] ; 0xA1A00024
A19050AE  7038     		strb r0, [r7]

#158		
#159			(* ATS22_DUT.Ramping 	:= to_bool(resp_eta_lcr[0] And 16#8000); *)
#160			LD		resp_eta_lcr[0]	{LNXT:47|49|-1}
(*) UNDEF
A19050B0  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A0000C
A19050B4  F9B7 0000		ldrsh r0, [r7]

#161			AND		16#8000	{LNXT:47|49|-1}
(*) INT
A19050B8  F44F 4700		mov r7, #32768 ; 32768
A19050BC  4038     		and r0, r0, r7

#162			to_bool	{LNXT:47|49|-1}
(*) INT
A19050BE  2800     		cmp r0, #0
A19050C0  BF18 2001		nemov r0, #1
A19050C4  BF08 2000		eqmov r0, #0

#163			ST		ATS22_DUT.Ramping	{LNXT:47|49|-1}
(*) BOOL
A19050C8  F8DF 7214		ldr r7, [pc, #+532] ; 0xA1A00025
A19050CC  7038     		strb r0, [r7]

#164		
#165			(* ATS22_DUT.Lcr1 := resp_eta_lcr[1]; *)
#166			MOVE		resp_eta_lcr[1],ATS22_DUT.Lcr1	{LNXT:49|50|-1}
(*) BOOL
A19050CE  F8DF 71D0		ldr r7, [pc, #+464] ; 0xA1A0000E
A19050D2  F9B7 0000		ldrsh r0, [r7]
A19050D6  F8DF 720C		ldr r7, [pc, #+524] ; 0xA1A00026
A19050DA  8038     		strh r0, [r7]

#167		
#168			(* ATS22_DUT.Lcr2 := resp_eta_lcr[2]; *)
#169			MOVE		resp_eta_lcr[2],ATS22_DUT.Lcr2	{LNXT:50|51|-1}
(*) INT
A19050DC  F8DF 71C4		ldr r7, [pc, #+452] ; 0xA1A00010
A19050E0  F9B7 0000		ldrsh r0, [r7]
A19050E4  F8DF 7200		ldr r7, [pc, #+512] ; 0xA1A00028
A19050E8  8038     		strh r0, [r7]

#170		
#171			(* ATS22_DUT.Lcr3 := resp_eta_lcr[3]; *)
#172			MOVE		resp_eta_lcr[3],ATS22_DUT.Lcr3	{LNXT:51|53|-1}
(*) INT
A19050EA  F8DF 71BC		ldr r7, [pc, #+444] ; 0xA1A00012
A19050EE  F9B7 0000		ldrsh r0, [r7]
A19050F2  F8DF 71F8		ldr r7, [pc, #+504] ; 0xA1A0002A
A19050F6  8038     		strh r0, [r7]

#173		
#174			(* ATS_Current_L1 := ATS22_DUT.Lcr1; *)
#175			MOVE		ATS22_DUT.Lcr1,ATS_Current_L1	{LNXT:53|54|-1}
(*) INT
A19050F8  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A00026
A19050FC  F9B7 0000		ldrsh r0, [r7]
A1905100  F8DF 7178		ldr r7, [pc, #+376] ; 0xA0003F0C
A1905104  8038     		strh r0, [r7]

#176		
#177			(* ATS_Current_L2 := ATS22_DUT.Lcr2; *)
#178			MOVE		ATS22_DUT.Lcr2,ATS_Current_L2	{LNXT:54|55|-1}
(*) INT
A1905106  F8DF 71E0		ldr r7, [pc, #+480] ; 0xA1A00028
A190510A  F9B7 0000		ldrsh r0, [r7]
A190510E  F8DF 7170		ldr r7, [pc, #+368] ; 0xA0003F0E
A1905112  8038     		strh r0, [r7]

#179		
#180			(* ATS_Current_L3 := ATS22_DUT.Lcr3; *)
#181			MOVE		ATS22_DUT.Lcr3,ATS_Current_L3	{LNXT:55|57|-1}
(*) INT
A1905114  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA1A0002A
A1905118  F9B7 0000		ldrsh r0, [r7]
A190511C  F8DF 7164		ldr r7, [pc, #+356] ; 0xA0003F10
A1905120  8038     		strh r0, [r7]

#182		
#183			(* res := sysMbMRTU_FC03(	addr := 1, 
#184											base := 261, // 260
#185											no := 1, 
#186											object := ADR(resp_eta_lcr), 
#187											timeout := 200); *)
#188			ADR		resp_eta_lcr	{LNXT:57|63|-1}
(*) INT
A1905122  F8DF 0178		ldr r0, [pc, #+376] ; 0xA1A0000C

#189			ST		$$TMP0	{LNXT:57|63|-1}
(*) @INT
A1905126  F8DF 7184		ldr r7, [pc, #+388] ; 0xA1A00014
A190512A  6038     		str r0, [r7]

#190			LDP0		1	{LNXT:57|63|-1}
(-) @INT
#191			sysMbMRTU_FC03		261, 1, $$TMP0, 200	{LNXT:57|63|-1}
(*) @INT
A190512C  B082     		sub sp, sp, #8
A190512E  2001     		mov r0, #1 ; 1
A1905130  F8DF 71DC		ldr r7, [pc, #+476] ; 0x105
A1905134  4639     		mov r1, r7
A1905136  2701     		mov r7, #1 ; 1
A1905138  463A     		mov r2, r7
A190513A  F8DF 7170		ldr r7, [pc, #+368] ; 0xA1A00014
A190513E  683B     		ldr r3, [r7]
A1905140  27C8     		mov r7, #200 ; 200
A1905142  F8CD 7000		str r7, [sp]
A1905146  F8DF 41CC		ldr r4, [pc, #+460] ; 0x23E1F
A190514A  F044 0401		orr r4, r4, #1
A190514E  47A0     		blx r4
A1905150  B002     		add sp, sp, #8

#192			ST		res	{LNXT:57|63|-1}
(*) UINT
A1905152  F8DF 715C		ldr r7, [pc, #+348] ; 0xA1A00018
A1905156  8038     		strh r0, [r7]

#193		
#194			(* ATS22_DUT.LcrVoltage	:= resp_eta_lcr[0]; *)
#195			MOVE		resp_eta_lcr[0],ATS22_DUT.LcrVoltage	{LNXT:63|64|-1}
(*) INT
A1905158  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0000C
A190515C  F9B7 0000		ldrsh r0, [r7]
A1905160  F8DF 718C		ldr r7, [pc, #+396] ; 0xA1A0002C
A1905164  8038     		strh r0, [r7]

#196		
#197			(* ATS_Voltage := ATS22_DUT.LcrVoltage; *)
#198			MOVE		ATS22_DUT.LcrVoltage,ATS_Voltage	{LNXT:64|68|-1}
(*) INT
A1905166  F8DF 7188		ldr r7, [pc, #+392] ; 0xA1A0002C
A190516A  F9B7 0000		ldrsh r0, [r7]
A190516E  F8DF 7128		ldr r7, [pc, #+296] ; 0xA0003F1C
A1905172  8038     		strh r0, [r7]

#199		
#200			(* res := sysMbMRTU_FC03(	addr := 1, 
#201											base := 280, // 279
#202											no := 1, 
#203											object := ADR(resp_eta_lcr), 
#204											timeout := 200); *)
#205			ADR		resp_eta_lcr	{LNXT:68|74|-1}
(*) INT
A1905174  F8DF 0124		ldr r0, [pc, #+292] ; 0xA1A0000C

#206			ST		$$TMP0	{LNXT:68|74|-1}
(*) @INT
A1905178  F8DF 7130		ldr r7, [pc, #+304] ; 0xA1A00014
A190517C  6038     		str r0, [r7]

#207			LDP0		1	{LNXT:68|74|-1}
(-) @INT
#208			sysMbMRTU_FC03		280, 1, $$TMP0, 200	{LNXT:68|74|-1}
(*) @INT
A190517E  B082     		sub sp, sp, #8
A1905180  2001     		mov r0, #1 ; 1
A1905182  F44F 718C		mov r1, #280 ; 280
A1905186  2701     		mov r7, #1 ; 1
A1905188  463A     		mov r2, r7
A190518A  F8DF 7120		ldr r7, [pc, #+288] ; 0xA1A00014
A190518E  683B     		ldr r3, [r7]
A1905190  27C8     		mov r7, #200 ; 200
A1905192  F8CD 7000		str r7, [sp]
A1905196  F8DF 417C		ldr r4, [pc, #+380] ; 0x23E1F
A190519A  F044 0401		orr r4, r4, #1
A190519E  47A0     		blx r4
A19051A0  B002     		add sp, sp, #8

#209			ST		res	{LNXT:68|74|-1}
(*) UINT
A19051A2  F8DF 710C		ldr r7, [pc, #+268] ; 0xA1A00018
A19051A6  8038     		strh r0, [r7]

#210		
#211			(* ATS22_DUT.LastFLT 	:= resp_eta_lcr[0]; *)
#212			MOVE		resp_eta_lcr[0],ATS22_DUT.LastFLT	{LNXT:74|75|-1}
(*) INT
A19051A8  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A0000C
A19051AC  F9B7 0000		ldrsh r0, [r7]
A19051B0  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0002E
A19051B4  8038     		strh r0, [r7]

#213		
#214			(* ATS_Last_FaultCode := ATS22_DUT.LastFLT; *)
#215			MOVE		ATS22_DUT.LastFLT,ATS_Last_FaultCode	{LNXT:75|78|-1}
(*) INT
A19051B6  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A0002E
A19051BA  F9B7 0000		ldrsh r0, [r7]
A19051BE  F8DF 70C8		ldr r7, [pc, #+200] ; 0xA0003F12
A19051C2  8038     		strh r0, [r7]

#216		
#217			(* res := sysMbMRTU_FC03(	addr := 1, 
#218											base := 274, // 273
#219											no := 3, 
#220											object := ADR(resp_eta_lcr), 
#221											timeout := 200); *)
#222			ADR		resp_eta_lcr	{LNXT:78|84|-1}
(*) INT
A19051C4  F8DF 00D4		ldr r0, [pc, #+212] ; 0xA1A0000C

#223			ST		$$TMP0	{LNXT:78|84|-1}
(*) @INT
A19051C8  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A00014
A19051CC  6038     		str r0, [r7]

#224			LDP0		1	{LNXT:78|84|-1}
(-) @INT
#225			sysMbMRTU_FC03		274, 3, $$TMP0, 200	{LNXT:78|84|-1}
(*) @INT
A19051CE  B082     		sub sp, sp, #8
A19051D0  2001     		mov r0, #1 ; 1
A19051D2  F44F 7189		mov r1, #274 ; 274
A19051D6  2703     		mov r7, #3 ; 3
A19051D8  463A     		mov r2, r7
A19051DA  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A00014
A19051DE  683B     		ldr r3, [r7]
A19051E0  27C8     		mov r7, #200 ; 200
A19051E2  F8CD 7000		str r7, [sp]
A19051E6  F8DF 412C		ldr r4, [pc, #+300] ; 0x23E1F
A19051EA  F044 0401		orr r4, r4, #1
A19051EE  47A0     		blx r4
A19051F0  B002     		add sp, sp, #8

#226			ST		res	{LNXT:78|84|-1}
(*) UINT
A19051F2  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA1A00018
A19051F6  8038     		strh r0, [r7]

#227		
#228		
#229			(* IF res <> 0 *)
#230			LD		res	{LNXT:84|-1|-1}
(*) UNDEF
A19051F8  F8DF 70B4		ldr r7, [pc, #+180] ; 0xA1A00018
A19051FC  F9B7 0000		ldrsh r0, [r7]

#231			NE		0	{LNXT:84|-1|-1}
(*) INT
A1905200  2800     		cmp r0, #0
A1905202  BF08 2000		eqmov r0, #0
A1905206  BF18 2001		nemov r0, #1

#232			JMPCN	$label3	{LNXT:84|84|86}
(-) BOOL
A190520A  2800     		cmp r0, #0
A190520C  D009     		beq #18 ; 0xA1905222


#233		
#234			(* THEN *)
#235		
#236				(* Alarms.6 := true; *)
#237				MOVE		true,Alarms.6	{LNXT:84|86|-1}
(*) BOOL
A1905210  2001     		mov r0, #1 ; 1
A1905212  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F18
A1905216  F8B7 8000		ldrh r8, [r7]
A190521A  F360 1886		bfi r8, r0, #6, #1
A190521E  F8A7 8000		strh r8, [r7]

#238		
#239		$label3:
#240			(* END_IF *)
#241		
#242			(* ATS22_DUT.MotRunTime 		:= resp_eta_lcr[0]; *)
#243			MOVE		resp_eta_lcr[0],ATS22_DUT.MotRunTime	{LNXT:86|87|-1}
(*) WORD
A1905222  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A0000C
A1905226  F9B7 0000		ldrsh r0, [r7]
A190522A  F8DF 70CC		ldr r7, [pc, #+204] ; 0xA1A00030
A190522E  8038     		strh r0, [r7]

#244		
#245			(* ATS22_DUT.MotStartCnt 		:= resp_eta_lcr[1]; *)
#246			MOVE		resp_eta_lcr[1],ATS22_DUT.MotStartCnt	{LNXT:87|88|-1}
(*) INT
A1905230  F8DF 706C		ldr r7, [pc, #+108] ; 0xA1A0000E
A1905234  F9B7 0000		ldrsh r0, [r7]
A1905238  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A00032
A190523C  8038     		strh r0, [r7]

#247		
#248			(* ATS22_DUT.MotLastStartTime 	:= resp_eta_lcr[2]; *)
#249			MOVE		resp_eta_lcr[2],ATS22_DUT.MotLastStartTime	{LNXT:88|90|-1}
(*) INT
A190523E  F8DF 7064		ldr r7, [pc, #+100] ; 0xA1A00010
A1905242  F9B7 0000		ldrsh r0, [r7]
A1905246  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A00034
A190524A  8038     		strh r0, [r7]

#250		
#251			(* ATS_RunTime_Hors	:= to_word(ATS22_DUT.MotRunTime); *)
#252			LDP0		ATS22_DUT.MotRunTime	{LNXT:90|91|-1}
(-) INT
#253			to_word	{LNXT:90|91|-1}
(*) INT
A190524C  F8DF 70A8		ldr r7, [pc, #+168] ; 0xA1A00030
A1905250  F9B7 0000		ldrsh r0, [r7]

#254			ST		ATS_RunTime_Hors	{LNXT:90|91|-1}
(*) WORD
A1905254  F8DF 7034		ldr r7, [pc, #+52] ; 0xA0003F14
A1905258  8038     		strh r0, [r7]

#255		
#256			(* ATS_OnTimes_Cnt		:= to_word(ATS22_DUT.MotStartCnt); *)
#257			LDP0		ATS22_DUT.MotStartCnt	{LNXT:91|2|-1}
(-) WORD
#258			to_word	{LNXT:91|2|-1}
(*) WORD
A190525A  F8DF 70A0		ldr r7, [pc, #+160] ; 0xA1A00032
A190525E  F9B7 0000		ldrsh r0, [r7]

#259			ST		ATS_OnTimes_Cnt	{LNXT:91|2|-1}
(*) WORD
A1905262  F8DF 702C		ldr r7, [pc, #+44] ; 0xA0003F16
A1905266  8038     		strh r0, [r7]

A1905268  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A190526C  F8DD E000		ldr lr, [sp]
A1905270  B002     		add sp, sp, #8

A1905272  4770     		bx lr

A1905274  FFFFFFFF		; 0xA0003F08
A1905278  FFFFFFFF		; 0xA0003F0A
A190527C  FFFFFFFF		; 0xA0003F0C
A1905280  FFFFFFFF		; 0xA0003F0E
A1905284  FFFFFFFF		; 0xA0003F10
A1905288  FFFFFFFF		; 0xA0003F12
A190528C  FFFFFFFF		; 0xA0003F14
A1905290  FFFFFFFF		; 0xA0003F16
A1905294  FFFFFFFF		; 0xA0003F18
A1905298  FFFFFFFF		; 0xA0003F1C
A190529C  A1A0000C		; 0xA1A0000C
A19052A0  A1A0000E		; 0xA1A0000E
A19052A4  A1A00010		; 0xA1A00010
A19052A8  A1A00012		; 0xA1A00012
A19052AC  A1A00014		; 0xA1A00014
A19052B0  A1A00018		; 0xA1A00018
A19052B4  A1A0001A		; 0xA1A0001A
A19052B8  A1A0001B		; 0xA1A0001B
A19052BC  A1A0001C		; 0xA1A0001C
A19052C0  A1A0001D		; 0xA1A0001D
A19052C4  A1A0001E		; 0xA1A0001E
A19052C8  A1A0001F		; 0xA1A0001F
A19052CC  A1A00020		; 0xA1A00020
A19052D0  A1A00021		; 0xA1A00021
A19052D4  A1A00022		; 0xA1A00022
A19052D8  A1A00023		; 0xA1A00023
A19052DC  A1A00024		; 0xA1A00024
A19052E0  A1A00025		; 0xA1A00025
A19052E4  A1A00026		; 0xA1A00026
A19052E8  A1A00028		; 0xA1A00028
A19052EC  A1A0002A		; 0xA1A0002A
A19052F0  A1A0002C		; 0xA1A0002C
A19052F4  A1A0002E		; 0xA1A0002E
A19052F8  A1A00030		; 0xA1A00030
A19052FC  A1A00032		; 0xA1A00032
A1905300  A1A00034		; 0xA1A00034
A1905304  A1A00038		; 0xA1A00038
A1905308  A1A0003A		; 0xA1A0003A
A190530C  00000101		; 0x00000101
A1905310  00000105		; 0x00000105
A1905314  FFFFFFFF		; 0x00023E1F

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1905318  B082     		sub sp, sp, #8
A190531A  F8CD E000		str lr, [sp]
A190531E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1905322  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000427
A1905326  7838     		ldrb r0, [r7]
A1905328  F8DF 7038		ldr r7, [pc, #+56] ; 0xA1A0001B
A190532C  7038     		strb r0, [r7]

A190532E  F8DF 7040		ldr r7, [pc, #+64] ; 0x10000426
A1905332  7838     		ldrb r0, [r7]
A1905334  F8DF 7028		ldr r7, [pc, #+40] ; 0xA1A0001A
A1905338  7038     		strb r0, [r7]

A190533A  F8DF 703C		ldr r7, [pc, #+60] ; 0x1000044E
A190533E  8838     		ldrh r0, [r7]
A1905340  F8DF 7024		ldr r7, [pc, #+36] ; 0xA1A00038
A1905344  8038     		strh r0, [r7]

A1905346  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000450
A190534A  8838     		ldrh r0, [r7]
A190534C  F8DF 701C		ldr r7, [pc, #+28] ; 0xA1A0003A
A1905350  8038     		strh r0, [r7]

A1905352  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905356  F8DD E000		ldr lr, [sp]
A190535A  B002     		add sp, sp, #8

A190535C  4770     		bx lr

A1905360  A1A0001A		; 0xA1A0001A
A1905364  A1A0001B		; 0xA1A0001B
A1905368  A1A00038		; 0xA1A00038
A190536C  A1A0003A		; 0xA1A0003A
A1905370  FFFFFFFF		; 0x10000426
A1905374  FFFFFFFF		; 0x10000427
A1905378  FFFFFFFF		; 0x1000044E
A190537C  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1905380  B082     		sub sp, sp, #8
A1905382  F8CD E000		str lr, [sp]
A1905386  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A190538A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A190538E  F8DD E000		ldr lr, [sp]
A1905392  B002     		add sp, sp, #8

A1905394  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

A1905396  B082     		sub sp, sp, #8
A1905398  F8CD E000		str lr, [sp]
A190539C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A19053A0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A19053A4  F8DD E000		ldr lr, [sp]
A19053A8  B002     		add sp, sp, #8

A19053AA  4770     		bx lr

**************************************************
	List program: sr_init_counters
**************************************************

PROGRAM sr_init_counters

END_PROGRAM

A19053C0  B082     		sub sp, sp, #8
A19053C2  F8CD E000		str lr, [sp]
A19053C6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_init_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_counter 	:= epprom_kw_cnt; *)
#4			MOVE		epprom_kw_cnt,kw_counter	{LNXT:1|2|-1}
(*) UDINT
A19053CA  F8DF 7028		ldr r7, [pc, #+40] ; 0xA00017F0
A19053CE  6838     		ldr r0, [r7]
A19053D0  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003EFC
A19053D4  6038     		str r0, [r7]

#5		
#6			(* q_counter	:= epprom_q_cnt; *)
#7			MOVE		epprom_q_cnt,q_counter	{LNXT:2|1|-1}
(*) DWORD
A19053D6  F8DF 7018		ldr r7, [pc, #+24] ; 0xA00017E8
A19053DA  6838     		ldr r0, [r7]
A19053DC  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0003F00
A19053E0  6038     		str r0, [r7]

A19053E2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A19053E6  F8DD E000		ldr lr, [sp]
A19053EA  B002     		add sp, sp, #8

A19053EC  4770     		bx lr

A19053F0  FFFFFFFF		; 0xA00017E8
A19053F4  FFFFFFFF		; 0xA00017F0
A19053F8  FFFFFFFF		; 0xA0003EFC
A19053FC  FFFFFFFF		; 0xA0003F00

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1905400  4770     		bx lr


*** OUTPUT:
A1905402  4770     		bx lr



**************************************************
	Task Boot init code
**************************************************

A1905404  B082     		sub sp, sp, #8
A1905406  F8CD E000		str lr, [sp]
A190540A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A190540E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905412  F8DD E000		ldr lr, [sp]
A1905416  B002     		add sp, sp, #8

A1905418  4770     		bx lr

**************************************************
	List program: init_val
**************************************************

PROGRAM init_val

END_PROGRAM

A1905430  B082     		sub sp, sp, #8
A1905432  F8CD E000		str lr, [sp]
A1905436  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:init_val}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF di_val_close_state_R *)
#5			LD		di_val_close_state_R	{LNXT:1|-1|-1}
(*) UNDEF
A190543A  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000420
A190543E  7838     		ldrb r0, [r7]

#6			NOT	{LNXT:1|-1|-1}
(*) BOOL
A1905440  2800     		cmp r0, #0
A1905442  BF08 2001		eqmov r0, #1
A1905446  BF18 2000		nemov r0, #0

#7			JMPCN	$label0	{LNXT:1|2|6}
(-) BOOL
A190544A  2800     		cmp r0, #0
A190544C  D008     		beq #16 ; 0xA1905460


#8		
#9			(* THEN *)
#10		
#11				(* o_val_close_R:=true; *)
#12				MOVE		true,o_val_close_R	{LNXT:2|3|-1}
(*) BOOL
A1905450  2001     		mov r0, #1 ; 1
A1905452  F8DF 704C		ldr r7, [pc, #+76] ; 0x100004AF
A1905456  7038     		strb r0, [r7]

#13		
#14				(* o_val_open_R:=false; *)
#15				MOVE		false,o_val_open_R	{LNXT:3|6|-1}
(*) BOOL
A1905458  2000     		mov r0, #0 ; 0
A190545A  F8DF 7040		ldr r7, [pc, #+64] ; 0x100004AE
A190545E  7038     		strb r0, [r7]

#16		
#17		$label0:
#18			(* END_IF *)
#19		
#20		
#21			(* IF di_val_close_state_fall = 0 *)
#22			LD		di_val_close_state_fall	{LNXT:6|-1|-1}
(*) UNDEF
A1905460  F8DF 702C		ldr r7, [pc, #+44] ; 0x1000044A
A1905464  F9B7 0000		ldrsh r0, [r7]

#23			EQ		0	{LNXT:6|-1|-1}
(*) INT
A1905468  2800     		cmp r0, #0
A190546A  BF18 2000		nemov r0, #0
A190546E  BF08 2001		eqmov r0, #1

#24			JMPCN	$label1	{LNXT:6|7|1}
(-) BOOL
A1905472  2800     		cmp r0, #0
A1905474  D008     		beq #16 ; 0xA1905488


#25		
#26			(* THEN *)
#27		
#28				(* o_val_close_fall:=true; *)
#29				MOVE		true,o_val_close_fall	{LNXT:7|8|-1}
(*) BOOL
A1905478  2001     		mov r0, #1 ; 1
A190547A  F8DF 701C		ldr r7, [pc, #+28] ; 0x100004AD
A190547E  7038     		strb r0, [r7]

#30		
#31				(* o_val_open_fall:=false; *)
#32				MOVE		false,o_val_open_fall	{LNXT:8|1|-1}
(*) BOOL
A1905480  2000     		mov r0, #0 ; 0
A1905482  F8DF 7010		ldr r7, [pc, #+16] ; 0x100004AC
A1905486  7038     		strb r0, [r7]

A1905488  E00C     		b #24

A190548C  FFFFFFFF		; 0x10000420
A1905490  FFFFFFFF		; 0x1000044A
A1905494  FFFFFFFF		; 0x100004AC
A1905498  FFFFFFFF		; 0x100004AD
A190549C  FFFFFFFF		; 0x100004AE
A19054A0  FFFFFFFF		; 0x100004AF

END_PROGRAM
**************************************************
	List program: ParCheck
**************************************************

PROGRAM ParCheck

END_PROGRAM

#0		{SRC:ParCheck}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Par_POLI AND 16#fc00) <> 2048 *)
#5			LD		Par_POLI	{LNXT:2|-1|-1}
(*) UNDEF
A19054A4  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000182
A19054A8  8838     		ldrh r0, [r7]

#6			AND		16#fc00	{LNXT:2|-1|-1}
(*) UINT
A19054AA  F44F 477C		mov r7, #64512 ; 64512
A19054AE  4038     		and r0, r0, r7

#7			NE		2048	{LNXT:2|-1|-1}
(*) UINT
A19054B0  F44F 6700		mov r7, #2048 ; 2048
A19054B4  42B8     		cmp r0, r7
A19054B6  BF08 2000		eqmov r0, #0
A19054BA  BF18 2001		nemov r0, #1

#8			JMPCN	$label0	{LNXT:2|3|2}
(-) BOOL
A19054BE  2800     		cmp r0, #0
A19054C0  D005     		beq #10 ; 0xA19054CE


#9		
#10			(* THEN *)
#11		
#12				(* WHILE TRUE *)
#13		$label1:
#14				LD		TRUE	{LNXT:3|-1|-1}
(-) UNDEF
A19054C4  2001     		mov r0, #1 ; 1

#15				JMPCN		$label2	{LNXT:3|2|2}
(-) BOOL
A19054C6  2800     		cmp r0, #0
A19054C8  D001     		beq #2 ; 0xA19054CE


#16		
#17				(* DO *)
#18					JMP		$label1	{LNXT:3|2|2}
(-) BOOL
A19054CC  E7FA     		b #-12 ; 0xA19054C4

A19054CE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A19054D2  F8DD E000		ldr lr, [sp]
A19054D6  B002     		add sp, sp, #8

A19054D8  4770     		bx lr

A19054DC  FFFFFFFF		; 0x10000182

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A19054E0  4770     		bx lr


*** OUTPUT:
A19054E2  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

A19054E4  B082     		sub sp, sp, #8
A19054E6  F8CD E000		str lr, [sp]
A19054EA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A19054EE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A19054F2  F8DD E000		ldr lr, [sp]
A19054F6  B002     		add sp, sp, #8

A19054F8  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

A1905510  B082     		sub sp, sp, #8
A1905512  F8CD E000		str lr, [sp]
A1905516  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 3949969151; *)
#4			MOVE		3949969151,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
A190551A  F8DF 7040		ldr r7, [pc, #+64] ; 0xEB6FBEFF
A190551E  4638     		mov r0, r7
A1905520  F8DF 7030		ldr r7, [pc, #+48] ; 0xA1A0003C
A1905524  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
A1905526  F8DF 0028		ldr r0, [pc, #+40] ; 0xA1900100

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
A190552A  4607     		mov r7, r0
A190552C  4638     		mov r0, r7
A190552E  2717     		mov r7, #23 ; 23
A1905530  4639     		mov r1, r7
A1905532  F8DF 402C		ldr r4, [pc, #+44] ; 0x136F9
A1905536  F044 0401		orr r4, r4, #1
A190553A  47A0     		blx r4

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
A190553C  F8DF 7018		ldr r7, [pc, #+24] ; 0xA1A00040
A1905540  7038     		strb r0, [r7]

A1905542  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905546  F8DD E000		ldr lr, [sp]
A190554A  B002     		add sp, sp, #8

A190554C  4770     		bx lr

A1905550  A1900100		; 0xA1900100
A1905554  A1A0003C		; 0xA1A0003C
A1905558  A1A00040		; 0xA1A00040
A190555C  EB6FBEFF		; 0xEB6FBEFF
A1905560  FFFFFFFF		; 0x000136F9

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1905564  4770     		bx lr


*** OUTPUT:
A1905566  4770     		bx lr



**************************************************
	Task Serv init code
**************************************************

A1905568  B082     		sub sp, sp, #8
A190556A  F8CD E000		str lr, [sp]
A190556E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1905572  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905576  F8DD E000		ldr lr, [sp]
A190557A  B002     		add sp, sp, #8

A190557C  4770     		bx lr

**************************************************
	List program: sr_pressure
**************************************************

PROGRAM sr_pressure

        VAR
tmp_test : INT;
	END_VAR

END_PROGRAM

A1905590  B082     		sub sp, sp, #8
A1905592  F8CD E000		str lr, [sp]
A1905596  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_pressure}
#1		(*$WAITSWITCH$*)
#2		
#3			(* Pressure := to_int(to_real(i_adc_pressure )/10); *)
#4			LDP0		i_adc_pressure	{LNXT:2|2|-1}
(-) UDINT
#5			to_real	{LNXT:2|2|-1}
(*) UDINT
A190559A  F8DF 705C		ldr r7, [pc, #+92] ; 0xA1A00108
A190559E  F9B7 0000		ldrsh r0, [r7]
A19055A2  F8DF 405C		ldr r4, [pc, #+92] ; 0x10FBF
A19055A6  F044 0401		orr r4, r4, #1
A19055AA  47A0     		blx r4

#6			DIV		10	{LNXT:2|2|-1}
(*) REAL
A19055AC  270A     		mov r7, #10 ; 10
A19055AE  B082     		sub sp, sp, #8
A19055B0  F8CD 0000		str r0, [sp]
A19055B4  4638     		mov r0, r7
A19055B6  F8DF 4044		ldr r4, [pc, #+68] ; 0x10FAF
A19055BA  F044 0401		orr r4, r4, #1
A19055BE  47A0     		blx r4
A19055C0  4607     		mov r7, r0
A19055C2  F8DD 0000		ldr r0, [sp]
A19055C6  B002     		add sp, sp, #8
A19055C8  B082     		sub sp, sp, #8
A19055CA  F8CD 1000		str r1, [sp]
A19055CE  4639     		mov r1, r7
A19055D0  F8DF 4034		ldr r4, [pc, #+52] ; 0x1101F
A19055D4  F044 0401		orr r4, r4, #1
A19055D8  47A0     		blx r4
A19055DA  F8DD 1000		ldr r1, [sp]
A19055DE  B002     		add sp, sp, #8

#7			to_int	{LNXT:2|2|-1}
(*) REAL
A19055E0  F8DF 4020		ldr r4, [pc, #+32] ; 0x10FDF
A19055E4  F044 0401		orr r4, r4, #1
A19055E8  47A0     		blx r4

#8			ST		Pressure	{LNXT:2|2|-1}
(*) INT
A19055EA  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003EF8
A19055EE  8038     		strh r0, [r7]

A19055F0  E00C     		b #24

A19055F4  FFFFFFFF		; 0xA0003EF8
A19055F8  A1A00108		; 0xA1A00108
A19055FC  FFFFFFFF		; 0x00010FAF
A1905600  FFFFFFFF		; 0x00010FBF
A1905604  FFFFFFFF		; 0x00010FDF
A1905608  FFFFFFFF		; 0x0001101F

END_PROGRAM
**************************************************
	List program: sr_counters
**************************************************

PROGRAM sr_counters

        VAR
kw_trig : R_TRIG;
q_trig : R_TRIG;
kw_pulses_per_acs : UINT;
q_pulses_per_acs : UINT;
test_freq : UDINT;
	END_VAR

END_PROGRAM

#0		{SRC:sr_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_pulses_per_acs 	:= 8000; *)
#4			MOVE		8000,kw_pulses_per_acs	{LNXT:2|3|-1}
(*) UDINT
A190560C  F44F 50FA		mov r0, #8000 ; 8000
A1905610  F8DF 7108		ldr r7, [pc, #+264] ; 0xA1A00104
A1905614  8038     		strh r0, [r7]

#5		
#6			(* q_pulses_per_acs	:= 1; *)
#7			MOVE		1,q_pulses_per_acs	{LNXT:3|15|-1}
(*) UINT
A1905616  2001     		mov r0, #1 ; 1
A1905618  F8DF 7104		ldr r7, [pc, #+260] ; 0xA1A00106
A190561C  8038     		strh r0, [r7]

#8		
#9		
#10			(* IF fdi_q_cnt >= q_pulses_per_acs *)
#11			LD		fdi_q_cnt	{LNXT:15|-1|-1}
(*) UNDEF
A190561E  F8DF 7114		ldr r7, [pc, #+276] ; 0x100004F8
A1905622  6838     		ldr r0, [r7]

#12			GE		q_pulses_per_acs	{LNXT:15|-1|-1}
(*) UDINT
A1905624  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A00106
A1905628  883F     		ldrh r7, [r7]
A190562A  42B8     		cmp r0, r7
A190562C  BF38 2000		lomov r0, #0
A1905630  BF28 2001		hsmov r0, #1

#13			JMPCN	$label0	{LNXT:15|16|20}
(-) BOOL
A1905634  2800     		cmp r0, #0
A1905636  D00B     		beq #22 ; 0xA1905650


#14		
#15			(* THEN *)
#16		
#17				(* q_counter := q_counter + 1; *)
#18				LD		q_counter	{LNXT:16|17|-1}
(*) UNDEF
A190563A  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA0003F00
A190563E  6838     		ldr r0, [r7]

#19				ADD		1	{LNXT:16|17|-1}
(-) DWORD
A1905640  1C40     		add r0, r0, #1

#20				ST		q_counter	{LNXT:16|17|-1}
(*) DWORD
A1905642  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA0003F00
A1905646  6038     		str r0, [r7]

#21		
#22				(* fdi_q_reset := true; *)
#23				MOVE		true,fdi_q_reset	{LNXT:17|20|-1}
(*) DWORD
A1905648  2001     		mov r0, #1 ; 1
A190564A  F8DF 70F0		ldr r7, [pc, #+240] ; 0x100007D5
A190564E  7038     		strb r0, [r7]

#24		
#25		$label0:
#26			(* END_IF *)
#27		
#28			(* q_value := to_int((3600 * to_real(fdi_q_freq)) / (to_real(q_pulses_per_acs) / 1)); *)
#29			LDP0		fdi_q_freq	{LNXT:20|2|-1}
(-) BOOL
#30			to_real	{LNXT:20|2|-1}
(*) BOOL
A1905650  F8DF 70E4		ldr r7, [pc, #+228] ; 0x100004FC
A1905654  6838     		ldr r0, [r7]
A1905656  F8DF 40CC		ldr r4, [pc, #+204] ; 0x10FAF
A190565A  F044 0401		orr r4, r4, #1
A190565E  47A0     		blx r4

#31			MUL		3600	{LNXT:20|2|-1}
(*) REAL
A1905660  F44F 6761		mov r7, #3600 ; 3600
A1905664  B082     		sub sp, sp, #8
A1905666  F8CD 0000		str r0, [sp]
A190566A  4638     		mov r0, r7
A190566C  F8DF 40B4		ldr r4, [pc, #+180] ; 0x10FAF
A1905670  F044 0401		orr r4, r4, #1
A1905674  47A0     		blx r4
A1905676  4607     		mov r7, r0
A1905678  F8DD 0000		ldr r0, [sp]
A190567C  B002     		add sp, sp, #8
A190567E  B082     		sub sp, sp, #8
A1905680  F8CD 1000		str r1, [sp]
A1905684  4639     		mov r1, r7
A1905686  F8DF 40A4		ldr r4, [pc, #+164] ; 0x1100F
A190568A  F044 0401		orr r4, r4, #1
A190568E  47A0     		blx r4
A1905690  F8DD 1000		ldr r1, [sp]
A1905694  B002     		add sp, sp, #8

#32			DIV(		0	{LNXT:20|2|-1}
(*) REAL
A1905696  B082     		sub sp, sp, #8
A1905698  F8CD 0000		str r0, [sp]
A190569C  2000     		mov r0, #0 ; 0

#33			LDP0		q_pulses_per_acs	{LNXT:20|2|-1}
(-) USINT
#34			to_real	{LNXT:20|2|-1}
(*) USINT
A190569E  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A00106
A19056A2  8838     		ldrh r0, [r7]
A19056A4  F8DF 407C		ldr r4, [pc, #+124] ; 0x10FAF
A19056A8  F044 0401		orr r4, r4, #1
A19056AC  47A0     		blx r4

#35			DIV		1	{LNXT:20|2|-1}
(*) REAL
A19056AE  2701     		mov r7, #1 ; 1
A19056B0  B082     		sub sp, sp, #8
A19056B2  F8CD 0000		str r0, [sp]
A19056B6  4638     		mov r0, r7
A19056B8  F8DF 4068		ldr r4, [pc, #+104] ; 0x10FAF
A19056BC  F044 0401		orr r4, r4, #1
A19056C0  47A0     		blx r4
A19056C2  4607     		mov r7, r0
A19056C4  F8DD 0000		ldr r0, [sp]
A19056C8  B002     		add sp, sp, #8
A19056CA  B082     		sub sp, sp, #8
A19056CC  F8CD 1000		str r1, [sp]
A19056D0  4639     		mov r1, r7
A19056D2  F8DF 405C		ldr r4, [pc, #+92] ; 0x1101F
A19056D6  F044 0401		orr r4, r4, #1
A19056DA  47A0     		blx r4
A19056DC  F8DD 1000		ldr r1, [sp]
A19056E0  B002     		add sp, sp, #8

#36			)	{LNXT:20|2|-1}
(*) REAL
A19056E2  4607     		mov r7, r0
A19056E4  F8DD 0000		ldr r0, [sp]
A19056E8  B002     		add sp, sp, #8
A19056EA  B082     		sub sp, sp, #8
A19056EC  F8CD 1000		str r1, [sp]
A19056F0  4639     		mov r1, r7
A19056F2  F8DF 403C		ldr r4, [pc, #+60] ; 0x1101F
A19056F6  F044 0401		orr r4, r4, #1
A19056FA  47A0     		blx r4
A19056FC  F8DD 1000		ldr r1, [sp]
A1905700  B002     		add sp, sp, #8

#37			to_int	{LNXT:20|2|-1}
(*) REAL
A1905702  F8DF 4024		ldr r4, [pc, #+36] ; 0x10FDF
A1905706  F044 0401		orr r4, r4, #1
A190570A  47A0     		blx r4

#38			ST		q_value	{LNXT:20|2|-1}
(*) INT
A190570C  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F06
A1905710  8038     		strh r0, [r7]

A1905712  E015     		b #42

A1905714  FFFFFFFF		; 0xA0003F00
A1905718  FFFFFFFF		; 0xA0003F06
A190571C  A1A00104		; 0xA1A00104
A1905720  A1A00106		; 0xA1A00106
A1905724  FFFFFFFF		; 0x00010FAF
A1905728  FFFFFFFF		; 0x00010FDF
A190572C  FFFFFFFF		; 0x0001100F
A1905730  FFFFFFFF		; 0x0001101F
A1905734  FFFFFFFF		; 0x100004F8
A1905738  FFFFFFFF		; 0x100004FC
A190573C  FFFFFFFF		; 0x100007D5

END_PROGRAM
**************************************************
	List program: sr_save_counters
**************************************************

PROGRAM sr_save_counters

        VAR
power_err : R_TRIG;
ton_start_up : TON;
res_q : BOOL;
res_kw : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:sr_save_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* ton_start_up *)
#4			MOVE		true,ton_start_up.IN	{LNXT:1|-1|-1}
(*) UDINT
A1905740  2001     		mov r0, #1 ; 1
A1905742  F8DF 7100		ldr r7, [pc, #+256] ; 0xA1A00110
A1905746  7038     		strb r0, [r7]

#5			MOVE		5000,ton_start_up.PT	{LNXT:1|-1|-1}
(*) BOOL
A1905748  F8DF 7110		ldr r7, [pc, #+272] ; 0x1388
A190574C  4638     		mov r0, r7
A190574E  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A00114
A1905752  6038     		str r0, [r7]

#6			CAL		ton_start_up	{LNXT:1|2|-1}
(*) UDINT
A1905754  E92D 0021		stmdb sp!, { r0, r5 }
A1905758  F8DF 50E4		ldr r5, [pc, #+228] ; 0xA1A0010C
A190575C  F8DF 40D0		ldr r4, [pc, #+208] ; 0xA19044B0
A1905760  F044 0401		orr r4, r4, #1
A1905764  47A0     		blx r4
A1905766  E8BD 0021		ldmia sp!, { r0, r5 }

#7		
#8			(* power_err *)
#9			LD		ton_start_up.Q	{LNXT:2|-1|-1}
(*) UNDEF
A190576A  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A00118
A190576E  7838     		ldrb r0, [r7]

#10			AND		i_rnpp	{LNXT:2|-1|-1}
(*) BOOL
A1905770  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A000EF
A1905774  783F     		ldrb r7, [r7]
A1905776  4038     		and r0, r0, r7

#11			ST		power_err.clk	{LNXT:2|-1|-1}
(*) BOOL
A1905778  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA1A00121
A190577C  7038     		strb r0, [r7]

#12			CAL		power_err	{LNXT:2|3|-1}
(*) BOOL
A190577E  E92D 0021		stmdb sp!, { r0, r5 }
A1905782  F8DF 50CC		ldr r5, [pc, #+204] ; 0xA1A00120
A1905786  F8DF 40A4		ldr r4, [pc, #+164] ; 0xA1904478
A190578A  F044 0401		orr r4, r4, #1
A190578E  47A0     		blx r4
A1905790  E8BD 0021		ldmia sp!, { r0, r5 }

#13		
#14		
#15			(* IF power_err.q *)
#16			LD		power_err.q	{LNXT:3|-1|-1}
(*) UNDEF
A1905794  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A00122
A1905798  7838     		ldrb r0, [r7]

#17			JMPCN	$label0	{LNXT:3|4|1}
(-) BOOL
A190579A  2800     		cmp r0, #0
A190579C  D03C     		beq #120 ; 0xA1905818


#18		
#19			(* THEN *)
#20		
#21		
#22				(* IF epprom_q_cnt <> q_counter *)
#23				LD		epprom_q_cnt	{LNXT:4|-1|-1}
(*) UNDEF
A19057A0  F8DF 7078		ldr r7, [pc, #+120] ; 0xA00017E8
A19057A4  6838     		ldr r0, [r7]

#24				NE		q_counter	{LNXT:4|-1|-1}
(*) DWORD
A19057A6  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F00
A19057AA  683F     		ldr r7, [r7]
A19057AC  42B8     		cmp r0, r7
A19057AE  BF08 2000		eqmov r0, #0
A19057B2  BF18 2001		nemov r0, #1

#25				JMPCN	$label1	{LNXT:4|4|5}
(-) BOOL
A19057B6  2800     		cmp r0, #0
A19057B8  D010     		beq #32 ; 0xA19057DC


#26		
#27				(* THEN *)
#28		
#29					(* res_q := sysWriteParUINT(ADR(epprom_q_cnt), q_counter); *)
#30					ADR		epprom_q_cnt	{LNXT:4|5|-1}
(*) BOOL
A19057BC  F8DF 005C		ldr r0, [pc, #+92] ; 0xA00017E8

#31					sysWriteParUINT		q_counter	{LNXT:4|5|-1}
(*) @DWORD
A19057C0  4607     		mov r7, r0
A19057C2  4638     		mov r0, r7
A19057C4  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0003F00
A19057C8  683F     		ldr r7, [r7]
A19057CA  4639     		mov r1, r7
A19057CC  F8DF 4090		ldr r4, [pc, #+144] ; 0x275A9
A19057D0  F044 0401		orr r4, r4, #1
A19057D4  47A0     		blx r4

#32					ST		res_q	{LNXT:4|5|-1}
(*) BOOL
A19057D6  F8DF 7064		ldr r7, [pc, #+100] ; 0xA1A0010B
A19057DA  7038     		strb r0, [r7]

#33		
#34		$label1:
#35				(* END_IF *)
#36		
#37		
#38				(* IF epprom_kw_cnt <> kw_counter *)
#39				LD		epprom_kw_cnt	{LNXT:5|-1|-1}
(*) UNDEF
A19057DC  F8DF 7040		ldr r7, [pc, #+64] ; 0xA00017F0
A19057E0  6838     		ldr r0, [r7]

#40				NE		kw_counter	{LNXT:5|-1|-1}
(*) DWORD
A19057E2  F8DF 7040		ldr r7, [pc, #+64] ; 0xA0003EFC
A19057E6  683F     		ldr r7, [r7]
A19057E8  42B8     		cmp r0, r7
A19057EA  BF08 2000		eqmov r0, #0
A19057EE  BF18 2001		nemov r0, #1

#41				JMPCN	$label2	{LNXT:5|5|1}
(-) BOOL
A19057F2  2800     		cmp r0, #0
A19057F4  D010     		beq #32 ; 0xA1905818


#42		
#43				(* THEN *)
#44		
#45					(* res_kw := sysWriteParUINT(ADR(epprom_kw_cnt), kw_counter); *)
#46					ADR		epprom_kw_cnt	{LNXT:5|1|-1}
(*) BOOL
A19057F8  F8DF 0024		ldr r0, [pc, #+36] ; 0xA00017F0

#47					sysWriteParUINT		kw_counter	{LNXT:5|1|-1}
(*) @DWORD
A19057FC  4607     		mov r7, r0
A19057FE  4638     		mov r0, r7
A1905800  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003EFC
A1905804  683F     		ldr r7, [r7]
A1905806  4639     		mov r1, r7
A1905808  F8DF 4054		ldr r4, [pc, #+84] ; 0x275A9
A190580C  F044 0401		orr r4, r4, #1
A1905810  47A0     		blx r4

#48					ST		res_kw	{LNXT:5|1|-1}
(*) BOOL
A1905812  F8DF 7024		ldr r7, [pc, #+36] ; 0xA1A0010A
A1905816  7038     		strb r0, [r7]

A1905818  E024     		b #72

A190581C  FFFFFFFF		; 0xA00017E8
A1905820  FFFFFFFF		; 0xA00017F0
A1905824  FFFFFFFF		; 0xA0003EFC
A1905828  FFFFFFFF		; 0xA0003F00
A190582C  A1904478		; 0xA1904478
A1905830  A19044B0		; 0xA19044B0
A1905834  A1A000EF		; 0xA1A000EF
A1905838  A1A0010A		; 0xA1A0010A
A190583C  A1A0010B		; 0xA1A0010B
A1905840  A1A0010C		; 0xA1A0010C
A1905844  A1A00110		; 0xA1A00110
A1905848  A1A00114		; 0xA1A00114
A190584C  A1A00118		; 0xA1A00118
A1905850  A1A00120		; 0xA1A00120
A1905854  A1A00121		; 0xA1A00121
A1905858  A1A00122		; 0xA1A00122
A190585C  00001388		; 0x00001388
A1905860  FFFFFFFF		; 0x000275A9

END_PROGRAM
**************************************************
	List program: sr_ATS_Ctrl
**************************************************

PROGRAM sr_ATS_Ctrl

        VAR
TON_StartUp_1 : TON;
TON_StartUp_2 : TON;
stopping_timer : TON;
downtimeIN : BOOL;
washing_timer : TON;
checkWashAndStart : CheckWashAndStart;
isRunningWash : BOOL;
onWash : BOOL := false;
time_sec : INT := 4000;
prev_wash_time_minutes : INT;
	END_VAR

END_PROGRAM

#0		{SRC:sr_ATS_Ctrl}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF i_pb_rem = 1 And
#5		Not Alarms.0 And 
#6		Not Alarms.3 And 
#7		Not Alarms.4 And 
#8		Not Alarms.5 And 
#9		Not Alarms.7 *)
#10			LD		Alarms.7	{LNXT:2|-1|-1}
(*) UNDEF
A1905864  F8DF 72E0		ldr r7, [pc, #+736] ; 0xA0003F18
A1905868  8838     		ldrh r0, [r7]
A190586A  F3C0 10C0		ubfx r0, r0, #7, #1

#11			NOT	{LNXT:2|-1|-1}
(*) BOOL
A190586E  2800     		cmp r0, #0
A1905870  BF08 2001		eqmov r0, #1
A1905874  BF18 2000		nemov r0, #0

#12			AND(		Alarms.5	{LNXT:2|-1|-1}
(*) BOOL
A1905878  B082     		sub sp, sp, #8
A190587A  F8CD 0000		str r0, [sp]
A190587E  F8DF 72C8		ldr r7, [pc, #+712] ; 0xA0003F18
A1905882  8838     		ldrh r0, [r7]
A1905884  F3C0 1040		ubfx r0, r0, #5, #1

#13			NOT	{LNXT:2|-1|-1}
(*) BOOL
A1905888  2800     		cmp r0, #0
A190588A  BF08 2001		eqmov r0, #1
A190588E  BF18 2000		nemov r0, #0

#14			AND(		Alarms.4	{LNXT:2|-1|-1}
(*) BOOL
A1905892  B082     		sub sp, sp, #8
A1905894  F8CD 0000		str r0, [sp]
A1905898  F8DF 72AC		ldr r7, [pc, #+684] ; 0xA0003F18
A190589C  8838     		ldrh r0, [r7]
A190589E  F3C0 1000		ubfx r0, r0, #4, #1

#15			NOT	{LNXT:2|-1|-1}
(*) BOOL
A19058A2  2800     		cmp r0, #0
A19058A4  BF08 2001		eqmov r0, #1
A19058A8  BF18 2000		nemov r0, #0

#16			AND(		Alarms.3	{LNXT:2|-1|-1}
(*) BOOL
A19058AC  B082     		sub sp, sp, #8
A19058AE  F8CD 0000		str r0, [sp]
A19058B2  F8DF 7294		ldr r7, [pc, #+660] ; 0xA0003F18
A19058B6  8838     		ldrh r0, [r7]
A19058B8  F3C0 00C0		ubfx r0, r0, #3, #1

#17			NOT	{LNXT:2|-1|-1}
(*) BOOL
A19058BC  2800     		cmp r0, #0
A19058BE  BF08 2001		eqmov r0, #1
A19058C2  BF18 2000		nemov r0, #0

#18			AND(		Alarms.0	{LNXT:2|-1|-1}
(*) BOOL
A19058C6  B082     		sub sp, sp, #8
A19058C8  F8CD 0000		str r0, [sp]
A19058CC  F8DF 7278		ldr r7, [pc, #+632] ; 0xA0003F18
A19058D0  8838     		ldrh r0, [r7]
A19058D2  F3C0 0000		ubfx r0, r0, #0, #1

#19			NOT	{LNXT:2|-1|-1}
(*) BOOL
A19058D6  2800     		cmp r0, #0
A19058D8  BF08 2001		eqmov r0, #1
A19058DC  BF18 2000		nemov r0, #0

#20			AND(		i_pb_rem	{LNXT:2|-1|-1}
(*) BOOL
A19058E0  B082     		sub sp, sp, #8
A19058E2  F8CD 0000		str r0, [sp]
A19058E6  F8DF 7280		ldr r7, [pc, #+640] ; 0xA1A00042
A19058EA  F9B7 0000		ldrsh r0, [r7]

#21			EQ		1	{LNXT:2|-1|-1}
(*) INT
A19058EE  2801     		cmp r0, #1
A19058F0  BF18 2000		nemov r0, #0
A19058F4  BF08 2001		eqmov r0, #1

#22			)	{LNXT:2|-1|-1}
(*) BOOL
A19058F8  4607     		mov r7, r0
A19058FA  F8DD 0000		ldr r0, [sp]
A19058FE  B002     		add sp, sp, #8
A1905900  4038     		and r0, r0, r7

#23			)	{LNXT:2|-1|-1}
(*) BOOL
A1905902  4607     		mov r7, r0
A1905904  F8DD 0000		ldr r0, [sp]
A1905908  B002     		add sp, sp, #8
A190590A  4038     		and r0, r0, r7

#24			)	{LNXT:2|-1|-1}
(*) BOOL
A190590C  4607     		mov r7, r0
A190590E  F8DD 0000		ldr r0, [sp]
A1905912  B002     		add sp, sp, #8
A1905914  4038     		and r0, r0, r7

#25			)	{LNXT:2|-1|-1}
(*) BOOL
A1905916  4607     		mov r7, r0
A1905918  F8DD 0000		ldr r0, [sp]
A190591C  B002     		add sp, sp, #8
A190591E  4038     		and r0, r0, r7

#26			)	{LNXT:2|-1|-1}
(*) BOOL
A1905920  4607     		mov r7, r0
A1905922  F8DD 0000		ldr r0, [sp]
A1905926  B002     		add sp, sp, #8
A1905928  4038     		and r0, r0, r7

#27			JMPCN	$label0	{LNXT:2|9|30}
(-) BOOL
A190592A  2800     		cmp r0, #0
A190592C  D05C     		beq #184 ; 0xA19059E8


#28		
#29			(* THEN *)
#30		
#31		
#32				(* IF CMD.0 *)
#33				LD		CMD.0	{LNXT:9|-1|-1}
(*) UNDEF
A1905930  F8DF 7218		ldr r7, [pc, #+536] ; 0xA0003F1A
A1905934  8838     		ldrh r0, [r7]
A1905936  F3C0 0000		ubfx r0, r0, #0, #1

#34				JMPCN	$label2	{LNXT:9|10|26}
(-) BOOL
A190593A  2800     		cmp r0, #0
A190593C  D04E     		beq #156 ; 0xA19059DC


#35		
#36				(* THEN *)
#37		
#38					(* checkWashAndStart *)
#39					MOVE		o_val_close_fall,checkWashAndStart.o_val_close_fall_FB	{LNXT:10|-1|-1}
(*) BOOL
A1905940  F8DF 02A8		ldr r0, [pc, #+680] ; 0x100004AD
A1905944  F8DF 7238		ldr r7, [pc, #+568] ; 0xA1A000B8
A1905948  6038     		str r0, [r7]

#40					MOVE		o_val_close_R,checkWashAndStart.o_val_close_R_FB	{LNXT:11|-1|-1}
(*) BOOL^
A190594A  F8DF 02A8		ldr r0, [pc, #+680] ; 0x100004AF
A190594E  F8DF 7228		ldr r7, [pc, #+552] ; 0xA1A000B0
A1905952  6038     		str r0, [r7]

#41					MOVE		o_val_open_fall,checkWashAndStart.o_val_open_fall_FB	{LNXT:12|-1|-1}
(*) BOOL^
A1905954  F8DF 0290		ldr r0, [pc, #+656] ; 0x100004AC
A1905958  F8DF 7220		ldr r7, [pc, #+544] ; 0xA1A000B4
A190595C  6038     		str r0, [r7]

#42					MOVE		o_val_open_R,checkWashAndStart.o_val_open_R_FB	{LNXT:13|-1|-1}
(*) BOOL^
A190595E  F8DF 0290		ldr r0, [pc, #+656] ; 0x100004AE
A1905962  F8DF 7210		ldr r7, [pc, #+528] ; 0xA1A000AC
A1905966  6038     		str r0, [r7]

#43					MOVE		sv_washing,checkWashAndStart.sv_washing_FB	{LNXT:14|-1|-1}
(*) BOOL^
A1905968  F8DF 01E4		ldr r0, [pc, #+484] ; 0xA0003F1E
A190596C  F8DF 7200		ldr r7, [pc, #+512] ; 0xA1A000A8
A1905970  6038     		str r0, [r7]

#44					MOVE		q_start_ats,checkWashAndStart.q_start_ats_FB	{LNXT:15|-1|-1}
(*) BOOL^
A1905972  F8DF 0284		ldr r0, [pc, #+644] ; 0x100004B3
A1905976  F8DF 720C		ldr r7, [pc, #+524] ; 0xA1A000BC
A190597A  6038     		str r0, [r7]

#45					MOVE		time_sec,checkWashAndStart.ep_time_wash_FB	{LNXT:16|-1|-1}
(*) BOOL^
A190597C  F8DF 0224		ldr r0, [pc, #+548] ; 0xA1A000DC
A1905980  F8DF 7204		ldr r7, [pc, #+516] ; 0xA1A000C0
A1905984  6038     		str r0, [r7]

#46					MOVE		i_val_state,checkWashAndStart.i_val_state_FB	{LNXT:17|-1|-1}
(*) INT^
A1905986  F8DF 0220		ldr r0, [pc, #+544] ; 0xA1A000DE
A190598A  F8DF 7200		ldr r7, [pc, #+512] ; 0xA1A000C4
A190598E  6038     		str r0, [r7]

#47					MOVE		di_val_open_state_fall,checkWashAndStart.di_val_open_state_fall_FB	{LNXT:18|-1|-1}
(*) INT^
A1905990  F8DF 0218		ldr r0, [pc, #+536] ; 0xA1A000E0
A1905994  F8DF 71F8		ldr r7, [pc, #+504] ; 0xA1A000C8
A1905998  6038     		str r0, [r7]

#48					MOVE		di_val_close_state_fall,checkWashAndStart.di_val_close_state_fall_FB	{LNXT:19|-1|-1}
(*) INT^
A190599A  F8DF 0214		ldr r0, [pc, #+532] ; 0xA1A000E2
A190599E  F8DF 71F4		ldr r7, [pc, #+500] ; 0xA1A000CC
A19059A2  6038     		str r0, [r7]

#49					MOVE		di_val_open_state_R,checkWashAndStart.di_val_open_state_R_FB	{LNXT:20|-1|-1}
(*) INT^
A19059A4  F8DF 020C		ldr r0, [pc, #+524] ; 0xA1A000E4
A19059A8  F8DF 71EC		ldr r7, [pc, #+492] ; 0xA1A000D0
A19059AC  6038     		str r0, [r7]

#50					MOVE		di_val_close_state_R,checkWashAndStart.di_val_close_state_R_FB	{LNXT:21|-1|-1}
(*) INT^
A19059AE  F8DF 01B4		ldr r0, [pc, #+436] ; 0xA1A00041
A19059B2  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A000D4
A19059B6  6038     		str r0, [r7]

#51					MOVE		Alarms_Val,checkWashAndStart.Alarm_Val_FB	{LNXT:22|-1|-1}
(*) BOOL^
A19059B8  F8DF 0198		ldr r0, [pc, #+408] ; 0xA0003F20
A19059BC  F8DF 71E0		ldr r7, [pc, #+480] ; 0xA1A000D8
A19059C0  6038     		str r0, [r7]

#52					CAL		checkWashAndStart	{LNXT:10|57|-1}
(*) WORD^
A19059C2  E92D 0021		stmdb sp!, { r0, r5 }
A19059C6  F8DF 51A4		ldr r5, [pc, #+420] ; 0xA1A00044
A19059CA  F8DF 4194		ldr r4, [pc, #+404] ; 0xA1904778
A19059CE  F044 0401		orr r4, r4, #1
A19059D2  47A0     		blx r4
A19059D4  E8BD 0021		ldmia sp!, { r0, r5 }

#53					JMP		$label3	{LNXT:9|10|26}
(-) WORD^
A19059D8  E004     		b #8 ; 0xA19059E4


#54		$label2:
#55		
#56				(* ELSE *)
#57		
#58					(* q_start_ats := False; *)
#59					MOVE		False,q_start_ats	{LNXT:26|57|-1}
(*) WORD^
A19059DC  2000     		mov r0, #0 ; 0
A19059DE  F8DF 7218		ldr r7, [pc, #+536] ; 0x100004B3
A19059E2  7038     		strb r0, [r7]

#60		
#61		$label3:
#62				(* END_IF *)
#63				JMP		$label1	{LNXT:2|9|30}
(-) BOOL
A19059E4  E00D     		b #26 ; 0xA1905A02


#64		$label0:
#65		
#66			(* ELSE *)
#67		
#68				(* CMD.0 := False; *)
#69				MOVE		False,CMD.0	{LNXT:30|31|-1}
(*) BOOL
A19059E8  2000     		mov r0, #0 ; 0
A19059EA  F8DF 7160		ldr r7, [pc, #+352] ; 0xA0003F1A
A19059EE  F8B7 8000		ldrh r8, [r7]
A19059F2  F360 0800		bfi r8, r0, #0, #1
A19059F6  F8A7 8000		strh r8, [r7]

#70		
#71				(* q_start_ats := False; *)
#72				MOVE		False,q_start_ats	{LNXT:31|57|-1}
(*) WORD
A19059FA  2000     		mov r0, #0 ; 0
A19059FC  F8DF 71F8		ldr r7, [pc, #+504] ; 0x100004B3
A1905A00  7038     		strb r0, [r7]

#73		
#74		$label1:
#75			(* END_IF *)
#76		
#77		
#78			(* IF wash_time_minutes <> prev_wash_time_minutes *)
#79			LD		wash_time_minutes	{LNXT:57|-1|-1}
(*) UNDEF
A1905A02  F8DF 7154		ldr r7, [pc, #+340] ; 0xA0003F22
A1905A06  F9B7 0000		ldrsh r0, [r7]

#80			NE		prev_wash_time_minutes	{LNXT:57|-1|-1}
(*) INT
A1905A0A  F8DF 71AC		ldr r7, [pc, #+428] ; 0xA1A000E6
A1905A0E  F9B7 7000		ldrsh r7, [r7]
A1905A12  42B8     		cmp r0, r7
A1905A14  BF08 2000		eqmov r0, #0
A1905A18  BF18 2001		nemov r0, #1

#81			JMPCN	$label4	{LNXT:57|59|63}
(-) BOOL
A1905A1C  2800     		cmp r0, #0
A1905A1E  D01E     		beq #60 ; 0xA1905A5E


#82		
#83			(* THEN *)
#84		
#85				(* ( *)
#86				LD		wash_time_minutes	{LNXT:59|60|-1}
(*) UNDEF
A1905A22  F8DF 7134		ldr r7, [pc, #+308] ; 0xA0003F22
A1905A26  F9B7 0000		ldrsh r0, [r7]

#87				MUL		60	{LNXT:59|60|-1}
(*) INT
A1905A2A  273C     		mov r7, #60 ; 60
A1905A2C  4378     		mul r0, r0, r7

#88				ST		$$TMP6	{LNXT:59|60|-1}
(*) INT
A1905A2E  F8DF 718C		ldr r7, [pc, #+396] ; 0xA1A000E8
A1905A32  6038     		str r0, [r7]

#89				ADR		ep_time_wash	{LNXT:59|60|-1}
(*) DINT
A1905A34  F8DF 010C		ldr r0, [pc, #+268] ; 0xA00017EC

#90				sysWriteParINT		$$TMP6	{LNXT:59|60|-1}
(*) @INT
A1905A38  4607     		mov r7, r0
A1905A3A  4638     		mov r0, r7
A1905A3C  F8DF 717C		ldr r7, [pc, #+380] ; 0xA1A000E8
A1905A40  683F     		ldr r7, [r7]
A1905A42  B23F     		sxth r7, r7
A1905A44  4639     		mov r1, r7
A1905A46  F8DF 419C		ldr r4, [pc, #+412] ; 0x275BB
A1905A4A  F044 0401		orr r4, r4, #1
A1905A4E  47A0     		blx r4

#91		
#92				(* prev_wash_time_minutes:=wash_time_minutes; *)
#93				MOVE		wash_time_minutes,prev_wash_time_minutes	{LNXT:60|63|-1}
(*) BOOL
A1905A50  F8DF 7104		ldr r7, [pc, #+260] ; 0xA0003F22
A1905A54  F9B7 0000		ldrsh r0, [r7]
A1905A58  F8DF 715C		ldr r7, [pc, #+348] ; 0xA1A000E6
A1905A5C  8038     		strh r0, [r7]

#94		
#95		$label4:
#96			(* END_IF *)
#97		
#98		
#99			(* IF q_start_ats *)
#100			LD		q_start_ats	{LNXT:63|-1|-1}
(*) UNDEF
A1905A5E  F8DF 7198		ldr r7, [pc, #+408] ; 0x100004B3
A1905A62  7838     		ldrb r0, [r7]

#101			NOT	{LNXT:63|-1|-1}
(*) BOOL
A1905A64  2800     		cmp r0, #0
A1905A66  BF08 2001		eqmov r0, #1
A1905A6A  BF18 2000		nemov r0, #0

#102			JMPCN	$label5	{LNXT:63|64|66}
(-) BOOL
A1905A6E  2800     		cmp r0, #0
A1905A70  D006     		beq #12 ; 0xA1905A80


#103		
#104			(* THEN *)
#105		
#106				(* downtimeIN:=true; *)
#107				MOVE		true,downtimeIN	{LNXT:64|70|-1}
(*) BOOL
A1905A74  2001     		mov r0, #1 ; 1
A1905A76  F8DF 7148		ldr r7, [pc, #+328] ; 0xA1A000EC
A1905A7A  7038     		strb r0, [r7]

#108				JMP		$label6	{LNXT:63|64|66}
(-) BOOL
A1905A7C  E004     		b #8 ; 0xA1905A88


#109		$label5:
#110		
#111			(* ELSE *)
#112		
#113				(* downtimeIN:=false; *)
#114				MOVE		false,downtimeIN	{LNXT:66|70|-1}
(*) BOOL
A1905A80  2000     		mov r0, #0 ; 0
A1905A82  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A000EC
A1905A86  7038     		strb r0, [r7]

#115		
#116		$label6:
#117			(* END_IF *)
#118		
#119			(* stopping_timer *)
#120			MOVE		downtimeIN,stopping_timer.IN	{LNXT:70|-1|-1}
(*) BOOL
A1905A88  F8DF 7134		ldr r7, [pc, #+308] ; 0xA1A000EC
A1905A8C  7838     		ldrb r0, [r7]
A1905A8E  F8DF 7144		ldr r7, [pc, #+324] ; 0xA1A000F4
A1905A92  7038     		strb r0, [r7]

#121			MOVE		50000,stopping_timer.PT	{LNXT:70|-1|-1}
(*) BOOL
A1905A94  F8DF 7148		ldr r7, [pc, #+328] ; 0xC350
A1905A98  4638     		mov r0, r7
A1905A9A  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A000F8
A1905A9E  6038     		str r0, [r7]

#122			CAL		stopping_timer	{LNXT:70|72|-1}
(*) UDINT
A1905AA0  E92D 0021		stmdb sp!, { r0, r5 }
A1905AA4  F8DF 5128		ldr r5, [pc, #+296] ; 0xA1A000F0
A1905AA8  F8DF 40B0		ldr r4, [pc, #+176] ; 0xA19044B0
A1905AAC  F044 0401		orr r4, r4, #1
A1905AB0  47A0     		blx r4
A1905AB2  E8BD 0021		ldmia sp!, { r0, r5 }

#123		
#124		
#125			(* IF stopping_timer.Q *)
#126			LD		stopping_timer.Q	{LNXT:72|-1|-1}
(*) UNDEF
A1905AB6  F8DF 7124		ldr r7, [pc, #+292] ; 0xA1A000FC
A1905ABA  7838     		ldrb r0, [r7]

#127			JMPCN	$label7	{LNXT:72|73|77}
(-) BOOL
A1905ABC  2800     		cmp r0, #0
A1905ABE  D004     		beq #8 ; 0xA1905ACA


#128		
#129			(* THEN *)
#130		
#131				(* sv_washing :=true; *)
#132				MOVE		true,sv_washing	{LNXT:73|77|-1}
(*) BOOL
A1905AC2  2001     		mov r0, #1 ; 1
A1905AC4  F8DF 7088		ldr r7, [pc, #+136] ; 0xA0003F1E
A1905AC8  7038     		strb r0, [r7]

#133		
#134		$label7:
#135			(* END_IF *)
#136		
#137			(* Alarms.2 := i_sns_door; *)
#138			MOVE		i_sns_door,Alarms.2	{LNXT:77|80|-1}
(*) BOOL
A1905ACA  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000ED
A1905ACE  7838     		ldrb r0, [r7]
A1905AD0  F8DF 7074		ldr r7, [pc, #+116] ; 0xA0003F18
A1905AD4  F8B7 8000		ldrh r8, [r7]
A1905AD8  F360 0882		bfi r8, r0, #2, #1
A1905ADC  F8A7 8000		strh r8, [r7]

#139		
#140			(* Alarms.3 := i_rnpp; *)
#141			MOVE		i_rnpp,Alarms.3	{LNXT:80|86|-1}
(*) BOOL
A1905AE0  F8DF 70E8		ldr r7, [pc, #+232] ; 0xA1A000EF
A1905AE4  7838     		ldrb r0, [r7]
A1905AE6  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0003F18
A1905AEA  F8B7 8000		ldrh r8, [r7]
A1905AEE  F360 08C3		bfi r8, r0, #3, #1
A1905AF2  F8A7 8000		strh r8, [r7]

#142		
#143			(* Alarms.5 := i_no_alm_ats; *)
#144			MOVE		i_no_alm_ats,Alarms.5	{LNXT:86|103|-1}
(*) BOOL
A1905AF6  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A000EE
A1905AFA  7838     		ldrb r0, [r7]
A1905AFC  F8DF 7048		ldr r7, [pc, #+72] ; 0xA0003F18
A1905B00  F8B7 8000		ldrh r8, [r7]
A1905B04  F360 1845		bfi r8, r0, #5, #1
A1905B08  F8A7 8000		strh r8, [r7]

#145		
#146		
#147			(* IF CMD.1 *)
#148			LD		CMD.1	{LNXT:103|-1|-1}
(*) UNDEF
A1905B0C  F8DF 703C		ldr r7, [pc, #+60] ; 0xA0003F1A
A1905B10  8838     		ldrh r0, [r7]
A1905B12  F3C0 0040		ubfx r0, r0, #1, #1

#149			JMPCN	$label8	{LNXT:103|104|2}
(-) BOOL
A1905B16  2800     		cmp r0, #0
A1905B18  D00D     		beq #26 ; 0xA1905B36


#150		
#151			(* THEN *)
#152		
#153				(* Alarms := 0; *)
#154				MOVE		0,Alarms	{LNXT:104|105|-1}
(*) BOOL
A1905B1C  2000     		mov r0, #0 ; 0
A1905B1E  F8DF 7028		ldr r7, [pc, #+40] ; 0xA0003F18
A1905B22  8038     		strh r0, [r7]

#155		
#156				(* CMD.1 := False; *)
#157				MOVE		False,CMD.1	{LNXT:105|2|-1}
(*) WORD
A1905B24  2000     		mov r0, #0 ; 0
A1905B26  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003F1A
A1905B2A  F8B7 8000		ldrh r8, [r7]
A1905B2E  F360 0841		bfi r8, r0, #1, #1
A1905B32  F8A7 8000		strh r8, [r7]

A1905B36  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905B3A  F8DD E000		ldr lr, [sp]
A1905B3E  B002     		add sp, sp, #8

A1905B40  4770     		bx lr

A1905B44  FFFFFFFF		; 0xA00017EC
A1905B48  FFFFFFFF		; 0xA0003F18
A1905B4C  FFFFFFFF		; 0xA0003F1A
A1905B50  FFFFFFFF		; 0xA0003F1E
A1905B54  FFFFFFFF		; 0xA0003F20
A1905B58  FFFFFFFF		; 0xA0003F22
A1905B5C  A19044B0		; 0xA19044B0
A1905B60  A1904778		; 0xA1904778
A1905B64  A1A00041		; 0xA1A00041
A1905B68  A1A00042		; 0xA1A00042
A1905B6C  A1A00044		; 0xA1A00044
A1905B70  A1A000A8		; 0xA1A000A8
A1905B74  A1A000AC		; 0xA1A000AC
A1905B78  A1A000B0		; 0xA1A000B0
A1905B7C  A1A000B4		; 0xA1A000B4
A1905B80  A1A000B8		; 0xA1A000B8
A1905B84  A1A000BC		; 0xA1A000BC
A1905B88  A1A000C0		; 0xA1A000C0
A1905B8C  A1A000C4		; 0xA1A000C4
A1905B90  A1A000C8		; 0xA1A000C8
A1905B94  A1A000CC		; 0xA1A000CC
A1905B98  A1A000D0		; 0xA1A000D0
A1905B9C  A1A000D4		; 0xA1A000D4
A1905BA0  A1A000D8		; 0xA1A000D8
A1905BA4  A1A000DC		; 0xA1A000DC
A1905BA8  A1A000DE		; 0xA1A000DE
A1905BAC  A1A000E0		; 0xA1A000E0
A1905BB0  A1A000E2		; 0xA1A000E2
A1905BB4  A1A000E4		; 0xA1A000E4
A1905BB8  A1A000E6		; 0xA1A000E6
A1905BBC  A1A000E8		; 0xA1A000E8
A1905BC0  A1A000EC		; 0xA1A000EC
A1905BC4  A1A000ED		; 0xA1A000ED
A1905BC8  A1A000EE		; 0xA1A000EE
A1905BCC  A1A000EF		; 0xA1A000EF
A1905BD0  A1A000F0		; 0xA1A000F0
A1905BD4  A1A000F4		; 0xA1A000F4
A1905BD8  A1A000F8		; 0xA1A000F8
A1905BDC  A1A000FC		; 0xA1A000FC
A1905BE0  0000C350		; 0x0000C350
A1905BE4  FFFFFFFF		; 0x000275BB
A1905BE8  FFFFFFFF		; 0x100004AC
A1905BEC  FFFFFFFF		; 0x100004AD
A1905BF0  FFFFFFFF		; 0x100004AE
A1905BF4  FFFFFFFF		; 0x100004AF
A1905BF8  FFFFFFFF		; 0x100004B3

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1905BFC  B082     		sub sp, sp, #8
A1905BFE  F8CD E000		str lr, [sp]
A1905C02  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1905C06  F8DF 70D0		ldr r7, [pc, #+208] ; 0x10000450
A1905C0A  8838     		ldrh r0, [r7]
A1905C0C  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A00042
A1905C10  8038     		strh r0, [r7]

A1905C12  F8DF 70B4		ldr r7, [pc, #+180] ; 0x10000446
A1905C16  8838     		ldrh r0, [r7]
A1905C18  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A000DE
A1905C1C  8038     		strh r0, [r7]

A1905C1E  F8DF 70AC		ldr r7, [pc, #+172] ; 0x10000448
A1905C22  8838     		ldrh r0, [r7]
A1905C24  F8DF 7070		ldr r7, [pc, #+112] ; 0xA1A000E0
A1905C28  8038     		strh r0, [r7]

A1905C2A  F8DF 70A4		ldr r7, [pc, #+164] ; 0x1000044A
A1905C2E  8838     		ldrh r0, [r7]
A1905C30  F8DF 7068		ldr r7, [pc, #+104] ; 0xA1A000E2
A1905C34  8038     		strh r0, [r7]

A1905C36  F8DF 709C		ldr r7, [pc, #+156] ; 0x1000044C
A1905C3A  8838     		ldrh r0, [r7]
A1905C3C  F8DF 7060		ldr r7, [pc, #+96] ; 0xA1A000E4
A1905C40  8038     		strh r0, [r7]

A1905C42  F8DF 7070		ldr r7, [pc, #+112] ; 0x10000420
A1905C46  7838     		ldrb r0, [r7]
A1905C48  F8DF 7040		ldr r7, [pc, #+64] ; 0xA1A00041
A1905C4C  7038     		strb r0, [r7]

A1905C4E  F8DF 7068		ldr r7, [pc, #+104] ; 0x10000423
A1905C52  7838     		ldrb r0, [r7]
A1905C54  F8DF 704C		ldr r7, [pc, #+76] ; 0xA1A000ED
A1905C58  7038     		strb r0, [r7]

A1905C5A  F8DF 7060		ldr r7, [pc, #+96] ; 0x10000424
A1905C5E  7838     		ldrb r0, [r7]
A1905C60  F8DF 7048		ldr r7, [pc, #+72] ; 0xA1A000EF
A1905C64  7038     		strb r0, [r7]

A1905C66  F8DF 7058		ldr r7, [pc, #+88] ; 0x10000426
A1905C6A  7838     		ldrb r0, [r7]
A1905C6C  F8DF 7038		ldr r7, [pc, #+56] ; 0xA1A000EE
A1905C70  7038     		strb r0, [r7]

A1905C72  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000442
A1905C76  8838     		ldrh r0, [r7]
A1905C78  F8DF 7034		ldr r7, [pc, #+52] ; 0xA1A00108
A1905C7C  8038     		strh r0, [r7]

A1905C7E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905C82  F8DD E000		ldr lr, [sp]
A1905C86  B002     		add sp, sp, #8

A1905C88  4770     		bx lr

A1905C8C  A1A00041		; 0xA1A00041
A1905C90  A1A00042		; 0xA1A00042
A1905C94  A1A000DE		; 0xA1A000DE
A1905C98  A1A000E0		; 0xA1A000E0
A1905C9C  A1A000E2		; 0xA1A000E2
A1905CA0  A1A000E4		; 0xA1A000E4
A1905CA4  A1A000ED		; 0xA1A000ED
A1905CA8  A1A000EE		; 0xA1A000EE
A1905CAC  A1A000EF		; 0xA1A000EF
A1905CB0  A1A00108		; 0xA1A00108
A1905CB4  FFFFFFFF		; 0x10000420
A1905CB8  FFFFFFFF		; 0x10000423
A1905CBC  FFFFFFFF		; 0x10000424
A1905CC0  FFFFFFFF		; 0x10000426
A1905CC4  FFFFFFFF		; 0x10000442
A1905CC8  FFFFFFFF		; 0x10000446
A1905CCC  FFFFFFFF		; 0x10000448
A1905CD0  FFFFFFFF		; 0x1000044A
A1905CD4  FFFFFFFF		; 0x1000044C
A1905CD8  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1905CDC  B082     		sub sp, sp, #8
A1905CDE  F8CD E000		str lr, [sp]
A1905CE2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1905CE6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905CEA  F8DD E000		ldr lr, [sp]
A1905CEE  B002     		add sp, sp, #8

A1905CF0  4770     		bx lr



**************************************************
	Task Timed init code
**************************************************

A1905CF2  B082     		sub sp, sp, #8
A1905CF4  F8CD E000		str lr, [sp]
A1905CF8  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

Var init: V::SR_ATS_CTRL.TIME_SEC = 4000
A1905CFC  F8DF 0018		ldr r0, [pc, #+24] ; 0xFA0
A1905D00  F8DF 7010		ldr r7, [pc, #+16] ; 0xA1A000DC
A1905D04  8038     		strh r0, [r7]

A1905D06  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905D0A  F8DD E000		ldr lr, [sp]
A1905D0E  B002     		add sp, sp, #8

A1905D10  4770     		bx lr

A1905D14  A1A000DC		; 0xA1A000DC
A1905D18  00000FA0		; 0x00000FA0



**************************************************
	Global init code
**************************************************

A1905D30  B082     		sub sp, sp, #8
A1905D32  F8CD E000		str lr, [sp]
A1905D36  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1905D3A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905D3E  F8DD E000		ldr lr, [sp]
A1905D42  B002     		add sp, sp, #8

A1905D44  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

A1905D46  B082     		sub sp, sp, #8
A1905D48  F8CD E000		str lr, [sp]
A1905D4C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1905D50  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1905D54  F8DD E000		ldr lr, [sp]
A1905D58  B002     		add sp, sp, #8

A1905D5A  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000A1900000h
End code area:            		00000000A1906244h
Code size:                		00006244h

Start local data area:    		00000000A1A00000h
End local data area:      		00000000A1A00124h
Local data size:          		00000124h

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                124FA2A4
DEBUG MEMO ID:                          A190B976
FULL MEMO ID:                           00009027
********************************************
