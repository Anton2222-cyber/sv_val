***********************************************************************
*
*	CODE GENERATION LISTING FOR: sw37
*	COMPILER VERSION: 6.0.0.52
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
A1804440  FB90 F3F1		sdiv r3, r0, r1
A1804444  4359     		mul r1, r1, r3
A1804446  EBC1 0000		rsb r0, r1, r0
A180444A  4770     		bx lr

$$MOD_U:
A180444C  FBB0 F3F1		udiv r3, r0, r1
A1804450  4359     		mul r1, r1, r3
A1804452  EBC1 0000		rsb r0, r1, r0
A1804456  4770     		bx lr

**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"<HTML>The output Q will remain FALSE as long as the input variable CLK is FALSE.<br>
As soon as CLK returns TRUE, Q will first return TRUE.<br><br>
This means each time the function is called up, Q will return FALSE until CLK has falling edge followed by an rising edge.<br><br>
<img src= r_trig.png>" }

        VAR_INPUT
clk : BOOL;	{ DE:"Input for edge detection" }
	END_VAR

        VAR_OUTPUT
q : BOOL;	{ DE:"Raising edge output" }
	END_VAR

        VAR
m : BOOL := FALSE;
	END_VAR

END_FUNCTION_BLOCK

A1804458  E92D 4040		stmdb sp!, { r6, lr }
A180445C  462E     		mov r6, r5

#0		{SRC:R_TRIG}
#1		
#2			LD		clk
(*) UNDEF
A180445E  F8DF 7028		ldr r7, [pc, #+40] ; 0x1
A1804462  5DF0     		ldrb r0, [r6, +r7]

#3			ANDN	m
(*) BOOL
A1804464  7837     		ldrb r7, [r6]
A1804466  2F00     		cmp r7, #0
A1804468  BF08 2701		eqmov r7, #1
A180446C  BF18 2700		nemov r7, #0
A1804470  4038     		and r0, r0, r7

#4			ST		q
(*) BOOL
A1804472  F8DF 7018		ldr r7, [pc, #+24] ; 0x2
A1804476  55F0     		strb r0, [r6, +r7]

#5		
#6			LD		clk
(*) UNDEF
A1804478  F8DF 700C		ldr r7, [pc, #+12] ; 0x1
A180447C  5DF0     		ldrb r0, [r6, +r7]

#7			ST		m
(-) BOOL
A180447E  7030     		strb r0, [r6]

A1804480  E8BD 4040		ldmia sp!, { r6, lr }

A1804484  4770     		bx lr

A1804488  00000001		; 0x00000001
A180448C  00000002		; 0x00000002


Frame allocation (hex):

	0000 bit  0: VAR m
	0001 bit  0: VAR clk
	0002 bit  0: VAR q

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

A1804490  E92D 4040		stmdb sp!, { r6, lr }
A1804494  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
A1804496  F8DF 7084		ldr r7, [pc, #+132] ; 0x4
A180449A  5DF0     		ldrb r0, [r6, +r7]

#5			JMPCN	lReset
(-) BOOL
A180449C  2800     		cmp r0, #0
A180449E  D031     		beq #98 ; 0xA1804504


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
A18044A2  F8DF 7080		ldr r7, [pc, #+128] ; 0xC
A18044A6  5DF0     		ldrb r0, [r6, +r7]

#9			RETC
#10			
(-) BOOL
A18044A8  2800     		cmp r0, #0
A18044AA  D134     		bne #104 ; 0xA1804516


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
A18044AE  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
A18044B0  2800     		cmp r0, #0
A18044B2  BF18 2000		nemov r0, #0
A18044B6  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
A18044BA  2800     		cmp r0, #0
A18044BC  D004     		beq #8 ; 0xA18044C8


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
A18044C0  F8DF 7068		ldr r7, [pc, #+104] ; 0x1000052C
A18044C4  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
A18044C6  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
A18044C8  F8DF 7060		ldr r7, [pc, #+96] ; 0x1000052C
A18044CC  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
A18044CE  6837     		ldr r7, [r6]
A18044D0  1BC0     		sub r0, r0, r7

#25			ST		ET
(*) UDINT
A18044D2  F8DF 7054		ldr r7, [pc, #+84] ; 0x10
A18044D6  51F0     		str r0, [r6, +r7]

#26			GE		PT
(*) UDINT
A18044D8  F8DF 7044		ldr r7, [pc, #+68] ; 0x8
A18044DC  59F7     		ldr r7, [r6, +r7]
A18044DE  42B8     		cmp r0, r7
A18044E0  BF38 2000		lomov r0, #0
A18044E4  BF28 2001		hsmov r0, #1

#27			ST		Q
(*) BOOL
A18044E8  F8DF 7038		ldr r7, [pc, #+56] ; 0xC
A18044EC  55F0     		strb r0, [r6, +r7]

#28			RETCN
#29		
(-) BOOL
A18044EE  2800     		cmp r0, #0
A18044F0  D011     		beq #34 ; 0xA1804516


#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
A18044F4  F8DF 7028		ldr r7, [pc, #+40] ; 0x8
A18044F8  59F0     		ldr r0, [r6, +r7]

#32			ST		ET
(*) UDINT
A18044FA  F8DF 702C		ldr r7, [pc, #+44] ; 0x10
A18044FE  51F0     		str r0, [r6, +r7]

#33			RET
#34		
(-) UDINT
A1804500  E009     		b #18 ; 0xA1804516


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
A1804504  2000     		mov r0, #0 ; 0

#39			ST		ET
(*) USINT
A1804506  F8DF 7020		ldr r7, [pc, #+32] ; 0x10
A180450A  51F0     		str r0, [r6, +r7]

#40			ST		timStart
(-) UDINT
A180450C  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
A180450E  2000     		mov r0, #0 ; 0

#42			ST		Q
(*) BOOL
A1804510  F8DF 7010		ldr r7, [pc, #+16] ; 0xC
A1804514  55F0     		strb r0, [r6, +r7]

A1804516  E8BD 4040		ldmia sp!, { r6, lr }

A180451A  4770     		bx lr

A180451C  00000004		; 0x00000004
A1804520  00000008		; 0x00000008
A1804524  0000000C		; 0x0000000C
A1804528  00000010		; 0x00000010
A180452C  FFFFFFFF		; 0x1000052C


Frame allocation (hex):

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: CheckAlarmVal
**************************************************

FUNCTION_BLOCK CheckAlarmVal

        VAR_IN_OUT
di_val_open_state_fall_FB : INT^;
di_val_close_state_fall_FB : INT^;
di_val_open_state_R_FB : INT^;
di_val_close_state_R_FB : BOOL^;
Alarm_Val_FB : WORD^;
o_val_open_R_FB : BOOL^;
o_val_close_R_FB : BOOL^;
o_val_open_fall_FB : BOOL^;
o_val_close_fall_FB : BOOL^;
start_check : BOOL^;
	END_VAR

        VAR_OUTPUT
check_timer : TON;	{ DE:"локальний FB таймера" }
is_check_done : BOOL;
isOK : BOOL;
	END_VAR

        VAR
should_run_timer : BOOL;
	END_VAR

END_FUNCTION_BLOCK

A1804530  E92D 4040		stmdb sp!, { r6, lr }
A1804534  462E     		mov r6, r5

#0		{SRC:CheckAlarmVal}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF check_timer.IN *)
#5			LD		check_timer.IN	{LNXT:3|-1|-1}
(*) UNDEF
A1804536  F8DF 71E0		ldr r7, [pc, #+480] ; 0x8
A180453A  5DF0     		ldrb r0, [r6, +r7]

#6			JMPCN	$label0	{LNXT:3|4|8}
(-) BOOL
A180453C  2800     		cmp r0, #0
A180453E  D008     		beq #16 ; 0xA1804552


#7		
#8			(* THEN *)
#9		
#10				(* isOK := TRUE; *)
#11				MOVE		TRUE,isOK	{LNXT:4|5|-1}
(*) BOOL
A1804542  2001     		mov r0, #1 ; 1
A1804544  F8DF 71E0		ldr r7, [pc, #+480] ; 0x19
A1804548  55F0     		strb r0, [r6, +r7]

#12		
#13				(* is_check_done := false; *)
#14				MOVE		false,is_check_done	{LNXT:5|8|-1}
(*) BOOL
A180454A  2000     		mov r0, #0 ; 0
A180454C  F8DF 71D4		ldr r7, [pc, #+468] ; 0x18
A1804550  55F0     		strb r0, [r6, +r7]

#15		
#16		$label0:
#17			(* END_IF *)
#18		
#19		
#20			(* IF start_check *)
#21			LD		start_check	{LNXT:8|-1|-1}
(*) UNDEF
A1804552  F8DF 71FC		ldr r7, [pc, #+508] ; 0x40
A1804556  F856 C007		ldr r12, [r6, +r7]
A180455A  F89C 0000		ldrb r0, [r12]

#22			JMPCN	$label1	{LNXT:8|9|13}
(-) BOOL
A180455E  2800     		cmp r0, #0
A1804560  D016     		beq #44 ; 0xA1804590


#23		
#24			(* THEN *)
#25		
#26				(* check_timer *)
#27				MOVE		true,check_timer.IN	{LNXT:9|-1|-1}
(*) BOOL
A1804564  2001     		mov r0, #1 ; 1
A1804566  F8DF 71B0		ldr r7, [pc, #+432] ; 0x8
A180456A  55F0     		strb r0, [r6, +r7]

#28				MOVE		10000,check_timer.PT	{LNXT:9|-1|-1}
(*) BOOL
A180456C  F8DF 71E4		ldr r7, [pc, #+484] ; 0x2710
A1804570  4638     		mov r0, r7
A1804572  F8DF 71A8		ldr r7, [pc, #+424] ; 0xC
A1804576  51F0     		str r0, [r6, +r7]

#29				CAL		check_timer	{LNXT:9|13|-1}
(*) UDINT
A1804578  E92D 0021		stmdb sp!, { r0, r5 }
A180457C  F8DF 7194		ldr r7, [pc, #+404] ; 0x4
A1804580  19F5     		add r5, r6, r7
A1804582  467C     		mov r4, pc
A1804584  3CF6     		sub  r4, r4, #+0xF6 ; 0xA1804490
A1804586  F044 0401		orr r4, r4, #1
A180458A  47A0     		blx r4
A180458C  E8BD 0021		ldmia sp!, { r0, r5 }

#30		
#31		$label1:
#32			(* END_IF *)
#33		
#34		
#35			(* IF check_timer.Q *)
#36			LD		check_timer.Q	{LNXT:13|-1|-1}
(*) UNDEF
A1804590  F8DF 718C		ldr r7, [pc, #+396] ; 0x10
A1804594  5DF0     		ldrb r0, [r6, +r7]

#37			JMPCN	$label2	{LNXT:13|15|41}
(-) BOOL
A1804596  2800     		cmp r0, #0
A1804598  F000 80AA		beq #340 ; 0xA18046F0


#38		
#39			(* THEN *)
#40		
#41				(* check_timer *)
#42				MOVE		false,check_timer.IN	{LNXT:15|-1|-1}
(*) BOOL
A180459C  2000     		mov r0, #0 ; 0
A180459E  F8DF 7178		ldr r7, [pc, #+376] ; 0x8
A18045A2  55F0     		strb r0, [r6, +r7]

#43				CAL		check_timer	{LNXT:15|17|-1}
(*) BOOL
A18045A4  E92D 0021		stmdb sp!, { r0, r5 }
A18045A8  F8DF 7168		ldr r7, [pc, #+360] ; 0x4
A18045AC  19F5     		add r5, r6, r7
A18045AE  F8DF 4160		ldr r4, [pc, #+352] ; 0xA1804490
A18045B2  F044 0401		orr r4, r4, #1
A18045B6  47A0     		blx r4
A18045B8  E8BD 0021		ldmia sp!, { r0, r5 }

#44		
#45		
#46				(* IF o_val_open_R_FB^ AND NOT di_val_open_state_R_FB^ *)
#47				LD		di_val_open_state_R_FB^	{LNXT:17|-1|-1}
(*) UNDEF
A18045BC  F8DF 7174		ldr r7, [pc, #+372] ; 0x24
A18045C0  F856 C007		ldr r12, [r6, +r7]
A18045C4  F9BC 0000		ldrsh r0, [r12]

#48				NOT	{LNXT:17|-1|-1}
(-) INT
A18045C8  43C0     		mvn r0, r0

#49				AND		o_val_open_R_FB^	{LNXT:17|-1|-1}
(*) INT
A18045CA  F8DF 7174		ldr r7, [pc, #+372] ; 0x30
A18045CE  F856 C007		ldr r12, [r6, +r7]
A18045D2  F8DF 716C		ldr r7, [pc, #+364] ; 0x30
A18045D6  F856 C007		ldr r12, [r6, +r7]
A18045DA  F89C 7000		ldrb r7, [r12]
A18045DE  4038     		and r0, r0, r7

#50				JMPCN	$label3	{LNXT:17|18|21}
(-) INT
A18045E0  2800     		cmp r0, #0
A18045E2  D00B     		beq #22 ; 0xA18045FC


#51		
#52				(* THEN *)
#53		
#54					(* Alarm_Val_FB^.0 := TRUE; *)
#55					MOVE		TRUE,Alarm_Val_FB^.0	{LNXT:18|21|-1}
(*) INT
A18045E6  2001     		mov r0, #1 ; 1
A18045E8  F8DF 7150		ldr r7, [pc, #+336] ; 0x2C
A18045EC  F856 C007		ldr r12, [r6, +r7]
A18045F0  F8BC 8000		ldrh r8, [r12]
A18045F4  F360 0800		bfi r8, r0, #0, #1
A18045F8  F8AC 8000		strh r8, [r12]

#56		
#57		$label3:
#58				(* END_IF *)
#59		
#60		
#61				(* IF o_val_close_R_FB^ AND NOT di_val_close_state_R_FB^ *)
#62				LD		di_val_close_state_R_FB^	{LNXT:21|-1|-1}
(*) UNDEF
A18045FC  F8DF 7138		ldr r7, [pc, #+312] ; 0x28
A1804600  F856 C007		ldr r12, [r6, +r7]
A1804604  F89C 0000		ldrb r0, [r12]

#63				NOT	{LNXT:21|-1|-1}
(*) BOOL
A1804608  2800     		cmp r0, #0
A180460A  BF08 2001		eqmov r0, #1
A180460E  BF18 2000		nemov r0, #0

#64				AND		o_val_close_R_FB^	{LNXT:21|-1|-1}
(*) BOOL
A1804612  F8DF 7130		ldr r7, [pc, #+304] ; 0x34
A1804616  F856 C007		ldr r12, [r6, +r7]
A180461A  F8DF 7128		ldr r7, [pc, #+296] ; 0x34
A180461E  F856 C007		ldr r12, [r6, +r7]
A1804622  F89C 7000		ldrb r7, [r12]
A1804626  4038     		and r0, r0, r7

#65				JMPCN	$label4	{LNXT:21|22|25}
(-) BOOL
A1804628  2800     		cmp r0, #0
A180462A  D00B     		beq #22 ; 0xA1804644


#66		
#67				(* THEN *)
#68		
#69					(* Alarm_Val_FB^.1 := TRUE; *)
#70					MOVE		TRUE,Alarm_Val_FB^.1	{LNXT:22|25|-1}
(*) BOOL
A180462E  2001     		mov r0, #1 ; 1
A1804630  F8DF 7108		ldr r7, [pc, #+264] ; 0x2C
A1804634  F856 C007		ldr r12, [r6, +r7]
A1804638  F8BC 8000		ldrh r8, [r12]
A180463C  F360 0841		bfi r8, r0, #1, #1
A1804640  F8AC 8000		strh r8, [r12]

#71		
#72		$label4:
#73				(* END_IF *)
#74		
#75		
#76				(* IF o_val_open_fall_FB^ AND NOT di_val_open_state_fall_FB^ *)
#77				LD		di_val_open_state_fall_FB^	{LNXT:25|-1|-1}
(*) UNDEF
A1804644  F8DF 70E4		ldr r7, [pc, #+228] ; 0x1C
A1804648  F856 C007		ldr r12, [r6, +r7]
A180464C  F9BC 0000		ldrsh r0, [r12]

#78				NOT	{LNXT:25|-1|-1}
(-) INT
A1804650  43C0     		mvn r0, r0

#79				AND		o_val_open_fall_FB^	{LNXT:25|-1|-1}
(*) INT
A1804652  F8DF 70F4		ldr r7, [pc, #+244] ; 0x38
A1804656  F856 C007		ldr r12, [r6, +r7]
A180465A  F8DF 70EC		ldr r7, [pc, #+236] ; 0x38
A180465E  F856 C007		ldr r12, [r6, +r7]
A1804662  F89C 7000		ldrb r7, [r12]
A1804666  4038     		and r0, r0, r7

#80				JMPCN	$label5	{LNXT:25|26|29}
(-) INT
A1804668  2800     		cmp r0, #0
A180466A  D00B     		beq #22 ; 0xA1804684


#81		
#82				(* THEN *)
#83		
#84					(* Alarm_Val_FB^.2 := TRUE; *)
#85					MOVE		TRUE,Alarm_Val_FB^.2	{LNXT:26|29|-1}
(*) INT
A180466E  2001     		mov r0, #1 ; 1
A1804670  F8DF 70C8		ldr r7, [pc, #+200] ; 0x2C
A1804674  F856 C007		ldr r12, [r6, +r7]
A1804678  F8BC 8000		ldrh r8, [r12]
A180467C  F360 0882		bfi r8, r0, #2, #1
A1804680  F8AC 8000		strh r8, [r12]

#86		
#87		$label5:
#88				(* END_IF *)
#89		
#90		
#91				(* IF o_val_close_fall_FB^ AND NOT di_val_close_state_fall_FB^ *)
#92				LD		di_val_close_state_fall_FB^	{LNXT:29|-1|-1}
(*) UNDEF
A1804684  F8DF 70A8		ldr r7, [pc, #+168] ; 0x20
A1804688  F856 C007		ldr r12, [r6, +r7]
A180468C  F9BC 0000		ldrsh r0, [r12]

#93				NOT	{LNXT:29|-1|-1}
(-) INT
A1804690  43C0     		mvn r0, r0

#94				AND		o_val_close_fall_FB^	{LNXT:29|-1|-1}
(*) INT
A1804692  F8DF 70B8		ldr r7, [pc, #+184] ; 0x3C
A1804696  F856 C007		ldr r12, [r6, +r7]
A180469A  F8DF 70B0		ldr r7, [pc, #+176] ; 0x3C
A180469E  F856 C007		ldr r12, [r6, +r7]
A18046A2  F89C 7000		ldrb r7, [r12]
A18046A6  4038     		and r0, r0, r7

#95				JMPCN	$label6	{LNXT:29|30|34}
(-) INT
A18046A8  2800     		cmp r0, #0
A18046AA  D00B     		beq #22 ; 0xA18046C4


#96		
#97				(* THEN *)
#98		
#99					(* Alarm_Val_FB^.3 := TRUE; *)
#100					MOVE		TRUE,Alarm_Val_FB^.3	{LNXT:30|34|-1}
(*) INT
A18046AE  2001     		mov r0, #1 ; 1
A18046B0  F8DF 7088		ldr r7, [pc, #+136] ; 0x2C
A18046B4  F856 C007		ldr r12, [r6, +r7]
A18046B8  F8BC 8000		ldrh r8, [r12]
A18046BC  F360 08C3		bfi r8, r0, #3, #1
A18046C0  F8AC 8000		strh r8, [r12]

#101		
#102		$label6:
#103				(* END_IF *)
#104		
#105		
#106				(* IF Alarm_Val_FB^ > 0 *)
#107				LD		Alarm_Val_FB^	{LNXT:34|-1|-1}
(*) UNDEF
A18046C4  F8DF 7074		ldr r7, [pc, #+116] ; 0x2C
A18046C8  F856 C007		ldr r12, [r6, +r7]
A18046CC  F8BC 0000		ldrh r0, [r12]

#108				GT		0	{LNXT:34|-1|-1}
(*) WORD
A18046D0  2800     		cmp r0, #0
A18046D2  BFD8 2000		lemov r0, #0
A18046D6  BFC8 2001		gtmov r0, #1

#109				JMPCN	$label7	{LNXT:34|35|38}
(-) BOOL
A18046DA  2800     		cmp r0, #0
A18046DC  D004     		beq #8 ; 0xA18046E8


#110		
#111				(* THEN *)
#112		
#113					(* isOK := FALSE; *)
#114					MOVE		FALSE,isOK	{LNXT:35|38|-1}
(*) BOOL
A18046E0  2000     		mov r0, #0 ; 0
A18046E2  F8DF 7044		ldr r7, [pc, #+68] ; 0x19
A18046E6  55F0     		strb r0, [r6, +r7]

#115		
#116		$label7:
#117				(* END_IF *)
#118		
#119				(* is_check_done := TRUE; *)
#120				MOVE		TRUE,is_check_done	{LNXT:38|41|-1}
(*) BOOL
A18046E8  2001     		mov r0, #1 ; 1
A18046EA  F8DF 7038		ldr r7, [pc, #+56] ; 0x18
A18046EE  55F0     		strb r0, [r6, +r7]

#121		
#122		$label2:
#123			(* END_IF *)
#124		
#125			(* check_timer *)
#126			CAL		check_timer	{LNXT:41|-1|-1}
(*) BOOL
A18046F0  E92D 0021		stmdb sp!, { r0, r5 }
A18046F4  F8DF 701C		ldr r7, [pc, #+28] ; 0x4
A18046F8  19F5     		add r5, r6, r7
A18046FA  F8DF 4014		ldr r4, [pc, #+20] ; 0xA1804490
A18046FE  F044 0401		orr r4, r4, #1
A1804702  47A0     		blx r4
A1804704  E8BD 0021		ldmia sp!, { r0, r5 }

A1804708  E8BD 4040		ldmia sp!, { r6, lr }

A180470C  4770     		bx lr

A1804710  A1804490		; 0xA1804490
A1804714  00000004		; 0x00000004
A1804718  00000008		; 0x00000008
A180471C  0000000C		; 0x0000000C
A1804720  00000010		; 0x00000010
A1804724  00000018		; 0x00000018
A1804728  00000019		; 0x00000019
A180472C  0000001C		; 0x0000001C
A1804730  00000020		; 0x00000020
A1804734  00000024		; 0x00000024
A1804738  00000028		; 0x00000028
A180473C  0000002C		; 0x0000002C
A1804740  00000030		; 0x00000030
A1804744  00000034		; 0x00000034
A1804748  00000038		; 0x00000038
A180474C  0000003C		; 0x0000003C
A1804750  00000040		; 0x00000040
A1804754  00002710		; 0x00002710


Frame allocation (hex):

	0000 bit  0: VAR should_run_timer
	0004       : FB check_timer
	0018 bit  0: VAR is_check_done
	0019 bit  0: VAR isOK
	001C       : VAR di_val_open_state_fall_FB
	0020       : VAR di_val_close_state_fall_FB
	0024       : VAR di_val_open_state_R_FB
	0028       : VAR di_val_close_state_R_FB
	002C       : VAR Alarm_Val_FB
	0030       : VAR o_val_open_R_FB
	0034       : VAR o_val_close_R_FB
	0038       : VAR o_val_open_fall_FB
	003C       : VAR o_val_close_fall_FB
	0040       : VAR start_check

END_FUNCTION_BLOCK
**************************************************
	List function block: CheckWashAndStart
**************************************************

FUNCTION_BLOCK CheckWashAndStart

        VAR_IN_OUT
sv_washing_FB : BOOL^;
o_val_open_R_FB : BOOL^;
o_val_close_R_FB : BOOL^;
o_val_open_fall_FB : BOOL^;
o_val_close_fall_FB : BOOL^;
q_start_ats_FB : BOOL^;
ep_time_wash_FB : INT^;
i_val_state_FB : INT^;
di_val_open_state_fall_FB : INT^;
di_val_close_state_fall_FB : INT^;
di_val_open_state_R_FB : INT^;
di_val_close_state_R_FB : BOOL^;
Alarm_Val_FB : WORD^;
	END_VAR

        VAR_OUTPUT
is_running_wash : BOOL;
	END_VAR

        VAR
washing_timer : TON;	{ DE:"локальний FB таймера" }
onWash : BOOL;
checkAlarmVal : CheckAlarmVal;
valve_rising : BOOL;
prev_val_open_fall : BOOL;
prev_val_close_fall : BOOL;
prev_val_open_R : BOOL;
prev_val_close_R : BOOL;
finish_val_rising : BOOL;
	END_VAR

END_FUNCTION_BLOCK

A1804758  E92D 4040		stmdb sp!, { r6, lr }
A180475C  462E     		mov r6, r5

#0		{SRC:CheckWashAndStart}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF sv_washing_FB^ and i_val_state_FB^=1 *)
#5			LD		i_val_state_FB^	{LNXT:1|-1|-1}
(*) UNDEF
A180475E  F8DF 75E4		ldr r7, [pc, #+1508] ; 0x80
A1804762  F856 C007		ldr r12, [r6, +r7]
A1804766  F9BC 0000		ldrsh r0, [r12]

#6			EQ		1	{LNXT:1|-1|-1}
(*) INT
A180476A  2801     		cmp r0, #1
A180476C  BF18 2000		nemov r0, #0
A1804770  BF08 2001		eqmov r0, #1

#7			AND		sv_washing_FB^	{LNXT:1|-1|-1}
(*) BOOL
A1804774  F8DF 75B0		ldr r7, [pc, #+1456] ; 0x64
A1804778  F856 C007		ldr r12, [r6, +r7]
A180477C  F8DF 75A8		ldr r7, [pc, #+1448] ; 0x64
A1804780  F856 C007		ldr r12, [r6, +r7]
A1804784  F89C 7000		ldrb r7, [r12]
A1804788  4038     		and r0, r0, r7

#8			JMPCN	$label0	{LNXT:1|2|4}
(-) BOOL
A180478A  2800     		cmp r0, #0
A180478C  D006     		beq #12 ; 0xA180479C


#9		
#10			(* THEN *)
#11		
#12				(* onWash :=true; *)
#13				MOVE		true,onWash	{LNXT:2|7|-1}
(*) BOOL
A1804790  2001     		mov r0, #1 ; 1
A1804792  F8DF 753C		ldr r7, [pc, #+1340] ; 0x14
A1804796  55F0     		strb r0, [r6, +r7]

#14				JMP		$label1	{LNXT:1|2|4}
(-) BOOL
A1804798  E004     		b #8 ; 0xA18047A4


#15		$label0:
#16		
#17			(* ELSE *)
#18		
#19				(* onWash :=false; *)
#20				MOVE		false,onWash	{LNXT:4|7|-1}
(*) BOOL
A180479C  2000     		mov r0, #0 ; 0
A180479E  F8DF 7530		ldr r7, [pc, #+1328] ; 0x14
A18047A2  55F0     		strb r0, [r6, +r7]

#21		
#22		$label1:
#23			(* END_IF *)
#24		
#25		
#26			(* IF onWash *)
#27			LD		onWash	{LNXT:7|-1|-1}
(*) UNDEF
A18047A4  F8DF 7528		ldr r7, [pc, #+1320] ; 0x14
A18047A8  5DF0     		ldrb r0, [r6, +r7]

#28			JMPCN	$label2	{LNXT:7|10|53}
(-) BOOL
A18047AA  2800     		cmp r0, #0
A18047AC  F000 8121		beq #578 ; 0xA18049F2


#29		
#30			(* THEN *)
#31		
#32				(* is_running_wash :=true; *)
#33				MOVE		true,is_running_wash	{LNXT:10|12|-1}
(*) BOOL
A18047B0  2001     		mov r0, #1 ; 1
A18047B2  F8DF 7570		ldr r7, [pc, #+1392] ; 0x62
A18047B6  55F0     		strb r0, [r6, +r7]

#34		
#35				(* prev_val_open_fall:=o_val_open_fall_FB^; *)
#36				MOVE		o_val_open_fall_FB^,prev_val_open_fall	{LNXT:12|13|-1}
(*) BOOL
A18047B8  F8DF 7578		ldr r7, [pc, #+1400] ; 0x70
A18047BC  F856 C007		ldr r12, [r6, +r7]
A18047C0  F89C 0000		ldrb r0, [r12]
A18047C4  F8DF 7548		ldr r7, [pc, #+1352] ; 0x5D
A18047C8  55F0     		strb r0, [r6, +r7]

#37		
#38				(* prev_val_close_fall:=o_val_close_fall_FB^; *)
#39				MOVE		o_val_close_fall_FB^,prev_val_close_fall	{LNXT:13|14|-1}
(*) BOOL
A18047CA  F8DF 756C		ldr r7, [pc, #+1388] ; 0x74
A18047CE  F856 C007		ldr r12, [r6, +r7]
A18047D2  F89C 0000		ldrb r0, [r12]
A18047D6  F8DF 753C		ldr r7, [pc, #+1340] ; 0x5E
A18047DA  55F0     		strb r0, [r6, +r7]

#40		
#41				(* prev_val_open_R:=o_val_open_R_FB^; *)
#42				MOVE		o_val_open_R_FB^,prev_val_open_R	{LNXT:14|15|-1}
(*) BOOL
A18047DC  F8DF 754C		ldr r7, [pc, #+1356] ; 0x68
A18047E0  F856 C007		ldr r12, [r6, +r7]
A18047E4  F89C 0000		ldrb r0, [r12]
A18047E8  F8DF 752C		ldr r7, [pc, #+1324] ; 0x5F
A18047EC  55F0     		strb r0, [r6, +r7]

#43		
#44				(* prev_val_close_R:=o_val_close_R_FB^; *)
#45				MOVE		o_val_close_R_FB^,prev_val_close_R	{LNXT:15|17|-1}
(*) BOOL
A18047EE  F8DF 7540		ldr r7, [pc, #+1344] ; 0x6C
A18047F2  F856 C007		ldr r12, [r6, +r7]
A18047F6  F89C 0000		ldrb r0, [r12]
A18047FA  F8DF 7520		ldr r7, [pc, #+1312] ; 0x60
A18047FE  55F0     		strb r0, [r6, +r7]

#46		
#47				(* o_val_close_R_FB^:=true; *)
#48				MOVE		true,o_val_close_R_FB^	{LNXT:17|18|-1}
(*) BOOL
A1804800  2001     		mov r0, #1 ; 1
A1804802  F8DF 752C		ldr r7, [pc, #+1324] ; 0x6C
A1804806  F856 C007		ldr r12, [r6, +r7]
A180480A  F88C 0000		strb r0, [r12]

#49		
#50				(* o_val_open_R_FB^:=false; *)
#51				MOVE		false,o_val_open_R_FB^	{LNXT:18|19|-1}
(*) BOOL
A180480E  2000     		mov r0, #0 ; 0
A1804810  F8DF 7518		ldr r7, [pc, #+1304] ; 0x68
A1804814  F856 C007		ldr r12, [r6, +r7]
A1804818  F88C 0000		strb r0, [r12]

#52		
#53				(* o_val_open_fall_FB^:=true; *)
#54				MOVE		true,o_val_open_fall_FB^	{LNXT:19|20|-1}
(*) BOOL
A180481C  2001     		mov r0, #1 ; 1
A180481E  F8DF 7514		ldr r7, [pc, #+1300] ; 0x70
A1804822  F856 C007		ldr r12, [r6, +r7]
A1804826  F88C 0000		strb r0, [r12]

#55		
#56				(* o_val_close_fall_FB^:=false; *)
#57				MOVE		false,o_val_close_fall_FB^	{LNXT:20|22|-1}
(*) BOOL
A180482A  2000     		mov r0, #0 ; 0
A180482C  F8DF 7508		ldr r7, [pc, #+1288] ; 0x74
A1804830  F856 C007		ldr r12, [r6, +r7]
A1804834  F88C 0000		strb r0, [r12]

#58		
#59				(* valve_rising :=
#60		    (o_val_open_fall_FB^ AND NOT prev_val_open_fall) OR
#61			(o_val_close_fall_FB^ AND NOT prev_val_close_fall) OR
#62			(o_val_open_R_FB^ AND NOT prev_val_open_R) OR
#63			(o_val_close_R_FB^ AND NOT prev_val_close_R); *)
#64				LD		prev_val_close_R	{LNXT:22|30|-1}
(*) UNDEF
A1804838  F8DF 74E0		ldr r7, [pc, #+1248] ; 0x60
A180483C  5DF0     		ldrb r0, [r6, +r7]

#65				NOT	{LNXT:22|30|-1}
(*) BOOL
A180483E  2800     		cmp r0, #0
A1804840  BF08 2001		eqmov r0, #1
A1804844  BF18 2000		nemov r0, #0

#66				AND		o_val_close_R_FB^	{LNXT:22|30|-1}
(*) BOOL
A1804848  F8DF 74E4		ldr r7, [pc, #+1252] ; 0x6C
A180484C  F856 C007		ldr r12, [r6, +r7]
A1804850  F8DF 74DC		ldr r7, [pc, #+1244] ; 0x6C
A1804854  F856 C007		ldr r12, [r6, +r7]
A1804858  F89C 7000		ldrb r7, [r12]
A180485C  4038     		and r0, r0, r7

#67				OR(		prev_val_open_R	{LNXT:22|30|-1}
(*) BOOL
A180485E  B082     		sub sp, sp, #8
A1804860  F8CD 0000		str r0, [sp]
A1804864  F8DF 74B0		ldr r7, [pc, #+1200] ; 0x5F
A1804868  5DF0     		ldrb r0, [r6, +r7]

#68				NOT	{LNXT:22|30|-1}
(*) BOOL
A180486A  2800     		cmp r0, #0
A180486C  BF08 2001		eqmov r0, #1
A1804870  BF18 2000		nemov r0, #0

#69				AND		o_val_open_R_FB^	{LNXT:22|30|-1}
(*) BOOL
A1804874  F8DF 74B4		ldr r7, [pc, #+1204] ; 0x68
A1804878  F856 C007		ldr r12, [r6, +r7]
A180487C  F8DF 74AC		ldr r7, [pc, #+1196] ; 0x68
A1804880  F856 C007		ldr r12, [r6, +r7]
A1804884  F89C 7000		ldrb r7, [r12]
A1804888  4038     		and r0, r0, r7

#70				OR(		prev_val_close_fall	{LNXT:22|30|-1}
(*) BOOL
A180488A  B082     		sub sp, sp, #8
A180488C  F8CD 0000		str r0, [sp]
A1804890  F8DF 7480		ldr r7, [pc, #+1152] ; 0x5E
A1804894  5DF0     		ldrb r0, [r6, +r7]

#71				NOT	{LNXT:22|30|-1}
(*) BOOL
A1804896  2800     		cmp r0, #0
A1804898  BF08 2001		eqmov r0, #1
A180489C  BF18 2000		nemov r0, #0

#72				AND		o_val_close_fall_FB^	{LNXT:22|30|-1}
(*) BOOL
A18048A0  F8DF 7494		ldr r7, [pc, #+1172] ; 0x74
A18048A4  F856 C007		ldr r12, [r6, +r7]
A18048A8  F8DF 748C		ldr r7, [pc, #+1164] ; 0x74
A18048AC  F856 C007		ldr r12, [r6, +r7]
A18048B0  F89C 7000		ldrb r7, [r12]
A18048B4  4038     		and r0, r0, r7

#73				OR(		prev_val_open_fall	{LNXT:22|30|-1}
(*) BOOL
A18048B6  B082     		sub sp, sp, #8
A18048B8  F8CD 0000		str r0, [sp]
A18048BC  F8DF 7450		ldr r7, [pc, #+1104] ; 0x5D
A18048C0  5DF0     		ldrb r0, [r6, +r7]

#74				NOT	{LNXT:22|30|-1}
(*) BOOL
A18048C2  2800     		cmp r0, #0
A18048C4  BF08 2001		eqmov r0, #1
A18048C8  BF18 2000		nemov r0, #0

#75				AND		o_val_open_fall_FB^	{LNXT:22|30|-1}
(*) BOOL
A18048CC  F8DF 7464		ldr r7, [pc, #+1124] ; 0x70
A18048D0  F856 C007		ldr r12, [r6, +r7]
A18048D4  F8DF 745C		ldr r7, [pc, #+1116] ; 0x70
A18048D8  F856 C007		ldr r12, [r6, +r7]
A18048DC  F89C 7000		ldrb r7, [r12]
A18048E0  4038     		and r0, r0, r7

#76				)	{LNXT:22|30|-1}
(*) BOOL
A18048E2  4607     		mov r7, r0
A18048E4  F8DD 0000		ldr r0, [sp]
A18048E8  B002     		add sp, sp, #8
A18048EA  4338     		orr r0, r0, r7

#77				)	{LNXT:22|30|-1}
(*) BOOL
A18048EC  4607     		mov r7, r0
A18048EE  F8DD 0000		ldr r0, [sp]
A18048F2  B002     		add sp, sp, #8
A18048F4  4338     		orr r0, r0, r7

#78				)	{LNXT:22|30|-1}
(*) BOOL
A18048F6  4607     		mov r7, r0
A18048F8  F8DD 0000		ldr r0, [sp]
A18048FC  B002     		add sp, sp, #8
A18048FE  4338     		orr r0, r0, r7

#79				ST		valve_rising	{LNXT:22|30|-1}
(*) BOOL
A1804900  F8DF 7408		ldr r7, [pc, #+1032] ; 0x5C
A1804904  55F0     		strb r0, [r6, +r7]

#80		
#81				(* checkAlarmVal *)
#82				MOVE		di_val_open_state_fall_FB,checkAlarmVal.di_val_open_state_fall_FB	{LNXT:30|-1|-1}
(*) BOOL
A1804906  F8DF 7440		ldr r7, [pc, #+1088] ; 0x84
A180490A  F856 C007		ldr r12, [r6, +r7]
A180490E  4660     		mov r0, r12
A1804910  F8DF 73D0		ldr r7, [pc, #+976] ; 0x34
A1804914  51F0     		str r0, [r6, +r7]

#83				MOVE		di_val_close_state_fall_FB,checkAlarmVal.di_val_close_state_fall_FB	{LNXT:30|-1|-1}
(*) INT^
A1804916  F8DF 7434		ldr r7, [pc, #+1076] ; 0x88
A180491A  F856 C007		ldr r12, [r6, +r7]
A180491E  4660     		mov r0, r12
A1804920  F8DF 73C4		ldr r7, [pc, #+964] ; 0x38
A1804924  51F0     		str r0, [r6, +r7]

#84				MOVE		di_val_open_state_R_FB,checkAlarmVal.di_val_open_state_R_FB	{LNXT:31|-1|-1}
(*) INT^
A1804926  F8DF 7428		ldr r7, [pc, #+1064] ; 0x8C
A180492A  F856 C007		ldr r12, [r6, +r7]
A180492E  4660     		mov r0, r12
A1804930  F8DF 73B8		ldr r7, [pc, #+952] ; 0x3C
A1804934  51F0     		str r0, [r6, +r7]

#85				MOVE		di_val_close_state_R_FB,checkAlarmVal.di_val_close_state_R_FB	{LNXT:32|-1|-1}
(*) INT^
A1804936  F8DF 741C		ldr r7, [pc, #+1052] ; 0x90
A180493A  F856 C007		ldr r12, [r6, +r7]
A180493E  4660     		mov r0, r12
A1804940  F8DF 73AC		ldr r7, [pc, #+940] ; 0x40
A1804944  51F0     		str r0, [r6, +r7]

#86				MOVE		Alarm_Val_FB,checkAlarmVal.Alarm_Val_FB	{LNXT:33|-1|-1}
(*) BOOL^
A1804946  F8DF 7410		ldr r7, [pc, #+1040] ; 0x94
A180494A  F856 C007		ldr r12, [r6, +r7]
A180494E  4660     		mov r0, r12
A1804950  F8DF 73A0		ldr r7, [pc, #+928] ; 0x44
A1804954  51F0     		str r0, [r6, +r7]

#87				MOVE		o_val_open_R_FB,checkAlarmVal.o_val_open_R_FB	{LNXT:34|-1|-1}
(*) WORD^
A1804956  F8DF 73D4		ldr r7, [pc, #+980] ; 0x68
A180495A  F856 C007		ldr r12, [r6, +r7]
A180495E  4660     		mov r0, r12
A1804960  F8DF 7394		ldr r7, [pc, #+916] ; 0x48
A1804964  51F0     		str r0, [r6, +r7]

#88				MOVE		o_val_close_R_FB,checkAlarmVal.o_val_close_R_FB	{LNXT:35|-1|-1}
(*) BOOL^
A1804966  F8DF 73C8		ldr r7, [pc, #+968] ; 0x6C
A180496A  F856 C007		ldr r12, [r6, +r7]
A180496E  4660     		mov r0, r12
A1804970  F8DF 7388		ldr r7, [pc, #+904] ; 0x4C
A1804974  51F0     		str r0, [r6, +r7]

#89				MOVE		o_val_open_fall_FB,checkAlarmVal.o_val_open_fall_FB	{LNXT:36|-1|-1}
(*) BOOL^
A1804976  F8DF 73BC		ldr r7, [pc, #+956] ; 0x70
A180497A  F856 C007		ldr r12, [r6, +r7]
A180497E  4660     		mov r0, r12
A1804980  F8DF 737C		ldr r7, [pc, #+892] ; 0x50
A1804984  51F0     		str r0, [r6, +r7]

#90				MOVE		o_val_close_fall_FB,checkAlarmVal.o_val_close_fall_FB	{LNXT:37|-1|-1}
(*) BOOL^
A1804986  F8DF 73B0		ldr r7, [pc, #+944] ; 0x74
A180498A  F856 C007		ldr r12, [r6, +r7]
A180498E  4660     		mov r0, r12
A1804990  F8DF 7370		ldr r7, [pc, #+880] ; 0x54
A1804994  51F0     		str r0, [r6, +r7]

#91				MOVE		valve_rising,checkAlarmVal.start_check	{LNXT:38|-1|-1}
(*) BOOL^
A1804996  F8DF 7374		ldr r7, [pc, #+884] ; 0x5C
A180499A  19F0     		add r0, r6, r7
A180499C  F8DF 7368		ldr r7, [pc, #+872] ; 0x58
A18049A0  51F0     		str r0, [r6, +r7]

#92				CAL		checkAlarmVal	{LNXT:30|43|-1}
(*) BOOL^
A18049A2  E92D 0021		stmdb sp!, { r0, r5 }
A18049A6  F8DF 732C		ldr r7, [pc, #+812] ; 0x18
A18049AA  19F5     		add r5, r6, r7
A18049AC  F8DF 4310		ldr r4, [pc, #+784] ; 0xA1804530
A18049B0  F044 0401		orr r4, r4, #1
A18049B4  47A0     		blx r4
A18049B6  E8BD 0021		ldmia sp!, { r0, r5 }

#93		
#94		
#95				(* IF checkAlarmVal.is_check_done and checkAlarmVal.isOK *)
#96				LD		checkAlarmVal.is_check_done	{LNXT:43|-1|-1}
(*) UNDEF
A18049BA  F8DF 7320		ldr r7, [pc, #+800] ; 0x30
A18049BE  5DF0     		ldrb r0, [r6, +r7]

#97				AND		checkAlarmVal.isOK	{LNXT:43|-1|-1}
(*) BOOL
A18049C0  F8DF 731C		ldr r7, [pc, #+796] ; 0x31
A18049C4  5DF7     		ldrb r7, [r6, +r7]
A18049C6  4038     		and r0, r0, r7

#98				JMPCN	$label4	{LNXT:43|44|47}
(-) BOOL
A18049C8  2800     		cmp r0, #0
A18049CA  D009     		beq #18 ; 0xA18049E0


#99		
#100				(* THEN *)
#101		
#102					(* q_start_ats_FB^:=true; *)
#103					MOVE		true,q_start_ats_FB^	{LNXT:44|57|-1}
(*) BOOL
A18049CE  2001     		mov r0, #1 ; 1
A18049D0  F8DF 7368		ldr r7, [pc, #+872] ; 0x78
A18049D4  F856 C007		ldr r12, [r6, +r7]
A18049D8  F88C 0000		strb r0, [r12]

#104					JMP		$label5	{LNXT:43|44|47}
(-) BOOL
A18049DC  E007     		b #14 ; 0xA18049EE


#105		$label4:
#106		
#107				(* ELSE *)
#108		
#109					(* q_start_ats_FB^:=false; *)
#110					MOVE		false,q_start_ats_FB^	{LNXT:47|57|-1}
(*) BOOL
A18049E0  2000     		mov r0, #0 ; 0
A18049E2  F8DF 7358		ldr r7, [pc, #+856] ; 0x78
A18049E6  F856 C007		ldr r12, [r6, +r7]
A18049EA  F88C 0000		strb r0, [r12]

#111		
#112		$label5:
#113				(* END_IF *)
#114				JMP		$label3	{LNXT:7|10|53}
(-) BOOL
A18049EE  E007     		b #14 ; 0xA1804A00


#115		$label2:
#116		
#117			(* ELSE *)
#118		
#119				(* q_start_ats_FB^:=true; *)
#120				MOVE		true,q_start_ats_FB^	{LNXT:53|57|-1}
(*) BOOL
A18049F2  2001     		mov r0, #1 ; 1
A18049F4  F8DF 7344		ldr r7, [pc, #+836] ; 0x78
A18049F8  F856 C007		ldr r12, [r6, +r7]
A18049FC  F88C 0000		strb r0, [r12]

#121		
#122		$label3:
#123			(* END_IF *)
#124		
#125		
#126			(* IF washing_timer.Q *)
#127			LD		washing_timer.Q	{LNXT:57|-1|-1}
(*) UNDEF
A1804A00  F8DF 72C8		ldr r7, [pc, #+712] ; 0xC
A1804A04  5DF0     		ldrb r0, [r6, +r7]

#128			JMPCN	$label6	{LNXT:57|60|93}
(-) BOOL
A1804A06  2800     		cmp r0, #0
A1804A08  F000 80B1		beq #354 ; 0xA1804B6E


#129		
#130			(* THEN *)
#131		
#132				(* prev_val_open_fall:=o_val_open_fall_FB^; *)
#133				MOVE		o_val_open_fall_FB^,prev_val_open_fall	{LNXT:60|61|-1}
(*) BOOL
A1804A0C  F8DF 7324		ldr r7, [pc, #+804] ; 0x70
A1804A10  F856 C007		ldr r12, [r6, +r7]
A1804A14  F89C 0000		ldrb r0, [r12]
A1804A18  F8DF 72F4		ldr r7, [pc, #+756] ; 0x5D
A1804A1C  55F0     		strb r0, [r6, +r7]

#134		
#135				(* prev_val_close_fall:=o_val_close_fall_FB^; *)
#136				MOVE		o_val_close_fall_FB^,prev_val_close_fall	{LNXT:61|62|-1}
(*) BOOL
A1804A1E  F8DF 7318		ldr r7, [pc, #+792] ; 0x74
A1804A22  F856 C007		ldr r12, [r6, +r7]
A1804A26  F89C 0000		ldrb r0, [r12]
A1804A2A  F8DF 72E8		ldr r7, [pc, #+744] ; 0x5E
A1804A2E  55F0     		strb r0, [r6, +r7]

#137		
#138				(* prev_val_open_R:=o_val_open_R_FB^; *)
#139				MOVE		o_val_open_R_FB^,prev_val_open_R	{LNXT:62|63|-1}
(*) BOOL
A1804A30  F8DF 72F8		ldr r7, [pc, #+760] ; 0x68
A1804A34  F856 C007		ldr r12, [r6, +r7]
A1804A38  F89C 0000		ldrb r0, [r12]
A1804A3C  F8DF 72D8		ldr r7, [pc, #+728] ; 0x5F
A1804A40  55F0     		strb r0, [r6, +r7]

#140		
#141				(* prev_val_close_R:=o_val_close_R_FB^; *)
#142				MOVE		o_val_close_R_FB^,prev_val_close_R	{LNXT:63|66|-1}
(*) BOOL
A1804A42  F8DF 72EC		ldr r7, [pc, #+748] ; 0x6C
A1804A46  F856 C007		ldr r12, [r6, +r7]
A1804A4A  F89C 0000		ldrb r0, [r12]
A1804A4E  F8DF 72CC		ldr r7, [pc, #+716] ; 0x60
A1804A52  55F0     		strb r0, [r6, +r7]

#143		
#144				(* o_val_close_R_FB^:=false; *)
#145				MOVE		false,o_val_close_R_FB^	{LNXT:66|67|-1}
(*) BOOL
A1804A54  2000     		mov r0, #0 ; 0
A1804A56  F8DF 72D8		ldr r7, [pc, #+728] ; 0x6C
A1804A5A  F856 C007		ldr r12, [r6, +r7]
A1804A5E  F88C 0000		strb r0, [r12]

#146		
#147				(* o_val_open_fall_FB^:=false; *)
#148				MOVE		false,o_val_open_fall_FB^	{LNXT:67|69|-1}
(*) BOOL
A1804A62  2000     		mov r0, #0 ; 0
A1804A64  F8DF 72CC		ldr r7, [pc, #+716] ; 0x70
A1804A68  F856 C007		ldr r12, [r6, +r7]
A1804A6C  F88C 0000		strb r0, [r12]

#149		
#150				(* o_val_open_R_FB^:=true; *)
#151				MOVE		true,o_val_open_R_FB^	{LNXT:69|70|-1}
(*) BOOL
A1804A70  2001     		mov r0, #1 ; 1
A1804A72  F8DF 72B8		ldr r7, [pc, #+696] ; 0x68
A1804A76  F856 C007		ldr r12, [r6, +r7]
A1804A7A  F88C 0000		strb r0, [r12]

#152		
#153				(* o_val_close_fall_FB^:=true; *)
#154				MOVE		true,o_val_close_fall_FB^	{LNXT:70|72|-1}
(*) BOOL
A1804A7E  2001     		mov r0, #1 ; 1
A1804A80  F8DF 72B4		ldr r7, [pc, #+692] ; 0x74
A1804A84  F856 C007		ldr r12, [r6, +r7]
A1804A88  F88C 0000		strb r0, [r12]

#155		
#156				(* valve_rising :=
#157		    (o_val_open_fall_FB^ AND NOT prev_val_open_fall) OR
#158			(o_val_close_fall_FB^ AND NOT prev_val_close_fall) OR
#159			(o_val_open_R_FB^ AND NOT prev_val_open_R) OR
#160			(o_val_close_R_FB^ AND NOT prev_val_close_R); *)
#161				LD		prev_val_close_R	{LNXT:72|78|-1}
(*) UNDEF
A1804A8C  F8DF 728C		ldr r7, [pc, #+652] ; 0x60
A1804A90  5DF0     		ldrb r0, [r6, +r7]

#162				NOT	{LNXT:72|78|-1}
(*) BOOL
A1804A92  2800     		cmp r0, #0
A1804A94  BF08 2001		eqmov r0, #1
A1804A98  BF18 2000		nemov r0, #0

#163				AND		o_val_close_R_FB^	{LNXT:72|78|-1}
(*) BOOL
A1804A9C  F8DF 7290		ldr r7, [pc, #+656] ; 0x6C
A1804AA0  F856 C007		ldr r12, [r6, +r7]
A1804AA4  F8DF 7288		ldr r7, [pc, #+648] ; 0x6C
A1804AA8  F856 C007		ldr r12, [r6, +r7]
A1804AAC  F89C 7000		ldrb r7, [r12]
A1804AB0  4038     		and r0, r0, r7

#164				OR(		prev_val_open_R	{LNXT:72|78|-1}
(*) BOOL
A1804AB2  B082     		sub sp, sp, #8
A1804AB4  F8CD 0000		str r0, [sp]
A1804AB8  F8DF 725C		ldr r7, [pc, #+604] ; 0x5F
A1804ABC  5DF0     		ldrb r0, [r6, +r7]

#165				NOT	{LNXT:72|78|-1}
(*) BOOL
A1804ABE  2800     		cmp r0, #0
A1804AC0  BF08 2001		eqmov r0, #1
A1804AC4  BF18 2000		nemov r0, #0

#166				AND		o_val_open_R_FB^	{LNXT:72|78|-1}
(*) BOOL
A1804AC8  F8DF 7260		ldr r7, [pc, #+608] ; 0x68
A1804ACC  F856 C007		ldr r12, [r6, +r7]
A1804AD0  F8DF 7258		ldr r7, [pc, #+600] ; 0x68
A1804AD4  F856 C007		ldr r12, [r6, +r7]
A1804AD8  F89C 7000		ldrb r7, [r12]
A1804ADC  4038     		and r0, r0, r7

#167				OR(		prev_val_close_fall	{LNXT:72|78|-1}
(*) BOOL
A1804ADE  B082     		sub sp, sp, #8
A1804AE0  F8CD 0000		str r0, [sp]
A1804AE4  F8DF 722C		ldr r7, [pc, #+556] ; 0x5E
A1804AE8  5DF0     		ldrb r0, [r6, +r7]

#168				NOT	{LNXT:72|78|-1}
(*) BOOL
A1804AEA  2800     		cmp r0, #0
A1804AEC  BF08 2001		eqmov r0, #1
A1804AF0  BF18 2000		nemov r0, #0

#169				AND		o_val_close_fall_FB^	{LNXT:72|78|-1}
(*) BOOL
A1804AF4  F8DF 7240		ldr r7, [pc, #+576] ; 0x74
A1804AF8  F856 C007		ldr r12, [r6, +r7]
A1804AFC  F8DF 7238		ldr r7, [pc, #+568] ; 0x74
A1804B00  F856 C007		ldr r12, [r6, +r7]
A1804B04  F89C 7000		ldrb r7, [r12]
A1804B08  4038     		and r0, r0, r7

#170				OR(		prev_val_open_fall	{LNXT:72|78|-1}
(*) BOOL
A1804B0A  B082     		sub sp, sp, #8
A1804B0C  F8CD 0000		str r0, [sp]
A1804B10  F8DF 71FC		ldr r7, [pc, #+508] ; 0x5D
A1804B14  5DF0     		ldrb r0, [r6, +r7]

#171				NOT	{LNXT:72|78|-1}
(*) BOOL
A1804B16  2800     		cmp r0, #0
A1804B18  BF08 2001		eqmov r0, #1
A1804B1C  BF18 2000		nemov r0, #0

#172				AND		o_val_open_fall_FB^	{LNXT:72|78|-1}
(*) BOOL
A1804B20  F8DF 7210		ldr r7, [pc, #+528] ; 0x70
A1804B24  F856 C007		ldr r12, [r6, +r7]
A1804B28  F8DF 7208		ldr r7, [pc, #+520] ; 0x70
A1804B2C  F856 C007		ldr r12, [r6, +r7]
A1804B30  F89C 7000		ldrb r7, [r12]
A1804B34  4038     		and r0, r0, r7

#173				)	{LNXT:72|78|-1}
(*) BOOL
A1804B36  4607     		mov r7, r0
A1804B38  F8DD 0000		ldr r0, [sp]
A1804B3C  B002     		add sp, sp, #8
A1804B3E  4338     		orr r0, r0, r7

#174				)	{LNXT:72|78|-1}
(*) BOOL
A1804B40  4607     		mov r7, r0
A1804B42  F8DD 0000		ldr r0, [sp]
A1804B46  B002     		add sp, sp, #8
A1804B48  4338     		orr r0, r0, r7

#175				)	{LNXT:72|78|-1}
(*) BOOL
A1804B4A  4607     		mov r7, r0
A1804B4C  F8DD 0000		ldr r0, [sp]
A1804B50  B002     		add sp, sp, #8
A1804B52  4338     		orr r0, r0, r7

#176				ST		valve_rising	{LNXT:72|78|-1}
(*) BOOL
A1804B54  F8DF 71B4		ldr r7, [pc, #+436] ; 0x5C
A1804B58  55F0     		strb r0, [r6, +r7]

#177		
#178		
#179				(* IF valve_rising *)
#180				LD		valve_rising	{LNXT:78|-1|-1}
(*) UNDEF
A1804B5A  F8DF 71B0		ldr r7, [pc, #+432] ; 0x5C
A1804B5E  5DF0     		ldrb r0, [r6, +r7]

#181				JMPCN	$label7	{LNXT:78|79|93}
(-) BOOL
A1804B60  2800     		cmp r0, #0
A1804B62  D004     		beq #8 ; 0xA1804B6E


#182		
#183				(* THEN *)
#184		
#185					(* finish_val_rising :=true; *)
#186					MOVE		true,finish_val_rising	{LNXT:79|93|-1}
(*) BOOL
A1804B66  2001     		mov r0, #1 ; 1
A1804B68  F8DF 71B4		ldr r7, [pc, #+436] ; 0x61
A1804B6C  55F0     		strb r0, [r6, +r7]

#187		
#188		$label7:
#189				(* END_IF *)
#190		
#191		$label6:
#192			(* END_IF *)
#193		
#194		
#195			(* IF finish_val_rising *)
#196			LD		finish_val_rising	{LNXT:93|-1|-1}
(*) UNDEF
A1804B6E  F8DF 71B0		ldr r7, [pc, #+432] ; 0x61
A1804B72  5DF0     		ldrb r0, [r6, +r7]

#197			JMPCN	$label8	{LNXT:93|94|98}
(-) BOOL
A1804B74  2800     		cmp r0, #0
A1804B76  D00B     		beq #22 ; 0xA1804B90


#198		
#199			(* THEN *)
#200		
#201				(* sv_washing_FB^:=false; *)
#202				MOVE		false,sv_washing_FB^	{LNXT:94|95|-1}
(*) BOOL
A1804B7A  2000     		mov r0, #0 ; 0
A1804B7C  F8DF 71A8		ldr r7, [pc, #+424] ; 0x64
A1804B80  F856 C007		ldr r12, [r6, +r7]
A1804B84  F88C 0000		strb r0, [r12]

#203		
#204				(* onWash :=false; *)
#205				MOVE		false,onWash	{LNXT:95|98|-1}
(*) BOOL
A1804B88  2000     		mov r0, #0 ; 0
A1804B8A  F8DF 7144		ldr r7, [pc, #+324] ; 0x14
A1804B8E  55F0     		strb r0, [r6, +r7]

#206		
#207		$label8:
#208			(* END_IF *)
#209		
#210		
#211			(* IF checkAlarmVal.check_timer.Q *)
#212			LD		checkAlarmVal.check_timer.Q	{LNXT:98|-1|-1}
(*) UNDEF
A1804B90  F8DF 7144		ldr r7, [pc, #+324] ; 0x28
A1804B94  5DF0     		ldrb r0, [r6, +r7]

#213			JMPCN	$label9	{LNXT:98|100|106}
(-) BOOL
A1804B96  2800     		cmp r0, #0
A1804B98  D004     		beq #8 ; 0xA1804BA4


#214		
#215			(* THEN *)
#216		
#217				(* is_running_wash :=false; *)
#218				MOVE		false,is_running_wash	{LNXT:100|106|-1}
(*) BOOL
A1804B9C  2000     		mov r0, #0 ; 0
A1804B9E  F8DF 7184		ldr r7, [pc, #+388] ; 0x62
A1804BA2  55F0     		strb r0, [r6, +r7]

#219		
#220		$label9:
#221			(* END_IF *)
#222		
#223			(* checkAlarmVal *)
#224			MOVE		di_val_open_state_fall_FB,checkAlarmVal.di_val_open_state_fall_FB	{LNXT:106|-1|-1}
(*) BOOL
A1804BA4  F8DF 71A0		ldr r7, [pc, #+416] ; 0x84
A1804BA8  F856 C007		ldr r12, [r6, +r7]
A1804BAC  4660     		mov r0, r12
A1804BAE  F8DF 7134		ldr r7, [pc, #+308] ; 0x34
A1804BB2  51F0     		str r0, [r6, +r7]

#225			MOVE		di_val_close_state_fall_FB,checkAlarmVal.di_val_close_state_fall_FB	{LNXT:106|-1|-1}
(*) INT^
A1804BB4  F8DF 7194		ldr r7, [pc, #+404] ; 0x88
A1804BB8  F856 C007		ldr r12, [r6, +r7]
A1804BBC  4660     		mov r0, r12
A1804BBE  F8DF 7128		ldr r7, [pc, #+296] ; 0x38
A1804BC2  51F0     		str r0, [r6, +r7]

#226			MOVE		di_val_open_state_R_FB,checkAlarmVal.di_val_open_state_R_FB	{LNXT:107|-1|-1}
(*) INT^
A1804BC4  F8DF 7188		ldr r7, [pc, #+392] ; 0x8C
A1804BC8  F856 C007		ldr r12, [r6, +r7]
A1804BCC  4660     		mov r0, r12
A1804BCE  F8DF 711C		ldr r7, [pc, #+284] ; 0x3C
A1804BD2  51F0     		str r0, [r6, +r7]

#227			MOVE		di_val_close_state_R_FB,checkAlarmVal.di_val_close_state_R_FB	{LNXT:108|-1|-1}
(*) INT^
A1804BD4  F8DF 717C		ldr r7, [pc, #+380] ; 0x90
A1804BD8  F856 C007		ldr r12, [r6, +r7]
A1804BDC  4660     		mov r0, r12
A1804BDE  F8DF 7110		ldr r7, [pc, #+272] ; 0x40
A1804BE2  51F0     		str r0, [r6, +r7]

#228			MOVE		Alarm_Val_FB,checkAlarmVal.Alarm_Val_FB	{LNXT:109|-1|-1}
(*) BOOL^
A1804BE4  F8DF 7170		ldr r7, [pc, #+368] ; 0x94
A1804BE8  F856 C007		ldr r12, [r6, +r7]
A1804BEC  4660     		mov r0, r12
A1804BEE  F8DF 7104		ldr r7, [pc, #+260] ; 0x44
A1804BF2  51F0     		str r0, [r6, +r7]

#229			MOVE		o_val_open_R_FB,checkAlarmVal.o_val_open_R_FB	{LNXT:110|-1|-1}
(*) WORD^
A1804BF4  F8DF 7134		ldr r7, [pc, #+308] ; 0x68
A1804BF8  F856 C007		ldr r12, [r6, +r7]
A1804BFC  4660     		mov r0, r12
A1804BFE  F8DF 70F8		ldr r7, [pc, #+248] ; 0x48
A1804C02  51F0     		str r0, [r6, +r7]

#230			MOVE		o_val_close_R_FB,checkAlarmVal.o_val_close_R_FB	{LNXT:111|-1|-1}
(*) BOOL^
A1804C04  F8DF 7128		ldr r7, [pc, #+296] ; 0x6C
A1804C08  F856 C007		ldr r12, [r6, +r7]
A1804C0C  4660     		mov r0, r12
A1804C0E  F8DF 70EC		ldr r7, [pc, #+236] ; 0x4C
A1804C12  51F0     		str r0, [r6, +r7]

#231			MOVE		o_val_open_fall_FB,checkAlarmVal.o_val_open_fall_FB	{LNXT:112|-1|-1}
(*) BOOL^
A1804C14  F8DF 711C		ldr r7, [pc, #+284] ; 0x70
A1804C18  F856 C007		ldr r12, [r6, +r7]
A1804C1C  4660     		mov r0, r12
A1804C1E  F8DF 70E0		ldr r7, [pc, #+224] ; 0x50
A1804C22  51F0     		str r0, [r6, +r7]

#232			MOVE		o_val_close_fall_FB,checkAlarmVal.o_val_close_fall_FB	{LNXT:113|-1|-1}
(*) BOOL^
A1804C24  F8DF 7110		ldr r7, [pc, #+272] ; 0x74
A1804C28  F856 C007		ldr r12, [r6, +r7]
A1804C2C  4660     		mov r0, r12
A1804C2E  F8DF 70D4		ldr r7, [pc, #+212] ; 0x54
A1804C32  51F0     		str r0, [r6, +r7]

#233			MOVE		finish_val_rising,checkAlarmVal.start_check	{LNXT:114|-1|-1}
(*) BOOL^
A1804C34  F8DF 70E8		ldr r7, [pc, #+232] ; 0x61
A1804C38  19F0     		add r0, r6, r7
A1804C3A  F8DF 70CC		ldr r7, [pc, #+204] ; 0x58
A1804C3E  51F0     		str r0, [r6, +r7]

#234			CAL		checkAlarmVal	{LNXT:106|117|-1}
(*) BOOL^
A1804C40  E92D 0021		stmdb sp!, { r0, r5 }
A1804C44  F8DF 708C		ldr r7, [pc, #+140] ; 0x18
A1804C48  19F5     		add r5, r6, r7
A1804C4A  F8DF 4074		ldr r4, [pc, #+116] ; 0xA1804530
A1804C4E  F044 0401		orr r4, r4, #1
A1804C52  47A0     		blx r4
A1804C54  E8BD 0021		ldmia sp!, { r0, r5 }

#235		
#236		
#237			(* IF finish_val_rising *)
#238			LD		finish_val_rising	{LNXT:117|-1|-1}
(*) UNDEF
A1804C58  F8DF 70C4		ldr r7, [pc, #+196] ; 0x61
A1804C5C  5DF0     		ldrb r0, [r6, +r7]

#239			JMPCN	$label10	{LNXT:117|118|121}
(-) BOOL
A1804C5E  2800     		cmp r0, #0
A1804C60  D004     		beq #8 ; 0xA1804C6C


#240		
#241			(* THEN *)
#242		
#243				(* finish_val_rising:=false; *)
#244				MOVE		false,finish_val_rising	{LNXT:118|121|-1}
(*) BOOL
A1804C64  2000     		mov r0, #0 ; 0
A1804C66  F8DF 70B8		ldr r7, [pc, #+184] ; 0x61
A1804C6A  55F0     		strb r0, [r6, +r7]

#245		
#246		$label10:
#247			(* END_IF *)
#248		
#249			(* washing_timer *)
#250			LD		onWash	{LNXT:121|-1|-1}
(*) UNDEF
A1804C6C  F8DF 7060		ldr r7, [pc, #+96] ; 0x14
A1804C70  5DF0     		ldrb r0, [r6, +r7]

#251			AND		q_start_ats_FB^	{LNXT:121|-1|-1}
(*) BOOL
A1804C72  F8DF 70C8		ldr r7, [pc, #+200] ; 0x78
A1804C76  F856 C007		ldr r12, [r6, +r7]
A1804C7A  F8DF 70C0		ldr r7, [pc, #+192] ; 0x78
A1804C7E  F856 C007		ldr r12, [r6, +r7]
A1804C82  F89C 7000		ldrb r7, [r12]
A1804C86  4038     		and r0, r0, r7

#252			ST		washing_timer.IN	{LNXT:121|-1|-1}
(*) BOOL
A1804C88  F8DF 7038		ldr r7, [pc, #+56] ; 0x4
A1804C8C  55F0     		strb r0, [r6, +r7]

#253			MOVE		ep_time_wash_FB^,washing_timer.PT	{LNXT:121|-1|-1}
(*) BOOL
A1804C8E  F8DF 70B0		ldr r7, [pc, #+176] ; 0x7C
A1804C92  F856 C007		ldr r12, [r6, +r7]
A1804C96  F9BC 0000		ldrsh r0, [r12]
A1804C9A  F8DF 702C		ldr r7, [pc, #+44] ; 0x8
A1804C9E  51F0     		str r0, [r6, +r7]

#254			CAL		washing_timer	{LNXT:121|-1|-1}
(*) UDINT
A1804CA0  E92D 0021		stmdb sp!, { r0, r5 }
A1804CA4  4635     		mov r5, r6
A1804CA6  F8DF 4014		ldr r4, [pc, #+20] ; 0xA1804490
A1804CAA  F044 0401		orr r4, r4, #1
A1804CAE  47A0     		blx r4
A1804CB0  E8BD 0021		ldmia sp!, { r0, r5 }

A1804CB4  E8BD 4040		ldmia sp!, { r6, lr }

A1804CB8  4770     		bx lr

A1804CBC  A1804490		; 0xA1804490
A1804CC0  A1804530		; 0xA1804530
A1804CC4  00000004		; 0x00000004
A1804CC8  00000008		; 0x00000008
A1804CCC  0000000C		; 0x0000000C
A1804CD0  00000014		; 0x00000014
A1804CD4  00000018		; 0x00000018
A1804CD8  00000028		; 0x00000028
A1804CDC  00000030		; 0x00000030
A1804CE0  00000031		; 0x00000031
A1804CE4  00000034		; 0x00000034
A1804CE8  00000038		; 0x00000038
A1804CEC  0000003C		; 0x0000003C
A1804CF0  00000040		; 0x00000040
A1804CF4  00000044		; 0x00000044
A1804CF8  00000048		; 0x00000048
A1804CFC  0000004C		; 0x0000004C
A1804D00  00000050		; 0x00000050
A1804D04  00000054		; 0x00000054
A1804D08  00000058		; 0x00000058
A1804D0C  0000005C		; 0x0000005C
A1804D10  0000005D		; 0x0000005D
A1804D14  0000005E		; 0x0000005E
A1804D18  0000005F		; 0x0000005F
A1804D1C  00000060		; 0x00000060
A1804D20  00000061		; 0x00000061
A1804D24  00000062		; 0x00000062
A1804D28  00000064		; 0x00000064
A1804D2C  00000068		; 0x00000068
A1804D30  0000006C		; 0x0000006C
A1804D34  00000070		; 0x00000070
A1804D38  00000074		; 0x00000074
A1804D3C  00000078		; 0x00000078
A1804D40  0000007C		; 0x0000007C
A1804D44  00000080		; 0x00000080
A1804D48  00000084		; 0x00000084
A1804D4C  00000088		; 0x00000088
A1804D50  0000008C		; 0x0000008C
A1804D54  00000090		; 0x00000090
A1804D58  00000094		; 0x00000094


Frame allocation (hex):

	0000       : FB washing_timer
	0014 bit  0: VAR onWash
	0018       : FB checkAlarmVal
	005C bit  0: VAR valve_rising
	005D bit  0: VAR prev_val_open_fall
	005E bit  0: VAR prev_val_close_fall
	005F bit  0: VAR prev_val_open_R
	0060 bit  0: VAR prev_val_close_R
	0061 bit  0: VAR finish_val_rising
	0062 bit  0: VAR is_running_wash
	0064       : VAR sv_washing_FB
	0068       : VAR o_val_open_R_FB
	006C       : VAR o_val_close_R_FB
	0070       : VAR o_val_open_fall_FB
	0074       : VAR o_val_close_fall_FB
	0078       : VAR q_start_ats_FB
	007C       : VAR ep_time_wash_FB
	0080       : VAR i_val_state_FB
	0084       : VAR di_val_open_state_fall_FB
	0088       : VAR di_val_close_state_fall_FB
	008C       : VAR di_val_open_state_R_FB
	0090       : VAR di_val_close_state_R_FB
	0094       : VAR Alarm_Val_FB

END_FUNCTION_BLOCK
**************************************************
	List program: ATS_mdb
**************************************************

PROGRAM ATS_mdb

        VAR
res_eta_lcr : UINT;
resp_eta_lcr : ARRAY[0..3] OF INT;
res : INT;
xTON : TON;
	END_VAR

END_PROGRAM

A1804D60  B082     		sub sp, sp, #8
A1804D62  F8CD E000		str lr, [sp]
A1804D66  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ATS_mdb}
#1		(*$WAITSWITCH$*)
#2		
#3			(* res := sysMbMRTU_FC03(	addr := 1, 
#4											base := 257, // 256
#5											no := 4, 
#6											object := ADR(resp_eta_lcr), 
#7											timeout := 200); *)
#8			ADR		resp_eta_lcr	{LNXT:2|8|-1}
(*) UDINT
A1804D6A  F8DF 0510		ldr r0, [pc, #+1296] ; 0xA1A0000C

#9			ST		$$TMP0	{LNXT:2|8|-1}
(*) @INT
A1804D6E  F8DF 751C		ldr r7, [pc, #+1308] ; 0xA1A00014
A1804D72  6038     		str r0, [r7]

#10			LDP0		1	{LNXT:2|8|-1}
(-) @INT
#11			sysMbMRTU_FC03		257, 4, $$TMP0, 200	{LNXT:2|8|-1}
(*) @INT
A1804D74  B082     		sub sp, sp, #8
A1804D76  2001     		mov r0, #1 ; 1
A1804D78  F8DF 7570		ldr r7, [pc, #+1392] ; 0x101
A1804D7C  4639     		mov r1, r7
A1804D7E  2704     		mov r7, #4 ; 4
A1804D80  463A     		mov r2, r7
A1804D82  F8DF 7508		ldr r7, [pc, #+1288] ; 0xA1A00014
A1804D86  683B     		ldr r3, [r7]
A1804D88  27C8     		mov r7, #200 ; 200
A1804D8A  F8CD 7000		str r7, [sp]
A1804D8E  F8DF 4564		ldr r4, [pc, #+1380] ; 0x241DB
A1804D92  F044 0401		orr r4, r4, #1
A1804D96  47A0     		blx r4
A1804D98  B002     		add sp, sp, #8

#12			ST		res	{LNXT:2|8|-1}
(*) UINT
A1804D9A  F8DF 74F4		ldr r7, [pc, #+1268] ; 0xA1A00018
A1804D9E  8038     		strh r0, [r7]

#13		
#14			(* ATS22_DUT.Ready 	:= to_bool(resp_eta_lcr[0] And 16#01); *)
#15			LD		resp_eta_lcr[0]	{LNXT:8|9|-1}
(*) UNDEF
A1804DA0  F8DF 74D8		ldr r7, [pc, #+1240] ; 0xA1A0000C
A1804DA4  F9B7 0000		ldrsh r0, [r7]

#16			AND		16#01	{LNXT:8|9|-1}
(*) INT
A1804DA8  2701     		mov r7, #1 ; 1
A1804DAA  4038     		and r0, r0, r7

#17			to_bool	{LNXT:8|9|-1}
(*) INT
A1804DAC  2800     		cmp r0, #0
A1804DAE  BF18 2001		nemov r0, #1
A1804DB2  BF08 2000		eqmov r0, #0

#18			ST		ATS22_DUT.Ready	{LNXT:8|9|-1}
(*) BOOL
A1804DB6  F8DF 74E4		ldr r7, [pc, #+1252] ; 0xA1A0001C
A1804DBA  7038     		strb r0, [r7]

#19		
#20			(* ATS22_DUT.On 		:= to_bool(resp_eta_lcr[0] And 16#02); *)
#21			LD		resp_eta_lcr[0]	{LNXT:9|10|-1}
(*) UNDEF
A1804DBC  F8DF 74BC		ldr r7, [pc, #+1212] ; 0xA1A0000C
A1804DC0  F9B7 0000		ldrsh r0, [r7]

#22			AND		16#02	{LNXT:9|10|-1}
(*) INT
A1804DC4  2702     		mov r7, #2 ; 2
A1804DC6  4038     		and r0, r0, r7

#23			to_bool	{LNXT:9|10|-1}
(*) INT
A1804DC8  2800     		cmp r0, #0
A1804DCA  BF18 2001		nemov r0, #1
A1804DCE  BF08 2000		eqmov r0, #0

#24			ST		ATS22_DUT.On	{LNXT:9|10|-1}
(*) BOOL
A1804DD2  F8DF 74CC		ldr r7, [pc, #+1228] ; 0xA1A0001D
A1804DD6  7038     		strb r0, [r7]

#25		
#26			(* ATS22_DUT.Trip 		:= to_bool(resp_eta_lcr[0] And 16#04); *)
#27			LD		resp_eta_lcr[0]	{LNXT:10|11|-1}
(*) UNDEF
A1804DD8  F8DF 74A0		ldr r7, [pc, #+1184] ; 0xA1A0000C
A1804DDC  F9B7 0000		ldrsh r0, [r7]

#28			AND		16#04	{LNXT:10|11|-1}
(*) INT
A1804DE0  2704     		mov r7, #4 ; 4
A1804DE2  4038     		and r0, r0, r7

#29			to_bool	{LNXT:10|11|-1}
(*) INT
A1804DE4  2800     		cmp r0, #0
A1804DE6  BF18 2001		nemov r0, #1
A1804DEA  BF08 2000		eqmov r0, #0

#30			ST		ATS22_DUT.Trip	{LNXT:10|11|-1}
(*) BOOL
A1804DEE  F8DF 74B4		ldr r7, [pc, #+1204] ; 0xA1A0001E
A1804DF2  7038     		strb r0, [r7]

#31		
#32			(* ATS22_DUT.Warning 	:= to_bool(resp_eta_lcr[0] And 16#08); *)
#33			LD		resp_eta_lcr[0]	{LNXT:11|12|-1}
(*) UNDEF
A1804DF4  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A0000C
A1804DF8  F9B7 0000		ldrsh r0, [r7]

#34			AND		16#08	{LNXT:11|12|-1}
(*) INT
A1804DFC  2708     		mov r7, #8 ; 8
A1804DFE  4038     		and r0, r0, r7

#35			to_bool	{LNXT:11|12|-1}
(*) INT
A1804E00  2800     		cmp r0, #0
A1804E02  BF18 2001		nemov r0, #1
A1804E06  BF08 2000		eqmov r0, #0

#36			ST		ATS22_DUT.Warning	{LNXT:11|12|-1}
(*) BOOL
A1804E0A  F8DF 749C		ldr r7, [pc, #+1180] ; 0xA1A0001F
A1804E0E  7038     		strb r0, [r7]

#37		
#38			(* ATS22_DUT.LI3 		:= to_bool(resp_eta_lcr[0] And 16#20); *)
#39			LD		resp_eta_lcr[0]	{LNXT:12|13|-1}
(*) UNDEF
A1804E10  F8DF 7468		ldr r7, [pc, #+1128] ; 0xA1A0000C
A1804E14  F9B7 0000		ldrsh r0, [r7]

#40			AND		16#20	{LNXT:12|13|-1}
(*) INT
A1804E18  2720     		mov r7, #32 ; 32
A1804E1A  4038     		and r0, r0, r7

#41			to_bool	{LNXT:12|13|-1}
(*) INT
A1804E1C  2800     		cmp r0, #0
A1804E1E  BF18 2001		nemov r0, #1
A1804E22  BF08 2000		eqmov r0, #0

#42			ST		ATS22_DUT.LI3	{LNXT:12|13|-1}
(*) BOOL
A1804E26  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A00020
A1804E2A  7038     		strb r0, [r7]

#43		
#44			(* ATS22_DUT.LI2 		:= to_bool(resp_eta_lcr[0] And 16#40); *)
#45			LD		resp_eta_lcr[0]	{LNXT:13|14|-1}
(*) UNDEF
A1804E2C  F8DF 744C		ldr r7, [pc, #+1100] ; 0xA1A0000C
A1804E30  F9B7 0000		ldrsh r0, [r7]

#46			AND		16#40	{LNXT:13|14|-1}
(*) INT
A1804E34  2740     		mov r7, #64 ; 64
A1804E36  4038     		and r0, r0, r7

#47			to_bool	{LNXT:13|14|-1}
(*) INT
A1804E38  2800     		cmp r0, #0
A1804E3A  BF18 2001		nemov r0, #1
A1804E3E  BF08 2000		eqmov r0, #0

#48			ST		ATS22_DUT.LI2	{LNXT:13|14|-1}
(*) BOOL
A1804E42  F8DF 746C		ldr r7, [pc, #+1132] ; 0xA1A00021
A1804E46  7038     		strb r0, [r7]

#49		
#50			(* ATS22_DUT.LI1 		:= to_bool(resp_eta_lcr[0] And 16#80); *)
#51			LD		resp_eta_lcr[0]	{LNXT:14|17|-1}
(*) UNDEF
A1804E48  F8DF 7430		ldr r7, [pc, #+1072] ; 0xA1A0000C
A1804E4C  F9B7 0000		ldrsh r0, [r7]

#52			AND		16#80	{LNXT:14|17|-1}
(*) INT
A1804E50  2780     		mov r7, #128 ; 128
A1804E52  4038     		and r0, r0, r7

#53			to_bool	{LNXT:14|17|-1}
(*) INT
A1804E54  2800     		cmp r0, #0
A1804E56  BF18 2001		nemov r0, #1
A1804E5A  BF08 2000		eqmov r0, #0

#54			ST		ATS22_DUT.LI1	{LNXT:14|17|-1}
(*) BOOL
A1804E5E  F8DF 7454		ldr r7, [pc, #+1108] ; 0xA1A00022
A1804E62  7038     		strb r0, [r7]

#55		
#56			(* ATS_State_bits.0 := ATS22_DUT.Ready; *)
#57			MOVE		ATS22_DUT.Ready,ATS_State_bits.0	{LNXT:17|18|-1}
(*) BOOL
A1804E64  F8DF 7434		ldr r7, [pc, #+1076] ; 0xA1A0001C
A1804E68  7838     		ldrb r0, [r7]
A1804E6A  F8DF 73E8		ldr r7, [pc, #+1000] ; 0xA0003F10
A1804E6E  F8B7 8000		ldrh r8, [r7]
A1804E72  F360 0800		bfi r8, r0, #0, #1
A1804E76  F8A7 8000		strh r8, [r7]

#58		
#59			(* ATS_State_bits.1 := ATS22_DUT.On And i_run_ats; *)
#60			LD		ATS22_DUT.On	{LNXT:18|19|-1}
(*) UNDEF
A1804E7A  F8DF 7424		ldr r7, [pc, #+1060] ; 0xA1A0001D
A1804E7E  7838     		ldrb r0, [r7]

#61			AND		i_run_ats	{LNXT:18|19|-1}
(*) BOOL
A1804E80  F8DF 7414		ldr r7, [pc, #+1044] ; 0xA1A0001B
A1804E84  783F     		ldrb r7, [r7]
A1804E86  4038     		and r0, r0, r7

#62			ST		ATS_State_bits.1	{LNXT:18|19|-1}
(*) BOOL
A1804E88  F8DF 73C8		ldr r7, [pc, #+968] ; 0xA0003F10
A1804E8C  F8B7 8000		ldrh r8, [r7]
A1804E90  F360 0841		bfi r8, r0, #1, #1
A1804E94  F8A7 8000		strh r8, [r7]

#63		
#64			(* ATS_State_bits.2 := ATS22_DUT.Trip Or Not i_no_alm_ats ; *)
#65			LD		i_no_alm_ats	{LNXT:19|20|-1}
(*) UNDEF
A1804E98  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001A
A1804E9C  7838     		ldrb r0, [r7]

#66			NOT	{LNXT:19|20|-1}
(*) BOOL
A1804E9E  2800     		cmp r0, #0
A1804EA0  BF08 2001		eqmov r0, #1
A1804EA4  BF18 2000		nemov r0, #0

#67			OR		ATS22_DUT.Trip	{LNXT:19|20|-1}
(*) BOOL
A1804EA8  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001E
A1804EAC  783F     		ldrb r7, [r7]
A1804EAE  4338     		orr r0, r0, r7

#68			ST		ATS_State_bits.2	{LNXT:19|20|-1}
(*) BOOL
A1804EB0  F8DF 73A0		ldr r7, [pc, #+928] ; 0xA0003F10
A1804EB4  F8B7 8000		ldrh r8, [r7]
A1804EB8  F360 0882		bfi r8, r0, #2, #1
A1804EBC  F8A7 8000		strh r8, [r7]

#69		
#70			(* ATS_State_bits.3 := ATS22_DUT.Warning; *)
#71			MOVE		ATS22_DUT.Warning,ATS_State_bits.3	{LNXT:20|21|-1}
(*) BOOL
A1804EC0  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A0001F
A1804EC4  7838     		ldrb r0, [r7]
A1804EC6  F8DF 738C		ldr r7, [pc, #+908] ; 0xA0003F10
A1804ECA  F8B7 8000		ldrh r8, [r7]
A1804ECE  F360 08C3		bfi r8, r0, #3, #1
A1804ED2  F8A7 8000		strh r8, [r7]

#72		
#73			(* ATS_State_bits.4 := ATS22_DUT.Local; *)
#74			MOVE		ATS22_DUT.Local,ATS_State_bits.4	{LNXT:21|22|-1}
(*) BOOL
A1804ED6  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A00024
A1804EDA  7838     		ldrb r0, [r7]
A1804EDC  F8DF 7374		ldr r7, [pc, #+884] ; 0xA0003F10
A1804EE0  F8B7 8000		ldrh r8, [r7]
A1804EE4  F360 1804		bfi r8, r0, #4, #1
A1804EE8  F8A7 8000		strh r8, [r7]

#75		
#76			(* ATS_State_bits.5 := ATS22_DUT.Ramping; *)
#77			MOVE		ATS22_DUT.Ramping,ATS_State_bits.5	{LNXT:22|23|-1}
(*) BOOL
A1804EEC  F8DF 73D0		ldr r7, [pc, #+976] ; 0xA1A00025
A1804EF0  7838     		ldrb r0, [r7]
A1804EF2  F8DF 7360		ldr r7, [pc, #+864] ; 0xA0003F10
A1804EF6  F8B7 8000		ldrh r8, [r7]
A1804EFA  F360 1845		bfi r8, r0, #5, #1
A1804EFE  F8A7 8000		strh r8, [r7]

#78		
#79			(* ATS_State_bits.6 := ATS22_DUT.LI1; *)
#80			MOVE		ATS22_DUT.LI1,ATS_State_bits.6	{LNXT:23|24|-1}
(*) BOOL
A1804F02  F8DF 73B0		ldr r7, [pc, #+944] ; 0xA1A00022
A1804F06  7838     		ldrb r0, [r7]
A1804F08  F8DF 7348		ldr r7, [pc, #+840] ; 0xA0003F10
A1804F0C  F8B7 8000		ldrh r8, [r7]
A1804F10  F360 1886		bfi r8, r0, #6, #1
A1804F14  F8A7 8000		strh r8, [r7]

#81		
#82			(* ATS_State_bits.7 := ATS22_DUT.LI2; *)
#83			MOVE		ATS22_DUT.LI2,ATS_State_bits.7	{LNXT:24|25|-1}
(*) BOOL
A1804F18  F8DF 7394		ldr r7, [pc, #+916] ; 0xA1A00021
A1804F1C  7838     		ldrb r0, [r7]
A1804F1E  F8DF 7334		ldr r7, [pc, #+820] ; 0xA0003F10
A1804F22  F8B7 8000		ldrh r8, [r7]
A1804F26  F360 18C7		bfi r8, r0, #7, #1
A1804F2A  F8A7 8000		strh r8, [r7]

#84		
#85			(* ATS_State_bits.8 := ATS22_DUT.LI3; *)
#86			MOVE		ATS22_DUT.LI3,ATS_State_bits.8	{LNXT:25|28|-1}
(*) BOOL
A1804F2E  F8DF 737C		ldr r7, [pc, #+892] ; 0xA1A00020
A1804F32  7838     		ldrb r0, [r7]
A1804F34  F8DF 731C		ldr r7, [pc, #+796] ; 0xA0003F10
A1804F38  F8B7 8000		ldrh r8, [r7]
A1804F3C  F360 2808		bfi r8, r0, #8, #1
A1804F40  F8A7 8000		strh r8, [r7]

#87		
#88			(* ATS_State_bits.9 := i_pb_loc; *)
#89			MOVE		i_pb_loc,ATS_State_bits.9	{LNXT:28|29|-1}
(*) BOOL
A1804F44  F8DF 739C		ldr r7, [pc, #+924] ; 0xA1A00038
A1804F48  F9B7 0000		ldrsh r0, [r7]
A1804F4C  F8DF 7304		ldr r7, [pc, #+772] ; 0xA0003F10
A1804F50  B082     		sub sp, sp, #8
A1804F52  F8CD 0000		str r0, [sp]
A1804F56  2800     		cmp r0, #0
A1804F58  BF08 2000		eqmov r0, #0
A1804F5C  BF18 2001		nemov r0, #1
A1804F60  F8B7 8000		ldrh r8, [r7]
A1804F64  F360 2849		bfi r8, r0, #9, #1
A1804F68  F8A7 8000		strh r8, [r7]
A1804F6C  F8DD 0000		ldr r0, [sp]
A1804F70  B002     		add sp, sp, #8

#90		
#91			(* ATS_State_bits.10 := i_pb_rem; *)
#92			MOVE		i_pb_rem,ATS_State_bits.10	{LNXT:29|31|-1}
(*) INT
A1804F72  F8DF 7374		ldr r7, [pc, #+884] ; 0xA1A0003A
A1804F76  F9B7 0000		ldrsh r0, [r7]
A1804F7A  F8DF 72D8		ldr r7, [pc, #+728] ; 0xA0003F10
A1804F7E  B082     		sub sp, sp, #8
A1804F80  F8CD 0000		str r0, [sp]
A1804F84  2800     		cmp r0, #0
A1804F86  BF08 2000		eqmov r0, #0
A1804F8A  BF18 2001		nemov r0, #1
A1804F8E  F8B7 8000		ldrh r8, [r7]
A1804F92  F360 288A		bfi r8, r0, #10, #1
A1804F96  F8A7 8000		strh r8, [r7]
A1804F9A  F8DD 0000		ldr r0, [sp]
A1804F9E  B002     		add sp, sp, #8

#93		
#94		
#95			(* IF i_pb_loc AND not i_pb_rem *)
#96			LD		i_pb_rem	{LNXT:31|-1|-1}
(*) UNDEF
A1804FA0  F8DF 7344		ldr r7, [pc, #+836] ; 0xA1A0003A
A1804FA4  F9B7 0000		ldrsh r0, [r7]

#97			NOT	{LNXT:31|-1|-1}
(-) INT
A1804FA8  43C0     		mvn r0, r0

#98			AND(		i_pb_loc	{LNXT:31|-1|-1}
(*) INT
A1804FAA  B082     		sub sp, sp, #8
A1804FAC  F8CD 0000		str r0, [sp]
A1804FB0  F8DF 7330		ldr r7, [pc, #+816] ; 0xA1A00038
A1804FB4  F9B7 0000		ldrsh r0, [r7]

#99			NOT	{LNXT:31|-1|-1}
(-) INT
A1804FB8  43C0     		mvn r0, r0

#100			)	{LNXT:31|-1|-1}
(*) INT
A1804FBA  4607     		mov r7, r0
A1804FBC  F8DD 0000		ldr r0, [sp]
A1804FC0  B002     		add sp, sp, #8
A1804FC2  4038     		and r0, r0, r7

#101			JMPCN	$label0	{LNXT:31|32|34}
(-) INT
A1804FC4  2800     		cmp r0, #0
A1804FC6  D009     		beq #18 ; 0xA1804FDC


#102		
#103			(* THEN *)
#104		
#105				(* ATS_State_bits.11 := TRUE; *)
#106				MOVE		TRUE,ATS_State_bits.11	{LNXT:32|34|-1}
(*) INT
A1804FCA  2001     		mov r0, #1 ; 1
A1804FCC  F8DF 7284		ldr r7, [pc, #+644] ; 0xA0003F10
A1804FD0  F8B7 8000		ldrh r8, [r7]
A1804FD4  F360 28CB		bfi r8, r0, #11, #1
A1804FD8  F8A7 8000		strh r8, [r7]

#107		
#108		$label0:
#109			(* END_IF *)
#110		
#111		
#112			(* IF i_pb_loc AND i_pb_rem *)
#113			LD		i_pb_loc	{LNXT:34|-1|-1}
(*) UNDEF
A1804FDC  F8DF 7304		ldr r7, [pc, #+772] ; 0xA1A00038
A1804FE0  F9B7 0000		ldrsh r0, [r7]

#114			NOT	{LNXT:34|-1|-1}
(-) INT
A1804FE4  43C0     		mvn r0, r0

#115			AND		i_pb_rem	{LNXT:34|-1|-1}
(*) INT
A1804FE6  F8DF 7300		ldr r7, [pc, #+768] ; 0xA1A0003A
A1804FEA  F9B7 7000		ldrsh r7, [r7]
A1804FEE  4038     		and r0, r0, r7

#116			JMPCN	$label1	{LNXT:34|35|37}
(-) INT
A1804FF0  2800     		cmp r0, #0
A1804FF2  D009     		beq #18 ; 0xA1805008


#117		
#118			(* THEN *)
#119		
#120				(* ATS_State_bits.11 := FALSE; *)
#121				MOVE		FALSE,ATS_State_bits.11	{LNXT:35|37|-1}
(*) INT
A1804FF6  2000     		mov r0, #0 ; 0
A1804FF8  F8DF 7258		ldr r7, [pc, #+600] ; 0xA0003F10
A1804FFC  F8B7 8000		ldrh r8, [r7]
A1805000  F360 28CB		bfi r8, r0, #11, #1
A1805004  F8A7 8000		strh r8, [r7]

#122		
#123		$label1:
#124			(* END_IF *)
#125		
#126		
#127			(* IF i_pb_loc AND not i_pb_rem *)
#128			LD		i_pb_rem	{LNXT:37|-1|-1}
(*) UNDEF
A1805008  F8DF 72DC		ldr r7, [pc, #+732] ; 0xA1A0003A
A180500C  F9B7 0000		ldrsh r0, [r7]

#129			NOT	{LNXT:37|-1|-1}
(-) INT
A1805010  43C0     		mvn r0, r0

#130			AND		i_pb_loc	{LNXT:37|-1|-1}
(*) INT
A1805012  F8DF 72D0		ldr r7, [pc, #+720] ; 0xA1A00038
A1805016  F9B7 7000		ldrsh r7, [r7]
A180501A  4038     		and r0, r0, r7

#131			JMPCN	$label2	{LNXT:37|38|43}
(-) INT
A180501C  2800     		cmp r0, #0
A180501E  D009     		beq #18 ; 0xA1805034


#132		
#133			(* THEN *)
#134		
#135				(* ATS_State_bits.11 := FALSE; *)
#136				MOVE		FALSE,ATS_State_bits.11	{LNXT:38|43|-1}
(*) INT
A1805022  2000     		mov r0, #0 ; 0
A1805024  F8DF 722C		ldr r7, [pc, #+556] ; 0xA0003F10
A1805028  F8B7 8000		ldrh r8, [r7]
A180502C  F360 28CB		bfi r8, r0, #11, #1
A1805030  F8A7 8000		strh r8, [r7]

#137		
#138		$label2:
#139			(* END_IF *)
#140		
#141			(* ATS22_DUT.EtaCurrent := to_byte(SHR(resp_eta_lcr[0] AND 16#3F00, 16#08) * 200 / 63); *)
#142			LD		resp_eta_lcr[0]	{LNXT:43|44|-1}
(*) UNDEF
A1805034  F8DF 7244		ldr r7, [pc, #+580] ; 0xA1A0000C
A1805038  F9B7 0000		ldrsh r0, [r7]

#143			AND		16#3F00	{LNXT:43|44|-1}
(*) INT
A180503C  F44F 577C		mov r7, #16128 ; 16128
A1805040  4038     		and r0, r0, r7

#144			SHR		16#08	{LNXT:43|44|-1}
(*) INT
A1805042  0A00     		lsr r0, r0, #8
A1805044  0400     		lsl r0, r0, #16
A1805046  0C00     		lsr r0, r0, #16

#145			MUL		200	{LNXT:43|44|-1}
(*) INT
A1805048  27C8     		mov r7, #200 ; 200
A180504A  4378     		mul r0, r0, r7

#146			DIV		63	{LNXT:43|44|-1}
(*) INT
A180504C  273F     		mov r7, #63 ; 63
A180504E  B082     		sub sp, sp, #8
A1805050  F8CD 1000		str r1, [sp]
A1805054  4639     		mov r1, r7
A1805056  FB90 F0F1		sdiv r0, r0, r1
A180505A  F8DD 1000		ldr r1, [sp]
A180505E  B002     		add sp, sp, #8

#147			to_byte	{LNXT:43|44|-1}
(-) INT
#148			ST		ATS22_DUT.EtaCurrent	{LNXT:43|44|-1}
(*) BYTE
A1805060  F8DF 7254		ldr r7, [pc, #+596] ; 0xA1A00023
A1805064  7038     		strb r0, [r7]

#149		
#150			(* ATS_Current_prsnt	 := ATS22_DUT.EtaCurrent; *)
#151			MOVE		ATS22_DUT.EtaCurrent,ATS_Current_prsnt	{LNXT:44|46|-1}
(*) BYTE
A1805066  F8DF 7250		ldr r7, [pc, #+592] ; 0xA1A00023
A180506A  7838     		ldrb r0, [r7]
A180506C  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA0003F12
A1805070  8038     		strh r0, [r7]

#152		
#153			(* ATS22_DUT.Local 	:= to_bool(resp_eta_lcr[0] And 16#4000); *)
#154			LD		resp_eta_lcr[0]	{LNXT:46|47|-1}
(*) UNDEF
A1805072  F8DF 7208		ldr r7, [pc, #+520] ; 0xA1A0000C
A1805076  F9B7 0000		ldrsh r0, [r7]

#155			AND		16#4000	{LNXT:46|47|-1}
(*) INT
A180507A  F44F 4780		mov r7, #16384 ; 16384
A180507E  4038     		and r0, r0, r7

#156			to_bool	{LNXT:46|47|-1}
(*) INT
A1805080  2800     		cmp r0, #0
A1805082  BF18 2001		nemov r0, #1
A1805086  BF08 2000		eqmov r0, #0

#157			ST		ATS22_DUT.Local	{LNXT:46|47|-1}
(*) BOOL
A180508A  F8DF 7230		ldr r7, [pc, #+560] ; 0xA1A00024
A180508E  7038     		strb r0, [r7]

#158		
#159			(* ATS22_DUT.Ramping 	:= to_bool(resp_eta_lcr[0] And 16#8000); *)
#160			LD		resp_eta_lcr[0]	{LNXT:47|49|-1}
(*) UNDEF
A1805090  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A0000C
A1805094  F9B7 0000		ldrsh r0, [r7]

#161			AND		16#8000	{LNXT:47|49|-1}
(*) INT
A1805098  F44F 4700		mov r7, #32768 ; 32768
A180509C  4038     		and r0, r0, r7

#162			to_bool	{LNXT:47|49|-1}
(*) INT
A180509E  2800     		cmp r0, #0
A18050A0  BF18 2001		nemov r0, #1
A18050A4  BF08 2000		eqmov r0, #0

#163			ST		ATS22_DUT.Ramping	{LNXT:47|49|-1}
(*) BOOL
A18050A8  F8DF 7214		ldr r7, [pc, #+532] ; 0xA1A00025
A18050AC  7038     		strb r0, [r7]

#164		
#165			(* ATS22_DUT.Lcr1 := resp_eta_lcr[1]; *)
#166			MOVE		resp_eta_lcr[1],ATS22_DUT.Lcr1	{LNXT:49|50|-1}
(*) BOOL
A18050AE  F8DF 71D0		ldr r7, [pc, #+464] ; 0xA1A0000E
A18050B2  F9B7 0000		ldrsh r0, [r7]
A18050B6  F8DF 720C		ldr r7, [pc, #+524] ; 0xA1A00026
A18050BA  8038     		strh r0, [r7]

#167		
#168			(* ATS22_DUT.Lcr2 := resp_eta_lcr[2]; *)
#169			MOVE		resp_eta_lcr[2],ATS22_DUT.Lcr2	{LNXT:50|51|-1}
(*) INT
A18050BC  F8DF 71C4		ldr r7, [pc, #+452] ; 0xA1A00010
A18050C0  F9B7 0000		ldrsh r0, [r7]
A18050C4  F8DF 7200		ldr r7, [pc, #+512] ; 0xA1A00028
A18050C8  8038     		strh r0, [r7]

#170		
#171			(* ATS22_DUT.Lcr3 := resp_eta_lcr[3]; *)
#172			MOVE		resp_eta_lcr[3],ATS22_DUT.Lcr3	{LNXT:51|53|-1}
(*) INT
A18050CA  F8DF 71BC		ldr r7, [pc, #+444] ; 0xA1A00012
A18050CE  F9B7 0000		ldrsh r0, [r7]
A18050D2  F8DF 71F8		ldr r7, [pc, #+504] ; 0xA1A0002A
A18050D6  8038     		strh r0, [r7]

#173		
#174			(* ATS_Current_L1 := ATS22_DUT.Lcr1; *)
#175			MOVE		ATS22_DUT.Lcr1,ATS_Current_L1	{LNXT:53|54|-1}
(*) INT
A18050D8  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A00026
A18050DC  F9B7 0000		ldrsh r0, [r7]
A18050E0  F8DF 7178		ldr r7, [pc, #+376] ; 0xA0003F14
A18050E4  8038     		strh r0, [r7]

#176		
#177			(* ATS_Current_L2 := ATS22_DUT.Lcr2; *)
#178			MOVE		ATS22_DUT.Lcr2,ATS_Current_L2	{LNXT:54|55|-1}
(*) INT
A18050E6  F8DF 71E0		ldr r7, [pc, #+480] ; 0xA1A00028
A18050EA  F9B7 0000		ldrsh r0, [r7]
A18050EE  F8DF 7170		ldr r7, [pc, #+368] ; 0xA0003F16
A18050F2  8038     		strh r0, [r7]

#179		
#180			(* ATS_Current_L3 := ATS22_DUT.Lcr3; *)
#181			MOVE		ATS22_DUT.Lcr3,ATS_Current_L3	{LNXT:55|57|-1}
(*) INT
A18050F4  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA1A0002A
A18050F8  F9B7 0000		ldrsh r0, [r7]
A18050FC  F8DF 7164		ldr r7, [pc, #+356] ; 0xA0003F18
A1805100  8038     		strh r0, [r7]

#182		
#183			(* res := sysMbMRTU_FC03(	addr := 1, 
#184											base := 261, // 260
#185											no := 1, 
#186											object := ADR(resp_eta_lcr), 
#187											timeout := 200); *)
#188			ADR		resp_eta_lcr	{LNXT:57|63|-1}
(*) INT
A1805102  F8DF 0178		ldr r0, [pc, #+376] ; 0xA1A0000C

#189			ST		$$TMP0	{LNXT:57|63|-1}
(*) @INT
A1805106  F8DF 7184		ldr r7, [pc, #+388] ; 0xA1A00014
A180510A  6038     		str r0, [r7]

#190			LDP0		1	{LNXT:57|63|-1}
(-) @INT
#191			sysMbMRTU_FC03		261, 1, $$TMP0, 200	{LNXT:57|63|-1}
(*) @INT
A180510C  B082     		sub sp, sp, #8
A180510E  2001     		mov r0, #1 ; 1
A1805110  F8DF 71DC		ldr r7, [pc, #+476] ; 0x105
A1805114  4639     		mov r1, r7
A1805116  2701     		mov r7, #1 ; 1
A1805118  463A     		mov r2, r7
A180511A  F8DF 7170		ldr r7, [pc, #+368] ; 0xA1A00014
A180511E  683B     		ldr r3, [r7]
A1805120  27C8     		mov r7, #200 ; 200
A1805122  F8CD 7000		str r7, [sp]
A1805126  F8DF 41CC		ldr r4, [pc, #+460] ; 0x241DB
A180512A  F044 0401		orr r4, r4, #1
A180512E  47A0     		blx r4
A1805130  B002     		add sp, sp, #8

#192			ST		res	{LNXT:57|63|-1}
(*) UINT
A1805132  F8DF 715C		ldr r7, [pc, #+348] ; 0xA1A00018
A1805136  8038     		strh r0, [r7]

#193		
#194			(* ATS22_DUT.LcrVoltage	:= resp_eta_lcr[0]; *)
#195			MOVE		resp_eta_lcr[0],ATS22_DUT.LcrVoltage	{LNXT:63|64|-1}
(*) INT
A1805138  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0000C
A180513C  F9B7 0000		ldrsh r0, [r7]
A1805140  F8DF 718C		ldr r7, [pc, #+396] ; 0xA1A0002C
A1805144  8038     		strh r0, [r7]

#196		
#197			(* ATS_Voltage := ATS22_DUT.LcrVoltage; *)
#198			MOVE		ATS22_DUT.LcrVoltage,ATS_Voltage	{LNXT:64|68|-1}
(*) INT
A1805146  F8DF 7188		ldr r7, [pc, #+392] ; 0xA1A0002C
A180514A  F9B7 0000		ldrsh r0, [r7]
A180514E  F8DF 7128		ldr r7, [pc, #+296] ; 0xA0003F24
A1805152  8038     		strh r0, [r7]

#199		
#200			(* res := sysMbMRTU_FC03(	addr := 1, 
#201											base := 280, // 279
#202											no := 1, 
#203											object := ADR(resp_eta_lcr), 
#204											timeout := 200); *)
#205			ADR		resp_eta_lcr	{LNXT:68|74|-1}
(*) INT
A1805154  F8DF 0124		ldr r0, [pc, #+292] ; 0xA1A0000C

#206			ST		$$TMP0	{LNXT:68|74|-1}
(*) @INT
A1805158  F8DF 7130		ldr r7, [pc, #+304] ; 0xA1A00014
A180515C  6038     		str r0, [r7]

#207			LDP0		1	{LNXT:68|74|-1}
(-) @INT
#208			sysMbMRTU_FC03		280, 1, $$TMP0, 200	{LNXT:68|74|-1}
(*) @INT
A180515E  B082     		sub sp, sp, #8
A1805160  2001     		mov r0, #1 ; 1
A1805162  F44F 718C		mov r1, #280 ; 280
A1805166  2701     		mov r7, #1 ; 1
A1805168  463A     		mov r2, r7
A180516A  F8DF 7120		ldr r7, [pc, #+288] ; 0xA1A00014
A180516E  683B     		ldr r3, [r7]
A1805170  27C8     		mov r7, #200 ; 200
A1805172  F8CD 7000		str r7, [sp]
A1805176  F8DF 417C		ldr r4, [pc, #+380] ; 0x241DB
A180517A  F044 0401		orr r4, r4, #1
A180517E  47A0     		blx r4
A1805180  B002     		add sp, sp, #8

#209			ST		res	{LNXT:68|74|-1}
(*) UINT
A1805182  F8DF 710C		ldr r7, [pc, #+268] ; 0xA1A00018
A1805186  8038     		strh r0, [r7]

#210		
#211			(* ATS22_DUT.LastFLT 	:= resp_eta_lcr[0]; *)
#212			MOVE		resp_eta_lcr[0],ATS22_DUT.LastFLT	{LNXT:74|75|-1}
(*) INT
A1805188  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A0000C
A180518C  F9B7 0000		ldrsh r0, [r7]
A1805190  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0002E
A1805194  8038     		strh r0, [r7]

#213		
#214			(* ATS_Last_FaultCode := ATS22_DUT.LastFLT; *)
#215			MOVE		ATS22_DUT.LastFLT,ATS_Last_FaultCode	{LNXT:75|78|-1}
(*) INT
A1805196  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A0002E
A180519A  F9B7 0000		ldrsh r0, [r7]
A180519E  F8DF 70C8		ldr r7, [pc, #+200] ; 0xA0003F1A
A18051A2  8038     		strh r0, [r7]

#216		
#217			(* res := sysMbMRTU_FC03(	addr := 1, 
#218											base := 274, // 273
#219											no := 3, 
#220											object := ADR(resp_eta_lcr), 
#221											timeout := 200); *)
#222			ADR		resp_eta_lcr	{LNXT:78|84|-1}
(*) INT
A18051A4  F8DF 00D4		ldr r0, [pc, #+212] ; 0xA1A0000C

#223			ST		$$TMP0	{LNXT:78|84|-1}
(*) @INT
A18051A8  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A00014
A18051AC  6038     		str r0, [r7]

#224			LDP0		1	{LNXT:78|84|-1}
(-) @INT
#225			sysMbMRTU_FC03		274, 3, $$TMP0, 200	{LNXT:78|84|-1}
(*) @INT
A18051AE  B082     		sub sp, sp, #8
A18051B0  2001     		mov r0, #1 ; 1
A18051B2  F44F 7189		mov r1, #274 ; 274
A18051B6  2703     		mov r7, #3 ; 3
A18051B8  463A     		mov r2, r7
A18051BA  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A00014
A18051BE  683B     		ldr r3, [r7]
A18051C0  27C8     		mov r7, #200 ; 200
A18051C2  F8CD 7000		str r7, [sp]
A18051C6  F8DF 412C		ldr r4, [pc, #+300] ; 0x241DB
A18051CA  F044 0401		orr r4, r4, #1
A18051CE  47A0     		blx r4
A18051D0  B002     		add sp, sp, #8

#226			ST		res	{LNXT:78|84|-1}
(*) UINT
A18051D2  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA1A00018
A18051D6  8038     		strh r0, [r7]

#227		
#228		
#229			(* IF res <> 0 *)
#230			LD		res	{LNXT:84|-1|-1}
(*) UNDEF
A18051D8  F8DF 70B4		ldr r7, [pc, #+180] ; 0xA1A00018
A18051DC  F9B7 0000		ldrsh r0, [r7]

#231			NE		0	{LNXT:84|-1|-1}
(*) INT
A18051E0  2800     		cmp r0, #0
A18051E2  BF08 2000		eqmov r0, #0
A18051E6  BF18 2001		nemov r0, #1

#232			JMPCN	$label3	{LNXT:84|84|86}
(-) BOOL
A18051EA  2800     		cmp r0, #0
A18051EC  D009     		beq #18 ; 0xA1805202


#233		
#234			(* THEN *)
#235		
#236				(* Alarms.6 := true; *)
#237				MOVE		true,Alarms.6	{LNXT:84|86|-1}
(*) BOOL
A18051F0  2001     		mov r0, #1 ; 1
A18051F2  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F20
A18051F6  F8B7 8000		ldrh r8, [r7]
A18051FA  F360 1886		bfi r8, r0, #6, #1
A18051FE  F8A7 8000		strh r8, [r7]

#238		
#239		$label3:
#240			(* END_IF *)
#241		
#242			(* ATS22_DUT.MotRunTime 		:= resp_eta_lcr[0]; *)
#243			MOVE		resp_eta_lcr[0],ATS22_DUT.MotRunTime	{LNXT:86|87|-1}
(*) WORD
A1805202  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A0000C
A1805206  F9B7 0000		ldrsh r0, [r7]
A180520A  F8DF 70CC		ldr r7, [pc, #+204] ; 0xA1A00030
A180520E  8038     		strh r0, [r7]

#244		
#245			(* ATS22_DUT.MotStartCnt 		:= resp_eta_lcr[1]; *)
#246			MOVE		resp_eta_lcr[1],ATS22_DUT.MotStartCnt	{LNXT:87|88|-1}
(*) INT
A1805210  F8DF 706C		ldr r7, [pc, #+108] ; 0xA1A0000E
A1805214  F9B7 0000		ldrsh r0, [r7]
A1805218  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A00032
A180521C  8038     		strh r0, [r7]

#247		
#248			(* ATS22_DUT.MotLastStartTime 	:= resp_eta_lcr[2]; *)
#249			MOVE		resp_eta_lcr[2],ATS22_DUT.MotLastStartTime	{LNXT:88|90|-1}
(*) INT
A180521E  F8DF 7064		ldr r7, [pc, #+100] ; 0xA1A00010
A1805222  F9B7 0000		ldrsh r0, [r7]
A1805226  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A00034
A180522A  8038     		strh r0, [r7]

#250		
#251			(* ATS_RunTime_Hors	:= to_word(ATS22_DUT.MotRunTime); *)
#252			LDP0		ATS22_DUT.MotRunTime	{LNXT:90|91|-1}
(-) INT
#253			to_word	{LNXT:90|91|-1}
(*) INT
A180522C  F8DF 70A8		ldr r7, [pc, #+168] ; 0xA1A00030
A1805230  F9B7 0000		ldrsh r0, [r7]

#254			ST		ATS_RunTime_Hors	{LNXT:90|91|-1}
(*) WORD
A1805234  F8DF 7034		ldr r7, [pc, #+52] ; 0xA0003F1C
A1805238  8038     		strh r0, [r7]

#255		
#256			(* ATS_OnTimes_Cnt		:= to_word(ATS22_DUT.MotStartCnt); *)
#257			LDP0		ATS22_DUT.MotStartCnt	{LNXT:91|2|-1}
(-) WORD
#258			to_word	{LNXT:91|2|-1}
(*) WORD
A180523A  F8DF 70A0		ldr r7, [pc, #+160] ; 0xA1A00032
A180523E  F9B7 0000		ldrsh r0, [r7]

#259			ST		ATS_OnTimes_Cnt	{LNXT:91|2|-1}
(*) WORD
A1805242  F8DF 702C		ldr r7, [pc, #+44] ; 0xA0003F1E
A1805246  8038     		strh r0, [r7]

A1805248  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A180524C  F8DD E000		ldr lr, [sp]
A1805250  B002     		add sp, sp, #8

A1805252  4770     		bx lr

A1805254  FFFFFFFF		; 0xA0003F10
A1805258  FFFFFFFF		; 0xA0003F12
A180525C  FFFFFFFF		; 0xA0003F14
A1805260  FFFFFFFF		; 0xA0003F16
A1805264  FFFFFFFF		; 0xA0003F18
A1805268  FFFFFFFF		; 0xA0003F1A
A180526C  FFFFFFFF		; 0xA0003F1C
A1805270  FFFFFFFF		; 0xA0003F1E
A1805274  FFFFFFFF		; 0xA0003F20
A1805278  FFFFFFFF		; 0xA0003F24
A180527C  A1A0000C		; 0xA1A0000C
A1805280  A1A0000E		; 0xA1A0000E
A1805284  A1A00010		; 0xA1A00010
A1805288  A1A00012		; 0xA1A00012
A180528C  A1A00014		; 0xA1A00014
A1805290  A1A00018		; 0xA1A00018
A1805294  A1A0001A		; 0xA1A0001A
A1805298  A1A0001B		; 0xA1A0001B
A180529C  A1A0001C		; 0xA1A0001C
A18052A0  A1A0001D		; 0xA1A0001D
A18052A4  A1A0001E		; 0xA1A0001E
A18052A8  A1A0001F		; 0xA1A0001F
A18052AC  A1A00020		; 0xA1A00020
A18052B0  A1A00021		; 0xA1A00021
A18052B4  A1A00022		; 0xA1A00022
A18052B8  A1A00023		; 0xA1A00023
A18052BC  A1A00024		; 0xA1A00024
A18052C0  A1A00025		; 0xA1A00025
A18052C4  A1A00026		; 0xA1A00026
A18052C8  A1A00028		; 0xA1A00028
A18052CC  A1A0002A		; 0xA1A0002A
A18052D0  A1A0002C		; 0xA1A0002C
A18052D4  A1A0002E		; 0xA1A0002E
A18052D8  A1A00030		; 0xA1A00030
A18052DC  A1A00032		; 0xA1A00032
A18052E0  A1A00034		; 0xA1A00034
A18052E4  A1A00038		; 0xA1A00038
A18052E8  A1A0003A		; 0xA1A0003A
A18052EC  00000101		; 0x00000101
A18052F0  00000105		; 0x00000105
A18052F4  FFFFFFFF		; 0x000241DB

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A18052F8  B082     		sub sp, sp, #8
A18052FA  F8CD E000		str lr, [sp]
A18052FE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805302  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000427
A1805306  7838     		ldrb r0, [r7]
A1805308  F8DF 7038		ldr r7, [pc, #+56] ; 0xA1A0001B
A180530C  7038     		strb r0, [r7]

A180530E  F8DF 7040		ldr r7, [pc, #+64] ; 0x10000426
A1805312  7838     		ldrb r0, [r7]
A1805314  F8DF 7028		ldr r7, [pc, #+40] ; 0xA1A0001A
A1805318  7038     		strb r0, [r7]

A180531A  F8DF 703C		ldr r7, [pc, #+60] ; 0x1000044E
A180531E  8838     		ldrh r0, [r7]
A1805320  F8DF 7024		ldr r7, [pc, #+36] ; 0xA1A00038
A1805324  8038     		strh r0, [r7]

A1805326  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000450
A180532A  8838     		ldrh r0, [r7]
A180532C  F8DF 701C		ldr r7, [pc, #+28] ; 0xA1A0003A
A1805330  8038     		strh r0, [r7]

A1805332  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805336  F8DD E000		ldr lr, [sp]
A180533A  B002     		add sp, sp, #8

A180533C  4770     		bx lr

A1805340  A1A0001A		; 0xA1A0001A
A1805344  A1A0001B		; 0xA1A0001B
A1805348  A1A00038		; 0xA1A00038
A180534C  A1A0003A		; 0xA1A0003A
A1805350  FFFFFFFF		; 0x10000426
A1805354  FFFFFFFF		; 0x10000427
A1805358  FFFFFFFF		; 0x1000044E
A180535C  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1805360  B082     		sub sp, sp, #8
A1805362  F8CD E000		str lr, [sp]
A1805366  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A180536A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A180536E  F8DD E000		ldr lr, [sp]
A1805372  B002     		add sp, sp, #8

A1805374  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

A1805376  B082     		sub sp, sp, #8
A1805378  F8CD E000		str lr, [sp]
A180537C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805380  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805384  F8DD E000		ldr lr, [sp]
A1805388  B002     		add sp, sp, #8

A180538A  4770     		bx lr

**************************************************
	List program: sr_init_counters
**************************************************

PROGRAM sr_init_counters

END_PROGRAM

A18053A0  B082     		sub sp, sp, #8
A18053A2  F8CD E000		str lr, [sp]
A18053A6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_init_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_counter 	:= epprom_kw_cnt; *)
#4			MOVE		epprom_kw_cnt,kw_counter	{LNXT:1|2|-1}
(*) UDINT
A18053AA  F8DF 7028		ldr r7, [pc, #+40] ; 0xA00017F8
A18053AE  6838     		ldr r0, [r7]
A18053B0  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003F04
A18053B4  6038     		str r0, [r7]

#5		
#6			(* q_counter	:= epprom_q_cnt; *)
#7			MOVE		epprom_q_cnt,q_counter	{LNXT:2|1|-1}
(*) DWORD
A18053B6  F8DF 7018		ldr r7, [pc, #+24] ; 0xA00017F0
A18053BA  6838     		ldr r0, [r7]
A18053BC  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0003F08
A18053C0  6038     		str r0, [r7]

A18053C2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18053C6  F8DD E000		ldr lr, [sp]
A18053CA  B002     		add sp, sp, #8

A18053CC  4770     		bx lr

A18053D0  FFFFFFFF		; 0xA00017F0
A18053D4  FFFFFFFF		; 0xA00017F8
A18053D8  FFFFFFFF		; 0xA0003F04
A18053DC  FFFFFFFF		; 0xA0003F08

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A18053E0  4770     		bx lr


*** OUTPUT:
A18053E2  4770     		bx lr



**************************************************
	Task Boot init code
**************************************************

A18053E4  B082     		sub sp, sp, #8
A18053E6  F8CD E000		str lr, [sp]
A18053EA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18053EE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18053F2  F8DD E000		ldr lr, [sp]
A18053F6  B002     		add sp, sp, #8

A18053F8  4770     		bx lr

**************************************************
	List program: init_val
**************************************************

PROGRAM init_val

END_PROGRAM

A1805410  B082     		sub sp, sp, #8
A1805412  F8CD E000		str lr, [sp]
A1805416  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:init_val}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF di_val_close_state_R *)
#5			LD		di_val_close_state_R	{LNXT:1|-1|-1}
(*) UNDEF
A180541A  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000420
A180541E  7838     		ldrb r0, [r7]

#6			NOT	{LNXT:1|-1|-1}
(*) BOOL
A1805420  2800     		cmp r0, #0
A1805422  BF08 2001		eqmov r0, #1
A1805426  BF18 2000		nemov r0, #0

#7			JMPCN	$label0	{LNXT:1|2|6}
(-) BOOL
A180542A  2800     		cmp r0, #0
A180542C  D008     		beq #16 ; 0xA1805440


#8		
#9			(* THEN *)
#10		
#11				(* o_val_close_R:=true; *)
#12				MOVE		true,o_val_close_R	{LNXT:2|3|-1}
(*) BOOL
A1805430  2001     		mov r0, #1 ; 1
A1805432  F8DF 704C		ldr r7, [pc, #+76] ; 0x100004AF
A1805436  7038     		strb r0, [r7]

#13		
#14				(* o_val_open_R:=false; *)
#15				MOVE		false,o_val_open_R	{LNXT:3|6|-1}
(*) BOOL
A1805438  2000     		mov r0, #0 ; 0
A180543A  F8DF 7040		ldr r7, [pc, #+64] ; 0x100004AE
A180543E  7038     		strb r0, [r7]

#16		
#17		$label0:
#18			(* END_IF *)
#19		
#20		
#21			(* IF di_val_close_state_fall = 0 *)
#22			LD		di_val_close_state_fall	{LNXT:6|-1|-1}
(*) UNDEF
A1805440  F8DF 702C		ldr r7, [pc, #+44] ; 0x1000044A
A1805444  F9B7 0000		ldrsh r0, [r7]

#23			EQ		0	{LNXT:6|-1|-1}
(*) INT
A1805448  2800     		cmp r0, #0
A180544A  BF18 2000		nemov r0, #0
A180544E  BF08 2001		eqmov r0, #1

#24			JMPCN	$label1	{LNXT:6|7|1}
(-) BOOL
A1805452  2800     		cmp r0, #0
A1805454  D008     		beq #16 ; 0xA1805468


#25		
#26			(* THEN *)
#27		
#28				(* o_val_close_fall:=true; *)
#29				MOVE		true,o_val_close_fall	{LNXT:7|8|-1}
(*) BOOL
A1805458  2001     		mov r0, #1 ; 1
A180545A  F8DF 701C		ldr r7, [pc, #+28] ; 0x100004AD
A180545E  7038     		strb r0, [r7]

#30		
#31				(* o_val_open_fall:=false; *)
#32				MOVE		false,o_val_open_fall	{LNXT:8|1|-1}
(*) BOOL
A1805460  2000     		mov r0, #0 ; 0
A1805462  F8DF 7010		ldr r7, [pc, #+16] ; 0x100004AC
A1805466  7038     		strb r0, [r7]

A1805468  E00C     		b #24

A180546C  FFFFFFFF		; 0x10000420
A1805470  FFFFFFFF		; 0x1000044A
A1805474  FFFFFFFF		; 0x100004AC
A1805478  FFFFFFFF		; 0x100004AD
A180547C  FFFFFFFF		; 0x100004AE
A1805480  FFFFFFFF		; 0x100004AF

END_PROGRAM
**************************************************
	List program: ParCheck
**************************************************

PROGRAM ParCheck

END_PROGRAM

#0		{SRC:ParCheck}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Par_POLI AND 16#fc00) <> 2048 *)
#5			LD		Par_POLI	{LNXT:2|-1|-1}
(*) UNDEF
A1805484  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000182
A1805488  8838     		ldrh r0, [r7]

#6			AND		16#fc00	{LNXT:2|-1|-1}
(*) UINT
A180548A  F44F 477C		mov r7, #64512 ; 64512
A180548E  4038     		and r0, r0, r7

#7			NE		2048	{LNXT:2|-1|-1}
(*) UINT
A1805490  F44F 6700		mov r7, #2048 ; 2048
A1805494  42B8     		cmp r0, r7
A1805496  BF08 2000		eqmov r0, #0
A180549A  BF18 2001		nemov r0, #1

#8			JMPCN	$label0	{LNXT:2|3|2}
(-) BOOL
A180549E  2800     		cmp r0, #0
A18054A0  D005     		beq #10 ; 0xA18054AE


#9		
#10			(* THEN *)
#11		
#12				(* WHILE TRUE *)
#13		$label1:
#14				LD		TRUE	{LNXT:3|-1|-1}
(-) UNDEF
A18054A4  2001     		mov r0, #1 ; 1

#15				JMPCN		$label2	{LNXT:3|2|2}
(-) BOOL
A18054A6  2800     		cmp r0, #0
A18054A8  D001     		beq #2 ; 0xA18054AE


#16		
#17				(* DO *)
#18					JMP		$label1	{LNXT:3|2|2}
(-) BOOL
A18054AC  E7FA     		b #-12 ; 0xA18054A4

A18054AE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18054B2  F8DD E000		ldr lr, [sp]
A18054B6  B002     		add sp, sp, #8

A18054B8  4770     		bx lr

A18054BC  FFFFFFFF		; 0x10000182

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A18054C0  4770     		bx lr


*** OUTPUT:
A18054C2  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

A18054C4  B082     		sub sp, sp, #8
A18054C6  F8CD E000		str lr, [sp]
A18054CA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18054CE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18054D2  F8DD E000		ldr lr, [sp]
A18054D6  B002     		add sp, sp, #8

A18054D8  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

A18054F0  B082     		sub sp, sp, #8
A18054F2  F8CD E000		str lr, [sp]
A18054F6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 541599759; *)
#4			MOVE		541599759,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
A18054FA  F8DF 7044		ldr r7, [pc, #+68] ; 0x2048280F
A18054FE  4638     		mov r0, r7
A1805500  F8DF 7030		ldr r7, [pc, #+48] ; 0xA1A0003C
A1805504  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
A1805506  F8DF 0028		ldr r0, [pc, #+40] ; 0xA1800100

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
A180550A  4607     		mov r7, r0
A180550C  4638     		mov r0, r7
A180550E  2716     		mov r7, #22 ; 22
A1805510  4639     		mov r1, r7
A1805512  F8DF 4028		ldr r4, [pc, #+40] ; 0x1398D
A1805516  F044 0401		orr r4, r4, #1
A180551A  47A0     		blx r4

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
A180551C  F8DF 7018		ldr r7, [pc, #+24] ; 0xA1A00040
A1805520  7038     		strb r0, [r7]

A1805522  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805526  F8DD E000		ldr lr, [sp]
A180552A  B002     		add sp, sp, #8

A180552C  4770     		bx lr

A1805530  A1800100		; 0xA1800100
A1805534  A1A0003C		; 0xA1A0003C
A1805538  A1A00040		; 0xA1A00040
A180553C  FFFFFFFF		; 0x0001398D
A1805540  2048280F		; 0x2048280F

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1805544  4770     		bx lr


*** OUTPUT:
A1805546  4770     		bx lr



**************************************************
	Task Serv init code
**************************************************

A1805548  B082     		sub sp, sp, #8
A180554A  F8CD E000		str lr, [sp]
A180554E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805552  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805556  F8DD E000		ldr lr, [sp]
A180555A  B002     		add sp, sp, #8

A180555C  4770     		bx lr

**************************************************
	List program: sr_pressure
**************************************************

PROGRAM sr_pressure

        VAR
tmp_test : INT;
	END_VAR

END_PROGRAM

A1805570  B082     		sub sp, sp, #8
A1805572  F8CD E000		str lr, [sp]
A1805576  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_pressure}
#1		(*$WAITSWITCH$*)
#2		
#3			(* Pressure := to_int(to_real(i_adc_pressure )/10); *)
#4			LDP0		i_adc_pressure	{LNXT:2|2|-1}
(-) UDINT
#5			to_real	{LNXT:2|2|-1}
(*) UDINT
A180557A  F8DF 705C		ldr r7, [pc, #+92] ; 0xA1A000EE
A180557E  F9B7 0000		ldrsh r0, [r7]
A1805582  F8DF 405C		ldr r4, [pc, #+92] ; 0x111EB
A1805586  F044 0401		orr r4, r4, #1
A180558A  47A0     		blx r4

#6			DIV		10	{LNXT:2|2|-1}
(*) REAL
A180558C  270A     		mov r7, #10 ; 10
A180558E  B082     		sub sp, sp, #8
A1805590  F8CD 0000		str r0, [sp]
A1805594  4638     		mov r0, r7
A1805596  F8DF 4044		ldr r4, [pc, #+68] ; 0x111DB
A180559A  F044 0401		orr r4, r4, #1
A180559E  47A0     		blx r4
A18055A0  4607     		mov r7, r0
A18055A2  F8DD 0000		ldr r0, [sp]
A18055A6  B002     		add sp, sp, #8
A18055A8  B082     		sub sp, sp, #8
A18055AA  F8CD 1000		str r1, [sp]
A18055AE  4639     		mov r1, r7
A18055B0  F8DF 4034		ldr r4, [pc, #+52] ; 0x1124B
A18055B4  F044 0401		orr r4, r4, #1
A18055B8  47A0     		blx r4
A18055BA  F8DD 1000		ldr r1, [sp]
A18055BE  B002     		add sp, sp, #8

#7			to_int	{LNXT:2|2|-1}
(*) REAL
A18055C0  F8DF 4020		ldr r4, [pc, #+32] ; 0x1120B
A18055C4  F044 0401		orr r4, r4, #1
A18055C8  47A0     		blx r4

#8			ST		Pressure	{LNXT:2|2|-1}
(*) INT
A18055CA  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F00
A18055CE  8038     		strh r0, [r7]

A18055D0  E00C     		b #24

A18055D4  FFFFFFFF		; 0xA0003F00
A18055D8  A1A000EE		; 0xA1A000EE
A18055DC  FFFFFFFF		; 0x000111DB
A18055E0  FFFFFFFF		; 0x000111EB
A18055E4  FFFFFFFF		; 0x0001120B
A18055E8  FFFFFFFF		; 0x0001124B

END_PROGRAM
**************************************************
	List program: sr_counters
**************************************************

PROGRAM sr_counters

        VAR
kw_trig : R_TRIG;
q_trig : R_TRIG;
kw_pulses_per_acs : UINT;
q_pulses_per_acs : UINT;
test_freq : UDINT;
	END_VAR

END_PROGRAM

#0		{SRC:sr_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_pulses_per_acs 	:= 8000; *)
#4			MOVE		8000,kw_pulses_per_acs	{LNXT:2|3|-1}
(*) UDINT
A18055EC  F44F 50FA		mov r0, #8000 ; 8000
A18055F0  F8DF 7108		ldr r7, [pc, #+264] ; 0xA1A000EA
A18055F4  8038     		strh r0, [r7]

#5		
#6			(* q_pulses_per_acs	:= 1; *)
#7			MOVE		1,q_pulses_per_acs	{LNXT:3|15|-1}
(*) UINT
A18055F6  2001     		mov r0, #1 ; 1
A18055F8  F8DF 7104		ldr r7, [pc, #+260] ; 0xA1A000EC
A18055FC  8038     		strh r0, [r7]

#8		
#9		
#10			(* IF fdi_q_cnt >= q_pulses_per_acs *)
#11			LD		fdi_q_cnt	{LNXT:15|-1|-1}
(*) UNDEF
A18055FE  F8DF 7114		ldr r7, [pc, #+276] ; 0x100004F8
A1805602  6838     		ldr r0, [r7]

#12			GE		q_pulses_per_acs	{LNXT:15|-1|-1}
(*) UDINT
A1805604  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000EC
A1805608  883F     		ldrh r7, [r7]
A180560A  42B8     		cmp r0, r7
A180560C  BF38 2000		lomov r0, #0
A1805610  BF28 2001		hsmov r0, #1

#13			JMPCN	$label0	{LNXT:15|16|20}
(-) BOOL
A1805614  2800     		cmp r0, #0
A1805616  D00B     		beq #22 ; 0xA1805630


#14		
#15			(* THEN *)
#16		
#17				(* q_counter := q_counter + 1; *)
#18				LD		q_counter	{LNXT:16|17|-1}
(*) UNDEF
A180561A  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA0003F08
A180561E  6838     		ldr r0, [r7]

#19				ADD		1	{LNXT:16|17|-1}
(-) DWORD
A1805620  1C40     		add r0, r0, #1

#20				ST		q_counter	{LNXT:16|17|-1}
(*) DWORD
A1805622  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA0003F08
A1805626  6038     		str r0, [r7]

#21		
#22				(* fdi_q_reset := true; *)
#23				MOVE		true,fdi_q_reset	{LNXT:17|20|-1}
(*) DWORD
A1805628  2001     		mov r0, #1 ; 1
A180562A  F8DF 70F0		ldr r7, [pc, #+240] ; 0x100007DD
A180562E  7038     		strb r0, [r7]

#24		
#25		$label0:
#26			(* END_IF *)
#27		
#28			(* q_value := to_int((3600 * to_real(fdi_q_freq)) / (to_real(q_pulses_per_acs) / 1)); *)
#29			LDP0		fdi_q_freq	{LNXT:20|2|-1}
(-) BOOL
#30			to_real	{LNXT:20|2|-1}
(*) BOOL
A1805630  F8DF 70E4		ldr r7, [pc, #+228] ; 0x100004FC
A1805634  6838     		ldr r0, [r7]
A1805636  F8DF 40CC		ldr r4, [pc, #+204] ; 0x111DB
A180563A  F044 0401		orr r4, r4, #1
A180563E  47A0     		blx r4

#31			MUL		3600	{LNXT:20|2|-1}
(*) REAL
A1805640  F44F 6761		mov r7, #3600 ; 3600
A1805644  B082     		sub sp, sp, #8
A1805646  F8CD 0000		str r0, [sp]
A180564A  4638     		mov r0, r7
A180564C  F8DF 40B4		ldr r4, [pc, #+180] ; 0x111DB
A1805650  F044 0401		orr r4, r4, #1
A1805654  47A0     		blx r4
A1805656  4607     		mov r7, r0
A1805658  F8DD 0000		ldr r0, [sp]
A180565C  B002     		add sp, sp, #8
A180565E  B082     		sub sp, sp, #8
A1805660  F8CD 1000		str r1, [sp]
A1805664  4639     		mov r1, r7
A1805666  F8DF 40A4		ldr r4, [pc, #+164] ; 0x1123B
A180566A  F044 0401		orr r4, r4, #1
A180566E  47A0     		blx r4
A1805670  F8DD 1000		ldr r1, [sp]
A1805674  B002     		add sp, sp, #8

#32			DIV(		0	{LNXT:20|2|-1}
(*) REAL
A1805676  B082     		sub sp, sp, #8
A1805678  F8CD 0000		str r0, [sp]
A180567C  2000     		mov r0, #0 ; 0

#33			LDP0		q_pulses_per_acs	{LNXT:20|2|-1}
(-) USINT
#34			to_real	{LNXT:20|2|-1}
(*) USINT
A180567E  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A000EC
A1805682  8838     		ldrh r0, [r7]
A1805684  F8DF 407C		ldr r4, [pc, #+124] ; 0x111DB
A1805688  F044 0401		orr r4, r4, #1
A180568C  47A0     		blx r4

#35			DIV		1	{LNXT:20|2|-1}
(*) REAL
A180568E  2701     		mov r7, #1 ; 1
A1805690  B082     		sub sp, sp, #8
A1805692  F8CD 0000		str r0, [sp]
A1805696  4638     		mov r0, r7
A1805698  F8DF 4068		ldr r4, [pc, #+104] ; 0x111DB
A180569C  F044 0401		orr r4, r4, #1
A18056A0  47A0     		blx r4
A18056A2  4607     		mov r7, r0
A18056A4  F8DD 0000		ldr r0, [sp]
A18056A8  B002     		add sp, sp, #8
A18056AA  B082     		sub sp, sp, #8
A18056AC  F8CD 1000		str r1, [sp]
A18056B0  4639     		mov r1, r7
A18056B2  F8DF 405C		ldr r4, [pc, #+92] ; 0x1124B
A18056B6  F044 0401		orr r4, r4, #1
A18056BA  47A0     		blx r4
A18056BC  F8DD 1000		ldr r1, [sp]
A18056C0  B002     		add sp, sp, #8

#36			)	{LNXT:20|2|-1}
(*) REAL
A18056C2  4607     		mov r7, r0
A18056C4  F8DD 0000		ldr r0, [sp]
A18056C8  B002     		add sp, sp, #8
A18056CA  B082     		sub sp, sp, #8
A18056CC  F8CD 1000		str r1, [sp]
A18056D0  4639     		mov r1, r7
A18056D2  F8DF 403C		ldr r4, [pc, #+60] ; 0x1124B
A18056D6  F044 0401		orr r4, r4, #1
A18056DA  47A0     		blx r4
A18056DC  F8DD 1000		ldr r1, [sp]
A18056E0  B002     		add sp, sp, #8

#37			to_int	{LNXT:20|2|-1}
(*) REAL
A18056E2  F8DF 4024		ldr r4, [pc, #+36] ; 0x1120B
A18056E6  F044 0401		orr r4, r4, #1
A18056EA  47A0     		blx r4

#38			ST		q_value	{LNXT:20|2|-1}
(*) INT
A18056EC  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F0E
A18056F0  8038     		strh r0, [r7]

A18056F2  E015     		b #42

A18056F4  FFFFFFFF		; 0xA0003F08
A18056F8  FFFFFFFF		; 0xA0003F0E
A18056FC  A1A000EA		; 0xA1A000EA
A1805700  A1A000EC		; 0xA1A000EC
A1805704  FFFFFFFF		; 0x000111DB
A1805708  FFFFFFFF		; 0x0001120B
A180570C  FFFFFFFF		; 0x0001123B
A1805710  FFFFFFFF		; 0x0001124B
A1805714  FFFFFFFF		; 0x100004F8
A1805718  FFFFFFFF		; 0x100004FC
A180571C  FFFFFFFF		; 0x100007DD

END_PROGRAM
**************************************************
	List program: sr_save_counters
**************************************************

PROGRAM sr_save_counters

        VAR
power_err : R_TRIG;
ton_start_up : TON;
res_q : BOOL;
res_kw : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:sr_save_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* ton_start_up *)
#4			MOVE		true,ton_start_up.IN	{LNXT:1|-1|-1}
(*) UDINT
A1805720  2001     		mov r0, #1 ; 1
A1805722  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000F4
A1805726  7038     		strb r0, [r7]

#5			MOVE		5000,ton_start_up.PT	{LNXT:1|-1|-1}
(*) BOOL
A1805728  F8DF 7110		ldr r7, [pc, #+272] ; 0x1388
A180572C  4638     		mov r0, r7
A180572E  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A000F8
A1805732  6038     		str r0, [r7]

#6			CAL		ton_start_up	{LNXT:1|2|-1}
(*) UDINT
A1805734  E92D 0021		stmdb sp!, { r0, r5 }
A1805738  F8DF 50DC		ldr r5, [pc, #+220] ; 0xA1A000F0
A180573C  F8DF 40D0		ldr r4, [pc, #+208] ; 0xA1804490
A1805740  F044 0401		orr r4, r4, #1
A1805744  47A0     		blx r4
A1805746  E8BD 0021		ldmia sp!, { r0, r5 }

#7		
#8			(* power_err *)
#9			LD		ton_start_up.Q	{LNXT:2|-1|-1}
(*) UNDEF
A180574A  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA1A000FC
A180574E  7838     		ldrb r0, [r7]

#10			AND		i_rnpp	{LNXT:2|-1|-1}
(*) BOOL
A1805750  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A000E8
A1805754  783F     		ldrb r7, [r7]
A1805756  4038     		and r0, r0, r7

#11			ST		power_err.clk	{LNXT:2|-1|-1}
(*) BOOL
A1805758  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A00105
A180575C  7038     		strb r0, [r7]

#12			CAL		power_err	{LNXT:2|3|-1}
(*) BOOL
A180575E  E92D 0021		stmdb sp!, { r0, r5 }
A1805762  F8DF 50C4		ldr r5, [pc, #+196] ; 0xA1A00104
A1805766  F8DF 40A4		ldr r4, [pc, #+164] ; 0xA1804458
A180576A  F044 0401		orr r4, r4, #1
A180576E  47A0     		blx r4
A1805770  E8BD 0021		ldmia sp!, { r0, r5 }

#13		
#14		
#15			(* IF power_err.q *)
#16			LD		power_err.q	{LNXT:3|-1|-1}
(*) UNDEF
A1805774  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A00106
A1805778  7838     		ldrb r0, [r7]

#17			JMPCN	$label0	{LNXT:3|4|1}
(-) BOOL
A180577A  2800     		cmp r0, #0
A180577C  D03C     		beq #120 ; 0xA18057F8


#18		
#19			(* THEN *)
#20		
#21		
#22				(* IF epprom_q_cnt <> q_counter *)
#23				LD		epprom_q_cnt	{LNXT:4|-1|-1}
(*) UNDEF
A1805780  F8DF 7078		ldr r7, [pc, #+120] ; 0xA00017F0
A1805784  6838     		ldr r0, [r7]

#24				NE		q_counter	{LNXT:4|-1|-1}
(*) DWORD
A1805786  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F08
A180578A  683F     		ldr r7, [r7]
A180578C  42B8     		cmp r0, r7
A180578E  BF08 2000		eqmov r0, #0
A1805792  BF18 2001		nemov r0, #1

#25				JMPCN	$label1	{LNXT:4|4|5}
(-) BOOL
A1805796  2800     		cmp r0, #0
A1805798  D010     		beq #32 ; 0xA18057BC


#26		
#27				(* THEN *)
#28		
#29					(* res_q := sysWriteParUINT(ADR(epprom_q_cnt), q_counter); *)
#30					ADR		epprom_q_cnt	{LNXT:4|5|-1}
(*) BOOL
A180579C  F8DF 005C		ldr r0, [pc, #+92] ; 0xA00017F0

#31					sysWriteParUINT		q_counter	{LNXT:4|5|-1}
(*) @DWORD
A18057A0  4607     		mov r7, r0
A18057A2  4638     		mov r0, r7
A18057A4  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0003F08
A18057A8  683F     		ldr r7, [r7]
A18057AA  4639     		mov r1, r7
A18057AC  F8DF 4090		ldr r4, [pc, #+144] ; 0x27D11
A18057B0  F044 0401		orr r4, r4, #1
A18057B4  47A0     		blx r4

#32					ST		res_q	{LNXT:4|5|-1}
(*) BOOL
A18057B6  F8DF 707C		ldr r7, [pc, #+124] ; 0xA1A00108
A18057BA  7038     		strb r0, [r7]

#33		
#34		$label1:
#35				(* END_IF *)
#36		
#37		
#38				(* IF epprom_kw_cnt <> kw_counter *)
#39				LD		epprom_kw_cnt	{LNXT:5|-1|-1}
(*) UNDEF
A18057BC  F8DF 7040		ldr r7, [pc, #+64] ; 0xA00017F8
A18057C0  6838     		ldr r0, [r7]

#40				NE		kw_counter	{LNXT:5|-1|-1}
(*) DWORD
A18057C2  F8DF 7040		ldr r7, [pc, #+64] ; 0xA0003F04
A18057C6  683F     		ldr r7, [r7]
A18057C8  42B8     		cmp r0, r7
A18057CA  BF08 2000		eqmov r0, #0
A18057CE  BF18 2001		nemov r0, #1

#41				JMPCN	$label2	{LNXT:5|5|1}
(-) BOOL
A18057D2  2800     		cmp r0, #0
A18057D4  D010     		beq #32 ; 0xA18057F8


#42		
#43				(* THEN *)
#44		
#45					(* res_kw := sysWriteParUINT(ADR(epprom_kw_cnt), kw_counter); *)
#46					ADR		epprom_kw_cnt	{LNXT:5|1|-1}
(*) BOOL
A18057D8  F8DF 0024		ldr r0, [pc, #+36] ; 0xA00017F8

#47					sysWriteParUINT		kw_counter	{LNXT:5|1|-1}
(*) @DWORD
A18057DC  4607     		mov r7, r0
A18057DE  4638     		mov r0, r7
A18057E0  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003F04
A18057E4  683F     		ldr r7, [r7]
A18057E6  4639     		mov r1, r7
A18057E8  F8DF 4054		ldr r4, [pc, #+84] ; 0x27D11
A18057EC  F044 0401		orr r4, r4, #1
A18057F0  47A0     		blx r4

#48					ST		res_kw	{LNXT:5|1|-1}
(*) BOOL
A18057F2  F8DF 7044		ldr r7, [pc, #+68] ; 0xA1A00109
A18057F6  7038     		strb r0, [r7]

A18057F8  E024     		b #72

A18057FC  FFFFFFFF		; 0xA00017F0
A1805800  FFFFFFFF		; 0xA00017F8
A1805804  FFFFFFFF		; 0xA0003F04
A1805808  FFFFFFFF		; 0xA0003F08
A180580C  A1804458		; 0xA1804458
A1805810  A1804490		; 0xA1804490
A1805814  A1A000E8		; 0xA1A000E8
A1805818  A1A000F0		; 0xA1A000F0
A180581C  A1A000F4		; 0xA1A000F4
A1805820  A1A000F8		; 0xA1A000F8
A1805824  A1A000FC		; 0xA1A000FC
A1805828  A1A00104		; 0xA1A00104
A180582C  A1A00105		; 0xA1A00105
A1805830  A1A00106		; 0xA1A00106
A1805834  A1A00108		; 0xA1A00108
A1805838  A1A00109		; 0xA1A00109
A180583C  00001388		; 0x00001388
A1805840  FFFFFFFF		; 0x00027D11

END_PROGRAM
**************************************************
	List program: sr_ATS_Ctrl
**************************************************

PROGRAM sr_ATS_Ctrl

        VAR
TON_StartUp_1 : TON;
TON_StartUp_2 : TON;
stopping_timer : TON;
downtimeIN : BOOL;
washing_timer : TON;
checkWashAndStart : CheckWashAndStart;
isRunningWash : BOOL;
onWash : BOOL := false;
time_sec : INT := 4000;
	END_VAR

END_PROGRAM

#0		{SRC:sr_ATS_Ctrl}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF i_pb_rem = 1 And
#5		Not Alarms.0 And 
#6		Not Alarms.3 And 
#7		Not Alarms.4 And 
#8		Not Alarms.5 And 
#9		Not Alarms.7 *)
#10			LD		Alarms.7	{LNXT:2|-1|-1}
(*) UNDEF
A1805844  F8DF 723C		ldr r7, [pc, #+572] ; 0xA0003F20
A1805848  8838     		ldrh r0, [r7]
A180584A  F3C0 10C0		ubfx r0, r0, #7, #1

#11			NOT	{LNXT:2|-1|-1}
(*) BOOL
A180584E  2800     		cmp r0, #0
A1805850  BF08 2001		eqmov r0, #1
A1805854  BF18 2000		nemov r0, #0

#12			AND(		Alarms.5	{LNXT:2|-1|-1}
(*) BOOL
A1805858  B082     		sub sp, sp, #8
A180585A  F8CD 0000		str r0, [sp]
A180585E  F8DF 7224		ldr r7, [pc, #+548] ; 0xA0003F20
A1805862  8838     		ldrh r0, [r7]
A1805864  F3C0 1040		ubfx r0, r0, #5, #1

#13			NOT	{LNXT:2|-1|-1}
(*) BOOL
A1805868  2800     		cmp r0, #0
A180586A  BF08 2001		eqmov r0, #1
A180586E  BF18 2000		nemov r0, #0

#14			AND(		Alarms.4	{LNXT:2|-1|-1}
(*) BOOL
A1805872  B082     		sub sp, sp, #8
A1805874  F8CD 0000		str r0, [sp]
A1805878  F8DF 7208		ldr r7, [pc, #+520] ; 0xA0003F20
A180587C  8838     		ldrh r0, [r7]
A180587E  F3C0 1000		ubfx r0, r0, #4, #1

#15			NOT	{LNXT:2|-1|-1}
(*) BOOL
A1805882  2800     		cmp r0, #0
A1805884  BF08 2001		eqmov r0, #1
A1805888  BF18 2000		nemov r0, #0

#16			AND(		Alarms.3	{LNXT:2|-1|-1}
(*) BOOL
A180588C  B082     		sub sp, sp, #8
A180588E  F8CD 0000		str r0, [sp]
A1805892  F8DF 71F0		ldr r7, [pc, #+496] ; 0xA0003F20
A1805896  8838     		ldrh r0, [r7]
A1805898  F3C0 00C0		ubfx r0, r0, #3, #1

#17			NOT	{LNXT:2|-1|-1}
(*) BOOL
A180589C  2800     		cmp r0, #0
A180589E  BF08 2001		eqmov r0, #1
A18058A2  BF18 2000		nemov r0, #0

#18			AND(		Alarms.0	{LNXT:2|-1|-1}
(*) BOOL
A18058A6  B082     		sub sp, sp, #8
A18058A8  F8CD 0000		str r0, [sp]
A18058AC  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA0003F20
A18058B0  8838     		ldrh r0, [r7]
A18058B2  F3C0 0000		ubfx r0, r0, #0, #1

#19			NOT	{LNXT:2|-1|-1}
(*) BOOL
A18058B6  2800     		cmp r0, #0
A18058B8  BF08 2001		eqmov r0, #1
A18058BC  BF18 2000		nemov r0, #0

#20			AND(		i_pb_rem	{LNXT:2|-1|-1}
(*) BOOL
A18058C0  B082     		sub sp, sp, #8
A18058C2  F8CD 0000		str r0, [sp]
A18058C6  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA1A00042
A18058CA  F9B7 0000		ldrsh r0, [r7]

#21			EQ		1	{LNXT:2|-1|-1}
(*) INT
A18058CE  2801     		cmp r0, #1
A18058D0  BF18 2000		nemov r0, #0
A18058D4  BF08 2001		eqmov r0, #1

#22			)	{LNXT:2|-1|-1}
(*) BOOL
A18058D8  4607     		mov r7, r0
A18058DA  F8DD 0000		ldr r0, [sp]
A18058DE  B002     		add sp, sp, #8
A18058E0  4038     		and r0, r0, r7

#23			)	{LNXT:2|-1|-1}
(*) BOOL
A18058E2  4607     		mov r7, r0
A18058E4  F8DD 0000		ldr r0, [sp]
A18058E8  B002     		add sp, sp, #8
A18058EA  4038     		and r0, r0, r7

#24			)	{LNXT:2|-1|-1}
(*) BOOL
A18058EC  4607     		mov r7, r0
A18058EE  F8DD 0000		ldr r0, [sp]
A18058F2  B002     		add sp, sp, #8
A18058F4  4038     		and r0, r0, r7

#25			)	{LNXT:2|-1|-1}
(*) BOOL
A18058F6  4607     		mov r7, r0
A18058F8  F8DD 0000		ldr r0, [sp]
A18058FC  B002     		add sp, sp, #8
A18058FE  4038     		and r0, r0, r7

#26			)	{LNXT:2|-1|-1}
(*) BOOL
A1805900  4607     		mov r7, r0
A1805902  F8DD 0000		ldr r0, [sp]
A1805906  B002     		add sp, sp, #8
A1805908  4038     		and r0, r0, r7

#27			JMPCN	$label0	{LNXT:2|9|30}
(-) BOOL
A180590A  2800     		cmp r0, #0
A180590C  D05C     		beq #184 ; 0xA18059C8


#28		
#29			(* THEN *)
#30		
#31		
#32				(* IF CMD.0 *)
#33				LD		CMD.0	{LNXT:9|-1|-1}
(*) UNDEF
A1805910  F8DF 7174		ldr r7, [pc, #+372] ; 0xA0003F22
A1805914  8838     		ldrh r0, [r7]
A1805916  F3C0 0000		ubfx r0, r0, #0, #1

#34				JMPCN	$label2	{LNXT:9|10|26}
(-) BOOL
A180591A  2800     		cmp r0, #0
A180591C  D04E     		beq #156 ; 0xA18059BC


#35		
#36				(* THEN *)
#37		
#38					(* checkWashAndStart *)
#39					MOVE		o_val_close_fall,checkWashAndStart.o_val_close_fall_FB	{LNXT:10|-1|-1}
(*) BOOL
A1805920  F8DF 01DC		ldr r0, [pc, #+476] ; 0x100004AD
A1805924  F8DF 718C		ldr r7, [pc, #+396] ; 0xA1A000B8
A1805928  6038     		str r0, [r7]

#40					MOVE		o_val_close_R,checkWashAndStart.o_val_close_R_FB	{LNXT:11|-1|-1}
(*) BOOL^
A180592A  F8DF 01DC		ldr r0, [pc, #+476] ; 0x100004AF
A180592E  F8DF 717C		ldr r7, [pc, #+380] ; 0xA1A000B0
A1805932  6038     		str r0, [r7]

#41					MOVE		o_val_open_fall,checkWashAndStart.o_val_open_fall_FB	{LNXT:12|-1|-1}
(*) BOOL^
A1805934  F8DF 01C4		ldr r0, [pc, #+452] ; 0x100004AC
A1805938  F8DF 7174		ldr r7, [pc, #+372] ; 0xA1A000B4
A180593C  6038     		str r0, [r7]

#42					MOVE		o_val_open_R,checkWashAndStart.o_val_open_R_FB	{LNXT:13|-1|-1}
(*) BOOL^
A180593E  F8DF 01C4		ldr r0, [pc, #+452] ; 0x100004AE
A1805942  F8DF 7164		ldr r7, [pc, #+356] ; 0xA1A000AC
A1805946  6038     		str r0, [r7]

#43					MOVE		sv_washing,checkWashAndStart.sv_washing_FB	{LNXT:14|-1|-1}
(*) BOOL^
A1805948  F8DF 0140		ldr r0, [pc, #+320] ; 0xA0003F26
A180594C  F8DF 7154		ldr r7, [pc, #+340] ; 0xA1A000A8
A1805950  6038     		str r0, [r7]

#44					MOVE		q_start_ats,checkWashAndStart.q_start_ats_FB	{LNXT:15|-1|-1}
(*) BOOL^
A1805952  F8DF 01B8		ldr r0, [pc, #+440] ; 0x100004B3
A1805956  F8DF 7160		ldr r7, [pc, #+352] ; 0xA1A000BC
A180595A  6038     		str r0, [r7]

#45					MOVE		time_sec,checkWashAndStart.ep_time_wash_FB	{LNXT:16|-1|-1}
(*) BOOL^
A180595C  F8DF 0178		ldr r0, [pc, #+376] ; 0xA1A000DC
A1805960  F8DF 7158		ldr r7, [pc, #+344] ; 0xA1A000C0
A1805964  6038     		str r0, [r7]

#46					MOVE		i_val_state,checkWashAndStart.i_val_state_FB	{LNXT:17|-1|-1}
(*) INT^
A1805966  F8DF 0174		ldr r0, [pc, #+372] ; 0xA1A000DE
A180596A  F8DF 7154		ldr r7, [pc, #+340] ; 0xA1A000C4
A180596E  6038     		str r0, [r7]

#47					MOVE		di_val_open_state_fall,checkWashAndStart.di_val_open_state_fall_FB	{LNXT:18|-1|-1}
(*) INT^
A1805970  F8DF 016C		ldr r0, [pc, #+364] ; 0xA1A000E0
A1805974  F8DF 714C		ldr r7, [pc, #+332] ; 0xA1A000C8
A1805978  6038     		str r0, [r7]

#48					MOVE		di_val_close_state_fall,checkWashAndStart.di_val_close_state_fall_FB	{LNXT:19|-1|-1}
(*) INT^
A180597A  F8DF 0168		ldr r0, [pc, #+360] ; 0xA1A000E2
A180597E  F8DF 7148		ldr r7, [pc, #+328] ; 0xA1A000CC
A1805982  6038     		str r0, [r7]

#49					MOVE		di_val_open_state_R,checkWashAndStart.di_val_open_state_R_FB	{LNXT:20|-1|-1}
(*) INT^
A1805984  F8DF 0160		ldr r0, [pc, #+352] ; 0xA1A000E4
A1805988  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A000D0
A180598C  6038     		str r0, [r7]

#50					MOVE		di_val_close_state_R,checkWashAndStart.di_val_close_state_R_FB	{LNXT:21|-1|-1}
(*) INT^
A180598E  F8DF 0108		ldr r0, [pc, #+264] ; 0xA1A00041
A1805992  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A000D4
A1805996  6038     		str r0, [r7]

#51					MOVE		Alarms_Val,checkWashAndStart.Alarm_Val_FB	{LNXT:22|-1|-1}
(*) BOOL^
A1805998  F8DF 00F4		ldr r0, [pc, #+244] ; 0xA0003F28
A180599C  F8DF 7134		ldr r7, [pc, #+308] ; 0xA1A000D8
A18059A0  6038     		str r0, [r7]

#52					CAL		checkWashAndStart	{LNXT:10|82|-1}
(*) WORD^
A18059A2  E92D 0021		stmdb sp!, { r0, r5 }
A18059A6  F8DF 50F8		ldr r5, [pc, #+248] ; 0xA1A00044
A18059AA  F8DF 40E8		ldr r4, [pc, #+232] ; 0xA1804758
A18059AE  F044 0401		orr r4, r4, #1
A18059B2  47A0     		blx r4
A18059B4  E8BD 0021		ldmia sp!, { r0, r5 }

#53					JMP		$label3	{LNXT:9|10|26}
(-) WORD^
A18059B8  E004     		b #8 ; 0xA18059C4


#54		$label2:
#55		
#56				(* ELSE *)
#57		
#58					(* q_start_ats := False; *)
#59					MOVE		False,q_start_ats	{LNXT:26|82|-1}
(*) WORD^
A18059BC  2000     		mov r0, #0 ; 0
A18059BE  F8DF 714C		ldr r7, [pc, #+332] ; 0x100004B3
A18059C2  7038     		strb r0, [r7]

#60		
#61		$label3:
#62				(* END_IF *)
#63				JMP		$label1	{LNXT:2|9|30}
(-) BOOL
A18059C4  E00D     		b #26 ; 0xA18059E2


#64		$label0:
#65		
#66			(* ELSE *)
#67		
#68				(* CMD.0 := False; *)
#69				MOVE		False,CMD.0	{LNXT:30|31|-1}
(*) BOOL
A18059C8  2000     		mov r0, #0 ; 0
A18059CA  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA0003F22
A18059CE  F8B7 8000		ldrh r8, [r7]
A18059D2  F360 0800		bfi r8, r0, #0, #1
A18059D6  F8A7 8000		strh r8, [r7]

#70		
#71				(* q_start_ats := False; *)
#72				MOVE		False,q_start_ats	{LNXT:31|82|-1}
(*) WORD
A18059DA  2000     		mov r0, #0 ; 0
A18059DC  F8DF 712C		ldr r7, [pc, #+300] ; 0x100004B3
A18059E0  7038     		strb r0, [r7]

#73		
#74		$label1:
#75			(* END_IF *)
#76		
#77		
#78			(* IF q_start_ats *)
#79			LD		q_start_ats	{LNXT:82|-1|-1}
(*) UNDEF
A18059E2  F8DF 7128		ldr r7, [pc, #+296] ; 0x100004B3
A18059E6  7838     		ldrb r0, [r7]

#80			NOT	{LNXT:82|-1|-1}
(*) BOOL
A18059E8  2800     		cmp r0, #0
A18059EA  BF08 2001		eqmov r0, #1
A18059EE  BF18 2000		nemov r0, #0

#81			JMPCN	$label4	{LNXT:82|83|85}
(-) BOOL
A18059F2  2800     		cmp r0, #0
A18059F4  D006     		beq #12 ; 0xA1805A04


#82		
#83			(* THEN *)
#84		
#85				(* downtimeIN:=true; *)
#86				MOVE		true,downtimeIN	{LNXT:83|95|-1}
(*) BOOL
A18059F8  2001     		mov r0, #1 ; 1
A18059FA  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A000E6
A18059FE  7038     		strb r0, [r7]

#87				JMP		$label5	{LNXT:82|83|85}
(-) BOOL
A1805A00  E004     		b #8 ; 0xA1805A0C


#88		$label4:
#89		
#90			(* ELSE *)
#91		
#92				(* downtimeIN:=false; *)
#93				MOVE		false,downtimeIN	{LNXT:85|95|-1}
(*) BOOL
A1805A04  2000     		mov r0, #0 ; 0
A1805A06  F8DF 70E4		ldr r7, [pc, #+228] ; 0xA1A000E6
A1805A0A  7038     		strb r0, [r7]

#94		
#95		$label5:
#96			(* END_IF *)
#97		
#98			(* Alarms.2 := i_sns_door; *)
#99			MOVE		i_sns_door,Alarms.2	{LNXT:95|98|-1}
(*) BOOL
A1805A0C  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A000E7
A1805A10  7838     		ldrb r0, [r7]
A1805A12  F8DF 7070		ldr r7, [pc, #+112] ; 0xA0003F20
A1805A16  F8B7 8000		ldrh r8, [r7]
A1805A1A  F360 0882		bfi r8, r0, #2, #1
A1805A1E  F8A7 8000		strh r8, [r7]

#100		
#101			(* Alarms.3 := i_rnpp; *)
#102			MOVE		i_rnpp,Alarms.3	{LNXT:98|104|-1}
(*) BOOL
A1805A22  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A000E8
A1805A26  7838     		ldrb r0, [r7]
A1805A28  F8DF 7058		ldr r7, [pc, #+88] ; 0xA0003F20
A1805A2C  F8B7 8000		ldrh r8, [r7]
A1805A30  F360 08C3		bfi r8, r0, #3, #1
A1805A34  F8A7 8000		strh r8, [r7]

#103		
#104			(* Alarms.5 := i_no_alm_ats; *)
#105			MOVE		i_no_alm_ats,Alarms.5	{LNXT:104|145|-1}
(*) BOOL
A1805A38  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA1A000E9
A1805A3C  7838     		ldrb r0, [r7]
A1805A3E  F8DF 7044		ldr r7, [pc, #+68] ; 0xA0003F20
A1805A42  F8B7 8000		ldrh r8, [r7]
A1805A46  F360 1845		bfi r8, r0, #5, #1
A1805A4A  F8A7 8000		strh r8, [r7]

#106		
#107		
#108			(* IF CMD.1 *)
#109			LD		CMD.1	{LNXT:145|-1|-1}
(*) UNDEF
A1805A4E  F8DF 7038		ldr r7, [pc, #+56] ; 0xA0003F22
A1805A52  8838     		ldrh r0, [r7]
A1805A54  F3C0 0040		ubfx r0, r0, #1, #1

#110			JMPCN	$label6	{LNXT:145|146|2}
(-) BOOL
A1805A58  2800     		cmp r0, #0
A1805A5A  D00D     		beq #26 ; 0xA1805A78


#111		
#112			(* THEN *)
#113		
#114				(* Alarms := 0; *)
#115				MOVE		0,Alarms	{LNXT:146|147|-1}
(*) BOOL
A1805A5E  2000     		mov r0, #0 ; 0
A1805A60  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003F20
A1805A64  8038     		strh r0, [r7]

#116		
#117				(* CMD.1 := False; *)
#118				MOVE		False,CMD.1	{LNXT:147|2|-1}
(*) WORD
A1805A66  2000     		mov r0, #0 ; 0
A1805A68  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0003F22
A1805A6C  F8B7 8000		ldrh r8, [r7]
A1805A70  F360 0841		bfi r8, r0, #1, #1
A1805A74  F8A7 8000		strh r8, [r7]

A1805A78  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805A7C  F8DD E000		ldr lr, [sp]
A1805A80  B002     		add sp, sp, #8

A1805A82  4770     		bx lr

A1805A84  FFFFFFFF		; 0xA0003F20
A1805A88  FFFFFFFF		; 0xA0003F22
A1805A8C  FFFFFFFF		; 0xA0003F26
A1805A90  FFFFFFFF		; 0xA0003F28
A1805A94  A1804758		; 0xA1804758
A1805A98  A1A00041		; 0xA1A00041
A1805A9C  A1A00042		; 0xA1A00042
A1805AA0  A1A00044		; 0xA1A00044
A1805AA4  A1A000A8		; 0xA1A000A8
A1805AA8  A1A000AC		; 0xA1A000AC
A1805AAC  A1A000B0		; 0xA1A000B0
A1805AB0  A1A000B4		; 0xA1A000B4
A1805AB4  A1A000B8		; 0xA1A000B8
A1805AB8  A1A000BC		; 0xA1A000BC
A1805ABC  A1A000C0		; 0xA1A000C0
A1805AC0  A1A000C4		; 0xA1A000C4
A1805AC4  A1A000C8		; 0xA1A000C8
A1805AC8  A1A000CC		; 0xA1A000CC
A1805ACC  A1A000D0		; 0xA1A000D0
A1805AD0  A1A000D4		; 0xA1A000D4
A1805AD4  A1A000D8		; 0xA1A000D8
A1805AD8  A1A000DC		; 0xA1A000DC
A1805ADC  A1A000DE		; 0xA1A000DE
A1805AE0  A1A000E0		; 0xA1A000E0
A1805AE4  A1A000E2		; 0xA1A000E2
A1805AE8  A1A000E4		; 0xA1A000E4
A1805AEC  A1A000E6		; 0xA1A000E6
A1805AF0  A1A000E7		; 0xA1A000E7
A1805AF4  A1A000E8		; 0xA1A000E8
A1805AF8  A1A000E9		; 0xA1A000E9
A1805AFC  FFFFFFFF		; 0x100004AC
A1805B00  FFFFFFFF		; 0x100004AD
A1805B04  FFFFFFFF		; 0x100004AE
A1805B08  FFFFFFFF		; 0x100004AF
A1805B0C  FFFFFFFF		; 0x100004B3

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1805B10  B082     		sub sp, sp, #8
A1805B12  F8CD E000		str lr, [sp]
A1805B16  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805B1A  F8DF 70D0		ldr r7, [pc, #+208] ; 0x10000450
A1805B1E  8838     		ldrh r0, [r7]
A1805B20  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A00042
A1805B24  8038     		strh r0, [r7]

A1805B26  F8DF 70B4		ldr r7, [pc, #+180] ; 0x10000446
A1805B2A  8838     		ldrh r0, [r7]
A1805B2C  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A000DE
A1805B30  8038     		strh r0, [r7]

A1805B32  F8DF 70AC		ldr r7, [pc, #+172] ; 0x10000448
A1805B36  8838     		ldrh r0, [r7]
A1805B38  F8DF 7070		ldr r7, [pc, #+112] ; 0xA1A000E0
A1805B3C  8038     		strh r0, [r7]

A1805B3E  F8DF 70A4		ldr r7, [pc, #+164] ; 0x1000044A
A1805B42  8838     		ldrh r0, [r7]
A1805B44  F8DF 7068		ldr r7, [pc, #+104] ; 0xA1A000E2
A1805B48  8038     		strh r0, [r7]

A1805B4A  F8DF 709C		ldr r7, [pc, #+156] ; 0x1000044C
A1805B4E  8838     		ldrh r0, [r7]
A1805B50  F8DF 7060		ldr r7, [pc, #+96] ; 0xA1A000E4
A1805B54  8038     		strh r0, [r7]

A1805B56  F8DF 7070		ldr r7, [pc, #+112] ; 0x10000420
A1805B5A  7838     		ldrb r0, [r7]
A1805B5C  F8DF 7040		ldr r7, [pc, #+64] ; 0xA1A00041
A1805B60  7038     		strb r0, [r7]

A1805B62  F8DF 7068		ldr r7, [pc, #+104] ; 0x10000423
A1805B66  7838     		ldrb r0, [r7]
A1805B68  F8DF 704C		ldr r7, [pc, #+76] ; 0xA1A000E7
A1805B6C  7038     		strb r0, [r7]

A1805B6E  F8DF 7060		ldr r7, [pc, #+96] ; 0x10000424
A1805B72  7838     		ldrb r0, [r7]
A1805B74  F8DF 7044		ldr r7, [pc, #+68] ; 0xA1A000E8
A1805B78  7038     		strb r0, [r7]

A1805B7A  F8DF 7058		ldr r7, [pc, #+88] ; 0x10000426
A1805B7E  7838     		ldrb r0, [r7]
A1805B80  F8DF 703C		ldr r7, [pc, #+60] ; 0xA1A000E9
A1805B84  7038     		strb r0, [r7]

A1805B86  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000442
A1805B8A  8838     		ldrh r0, [r7]
A1805B8C  F8DF 7034		ldr r7, [pc, #+52] ; 0xA1A000EE
A1805B90  8038     		strh r0, [r7]

A1805B92  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805B96  F8DD E000		ldr lr, [sp]
A1805B9A  B002     		add sp, sp, #8

A1805B9C  4770     		bx lr

A1805BA0  A1A00041		; 0xA1A00041
A1805BA4  A1A00042		; 0xA1A00042
A1805BA8  A1A000DE		; 0xA1A000DE
A1805BAC  A1A000E0		; 0xA1A000E0
A1805BB0  A1A000E2		; 0xA1A000E2
A1805BB4  A1A000E4		; 0xA1A000E4
A1805BB8  A1A000E7		; 0xA1A000E7
A1805BBC  A1A000E8		; 0xA1A000E8
A1805BC0  A1A000E9		; 0xA1A000E9
A1805BC4  A1A000EE		; 0xA1A000EE
A1805BC8  FFFFFFFF		; 0x10000420
A1805BCC  FFFFFFFF		; 0x10000423
A1805BD0  FFFFFFFF		; 0x10000424
A1805BD4  FFFFFFFF		; 0x10000426
A1805BD8  FFFFFFFF		; 0x10000442
A1805BDC  FFFFFFFF		; 0x10000446
A1805BE0  FFFFFFFF		; 0x10000448
A1805BE4  FFFFFFFF		; 0x1000044A
A1805BE8  FFFFFFFF		; 0x1000044C
A1805BEC  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1805BF0  B082     		sub sp, sp, #8
A1805BF2  F8CD E000		str lr, [sp]
A1805BF6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805BFA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805BFE  F8DD E000		ldr lr, [sp]
A1805C02  B002     		add sp, sp, #8

A1805C04  4770     		bx lr



**************************************************
	Task Timed init code
**************************************************

A1805C06  B082     		sub sp, sp, #8
A1805C08  F8CD E000		str lr, [sp]
A1805C0C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

Var init: V::SR_ATS_CTRL.TIME_SEC = 4000
A1805C10  F8DF 0018		ldr r0, [pc, #+24] ; 0xFA0
A1805C14  F8DF 7010		ldr r7, [pc, #+16] ; 0xA1A000DC
A1805C18  8038     		strh r0, [r7]

A1805C1A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805C1E  F8DD E000		ldr lr, [sp]
A1805C22  B002     		add sp, sp, #8

A1805C24  4770     		bx lr

A1805C28  A1A000DC		; 0xA1A000DC
A1805C2C  00000FA0		; 0x00000FA0



**************************************************
	Global init code
**************************************************

A1805C40  B082     		sub sp, sp, #8
A1805C42  F8CD E000		str lr, [sp]
A1805C46  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805C4A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805C4E  F8DD E000		ldr lr, [sp]
A1805C52  B002     		add sp, sp, #8

A1805C54  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

A1805C56  B082     		sub sp, sp, #8
A1805C58  F8CD E000		str lr, [sp]
A1805C5C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805C60  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805C64  F8DD E000		ldr lr, [sp]
A1805C68  B002     		add sp, sp, #8

A1805C6A  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000A1800000h
End code area:            		00000000A180610Ch
Code size:                		0000610Ch

Start local data area:    		00000000A1A00000h
End local data area:      		00000000A1A0010Ah
Local data size:          		0000010Ah

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                A405EDA0
DEBUG MEMO ID:                          A180B976
FULL MEMO ID:                           0000FF2D
********************************************
