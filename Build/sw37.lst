***********************************************************************
*
*	CODE GENERATION LISTING FOR: sw37
*	COMPILER VERSION: 6.0.0.52
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
A18043F0  FB90 F3F1		sdiv r3, r0, r1
A18043F4  4359     		mul r1, r1, r3
A18043F6  EBC1 0000		rsb r0, r1, r0
A18043FA  4770     		bx lr

$$MOD_U:
A18043FC  FBB0 F3F1		udiv r3, r0, r1
A1804400  4359     		mul r1, r1, r3
A1804402  EBC1 0000		rsb r0, r1, r0
A1804406  4770     		bx lr

**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"<HTML>The output Q will remain FALSE as long as the input variable CLK is FALSE.<br>
As soon as CLK returns TRUE, Q will first return TRUE.<br><br>
This means each time the function is called up, Q will return FALSE until CLK has falling edge followed by an rising edge.<br><br>
<img src= r_trig.png>" }

        VAR_INPUT
clk : BOOL;	{ DE:"Input for edge detection" }
	END_VAR

        VAR_OUTPUT
q : BOOL;	{ DE:"Raising edge output" }
	END_VAR

        VAR
m : BOOL := FALSE;
	END_VAR

END_FUNCTION_BLOCK

A1804408  E92D 4040		stmdb sp!, { r6, lr }
A180440C  462E     		mov r6, r5

#0		{SRC:R_TRIG}
#1		
#2			LD		clk
(*) UNDEF
A180440E  F8DF 7028		ldr r7, [pc, #+40] ; 0x1
A1804412  5DF0     		ldrb r0, [r6, +r7]

#3			ANDN	m
(*) BOOL
A1804414  7837     		ldrb r7, [r6]
A1804416  2F00     		cmp r7, #0
A1804418  BF08 2701		eqmov r7, #1
A180441C  BF18 2700		nemov r7, #0
A1804420  4038     		and r0, r0, r7

#4			ST		q
(*) BOOL
A1804422  F8DF 7018		ldr r7, [pc, #+24] ; 0x2
A1804426  55F0     		strb r0, [r6, +r7]

#5		
#6			LD		clk
(*) UNDEF
A1804428  F8DF 700C		ldr r7, [pc, #+12] ; 0x1
A180442C  5DF0     		ldrb r0, [r6, +r7]

#7			ST		m
(-) BOOL
A180442E  7030     		strb r0, [r6]

A1804430  E8BD 4040		ldmia sp!, { r6, lr }

A1804434  4770     		bx lr

A1804438  00000001		; 0x00000001
A180443C  00000002		; 0x00000002


Frame allocation (hex):

	0000 bit  0: VAR m
	0001 bit  0: VAR clk
	0002 bit  0: VAR q

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

A1804440  E92D 4040		stmdb sp!, { r6, lr }
A1804444  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
A1804446  F8DF 7084		ldr r7, [pc, #+132] ; 0x4
A180444A  5DF0     		ldrb r0, [r6, +r7]

#5			JMPCN	lReset
(-) BOOL
A180444C  2800     		cmp r0, #0
A180444E  D031     		beq #98 ; 0xA18044B4


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
A1804452  F8DF 7080		ldr r7, [pc, #+128] ; 0xC
A1804456  5DF0     		ldrb r0, [r6, +r7]

#9			RETC
#10			
(-) BOOL
A1804458  2800     		cmp r0, #0
A180445A  D134     		bne #104 ; 0xA18044C6


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
A180445E  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
A1804460  2800     		cmp r0, #0
A1804462  BF18 2000		nemov r0, #0
A1804466  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
A180446A  2800     		cmp r0, #0
A180446C  D004     		beq #8 ; 0xA1804478


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
A1804470  F8DF 7068		ldr r7, [pc, #+104] ; 0x1000052C
A1804474  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
A1804476  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
A1804478  F8DF 7060		ldr r7, [pc, #+96] ; 0x1000052C
A180447C  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
A180447E  6837     		ldr r7, [r6]
A1804480  1BC0     		sub r0, r0, r7

#25			ST		ET
(*) UDINT
A1804482  F8DF 7054		ldr r7, [pc, #+84] ; 0x10
A1804486  51F0     		str r0, [r6, +r7]

#26			GE		PT
(*) UDINT
A1804488  F8DF 7044		ldr r7, [pc, #+68] ; 0x8
A180448C  59F7     		ldr r7, [r6, +r7]
A180448E  42B8     		cmp r0, r7
A1804490  BF38 2000		lomov r0, #0
A1804494  BF28 2001		hsmov r0, #1

#27			ST		Q
(*) BOOL
A1804498  F8DF 7038		ldr r7, [pc, #+56] ; 0xC
A180449C  55F0     		strb r0, [r6, +r7]

#28			RETCN
#29		
(-) BOOL
A180449E  2800     		cmp r0, #0
A18044A0  D011     		beq #34 ; 0xA18044C6


#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
A18044A4  F8DF 7028		ldr r7, [pc, #+40] ; 0x8
A18044A8  59F0     		ldr r0, [r6, +r7]

#32			ST		ET
(*) UDINT
A18044AA  F8DF 702C		ldr r7, [pc, #+44] ; 0x10
A18044AE  51F0     		str r0, [r6, +r7]

#33			RET
#34		
(-) UDINT
A18044B0  E009     		b #18 ; 0xA18044C6


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
A18044B4  2000     		mov r0, #0 ; 0

#39			ST		ET
(*) USINT
A18044B6  F8DF 7020		ldr r7, [pc, #+32] ; 0x10
A18044BA  51F0     		str r0, [r6, +r7]

#40			ST		timStart
(-) UDINT
A18044BC  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
A18044BE  2000     		mov r0, #0 ; 0

#42			ST		Q
(*) BOOL
A18044C0  F8DF 7010		ldr r7, [pc, #+16] ; 0xC
A18044C4  55F0     		strb r0, [r6, +r7]

A18044C6  E8BD 4040		ldmia sp!, { r6, lr }

A18044CA  4770     		bx lr

A18044CC  00000004		; 0x00000004
A18044D0  00000008		; 0x00000008
A18044D4  0000000C		; 0x0000000C
A18044D8  00000010		; 0x00000010
A18044DC  FFFFFFFF		; 0x1000052C


Frame allocation (hex):

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: CheckWashAndStart
**************************************************

FUNCTION_BLOCK CheckWashAndStart

        VAR_IN_OUT
sv_washing : BOOL;
o_val_open_R : BOOL;
o_val_close_R : BOOL;
o_val_open_fall : BOOL;
o_val_close_fall : BOOL;
q_start_ats : BOOL;
ep_time_wash : INT;
	END_VAR

        VAR
washing_timer : TON;	{ DE:"локальний FB таймера" }
	END_VAR

END_FUNCTION_BLOCK

A18044E0  E92D 4040		stmdb sp!, { r6, lr }
A18044E4  462E     		mov r6, r5

#0		{SRC:CheckWashAndStart}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF sv_washing *)
#5			LD		sv_washing	{LNXT:1|-1|-1}
(*) UNDEF
A18044E6  F8DF 70A0		ldr r7, [pc, #+160] ; 0x14
A18044EA  5DF0     		ldrb r0, [r6, +r7]

#6			JMPCN	$label0	{LNXT:1|2|7}
(-) BOOL
A18044EC  2800     		cmp r0, #0
A18044EE  D00E     		beq #28 ; 0xA180450E


#7		
#8			(* THEN *)
#9		
#10				(* o_val_close_R:=true; *)
#11				MOVE		true,o_val_close_R	{LNXT:2|3|-1}
(*) BOOL
A18044F2  2001     		mov r0, #1 ; 1
A18044F4  F8DF 7098		ldr r7, [pc, #+152] ; 0x16
A18044F8  55F0     		strb r0, [r6, +r7]

#12		
#13				(* o_val_open_fall:=true; *)
#14				MOVE		true,o_val_open_fall	{LNXT:3|4|-1}
(*) BOOL
A18044FA  2001     		mov r0, #1 ; 1
A18044FC  F8DF 7094		ldr r7, [pc, #+148] ; 0x17
A1804500  55F0     		strb r0, [r6, +r7]

#15		
#16				(* q_start_ats:=true; *)
#17				MOVE		true,q_start_ats	{LNXT:4|11|-1}
(*) BOOL
A1804502  2001     		mov r0, #1 ; 1
A1804504  F8DF 7094		ldr r7, [pc, #+148] ; 0x19
A1804508  55F0     		strb r0, [r6, +r7]

#18				JMP		$label1	{LNXT:1|2|7}
(-) BOOL
A180450A  E004     		b #8 ; 0xA1804516


#19		$label0:
#20		
#21			(* ELSE *)
#22		
#23				(* q_start_ats:=true; *)
#24				MOVE		true,q_start_ats	{LNXT:7|11|-1}
(*) BOOL
A180450E  2001     		mov r0, #1 ; 1
A1804510  F8DF 7088		ldr r7, [pc, #+136] ; 0x19
A1804514  55F0     		strb r0, [r6, +r7]

#25		
#26		$label1:
#27			(* END_IF *)
#28		
#29			(* washing_timer *)
#30			MOVE		sv_washing,washing_timer.IN	{LNXT:11|-1|-1}
(*) BOOL
A1804516  F8DF 7070		ldr r7, [pc, #+112] ; 0x14
A180451A  5DF0     		ldrb r0, [r6, +r7]
A180451C  F8DF 705C		ldr r7, [pc, #+92] ; 0x4
A1804520  55F0     		strb r0, [r6, +r7]

#31			MOVE		ep_time_wash,washing_timer.PT	{LNXT:11|-1|-1}
(*) BOOL
A1804522  F8DF 707C		ldr r7, [pc, #+124] ; 0x1A
A1804526  5FF0     		ldrsh r0, [r6, +r7]
A1804528  F8DF 7054		ldr r7, [pc, #+84] ; 0x8
A180452C  51F0     		str r0, [r6, +r7]

#32			CAL		washing_timer	{LNXT:11|13|-1}
(*) UDINT
A180452E  E92D 0021		stmdb sp!, { r0, r5 }
A1804532  4635     		mov r5, r6
A1804534  467C     		mov r4, pc
A1804536  3CF8     		sub  r4, r4, #+0xF8 ; 0xA1804440
A1804538  F044 0401		orr r4, r4, #1
A180453C  47A0     		blx r4
A180453E  E8BD 0021		ldmia sp!, { r0, r5 }

#33		
#34		
#35			(* IF washing_timer.Q *)
#36			LD		washing_timer.Q	{LNXT:13|-1|-1}
(*) UNDEF
A1804542  F8DF 7040		ldr r7, [pc, #+64] ; 0xC
A1804546  5DF0     		ldrb r0, [r6, +r7]

#37			JMPCN	$label2	{LNXT:13|14|-1}
(-) BOOL
A1804548  2800     		cmp r0, #0
A180454A  D014     		beq #40 ; 0xA1804576


#38		
#39			(* THEN *)
#40		
#41				(* o_val_close_R:=false; *)
#42				MOVE		false,o_val_close_R	{LNXT:14|15|-1}
(*) BOOL
A180454E  2000     		mov r0, #0 ; 0
A1804550  F8DF 703C		ldr r7, [pc, #+60] ; 0x16
A1804554  55F0     		strb r0, [r6, +r7]

#43		
#44				(* o_val_open_fall:=false; *)
#45				MOVE		false,o_val_open_fall	{LNXT:15|17|-1}
(*) BOOL
A1804556  2000     		mov r0, #0 ; 0
A1804558  F8DF 7038		ldr r7, [pc, #+56] ; 0x17
A180455C  55F0     		strb r0, [r6, +r7]

#46		
#47				(* o_val_open_R:=true; *)
#48				MOVE		true,o_val_open_R	{LNXT:17|18|-1}
(*) BOOL
A180455E  2001     		mov r0, #1 ; 1
A1804560  F8DF 7028		ldr r7, [pc, #+40] ; 0x15
A1804564  55F0     		strb r0, [r6, +r7]

#49		
#50				(* o_val_close_fall:=true; *)
#51				MOVE		true,o_val_close_fall	{LNXT:18|20|-1}
(*) BOOL
A1804566  2001     		mov r0, #1 ; 1
A1804568  F8DF 702C		ldr r7, [pc, #+44] ; 0x18
A180456C  55F0     		strb r0, [r6, +r7]

#52		
#53				(* sv_washing:=false; *)
#54				MOVE		false,sv_washing	{LNXT:20|-1|-1}
(*) BOOL
A180456E  2000     		mov r0, #0 ; 0
A1804570  F8DF 7014		ldr r7, [pc, #+20] ; 0x14
A1804574  55F0     		strb r0, [r6, +r7]

A1804576  E8BD 4040		ldmia sp!, { r6, lr }

A180457A  4770     		bx lr

A180457C  00000004		; 0x00000004
A1804580  00000008		; 0x00000008
A1804584  0000000C		; 0x0000000C
A1804588  00000014		; 0x00000014
A180458C  00000015		; 0x00000015
A1804590  00000016		; 0x00000016
A1804594  00000017		; 0x00000017
A1804598  00000018		; 0x00000018
A180459C  00000019		; 0x00000019
A18045A0  0000001A		; 0x0000001A


Frame allocation (hex):

	0000       : FB washing_timer
	0014 bit  0: VAR sv_washing
	0015 bit  0: VAR o_val_open_R
	0016 bit  0: VAR o_val_close_R
	0017 bit  0: VAR o_val_open_fall
	0018 bit  0: VAR o_val_close_fall
	0019 bit  0: VAR q_start_ats
	001A       : VAR ep_time_wash

END_FUNCTION_BLOCK
**************************************************
	List program: ATS_mdb
**************************************************

PROGRAM ATS_mdb

        VAR
res_eta_lcr : UINT;
resp_eta_lcr : ARRAY[0..3] OF INT;
res : INT;
xTON : TON;
	END_VAR

END_PROGRAM

A18045B0  B082     		sub sp, sp, #8
A18045B2  F8CD E000		str lr, [sp]
A18045B6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ATS_mdb}
#1		(*$WAITSWITCH$*)
#2		
#3			(* res := sysMbMRTU_FC03(	addr := 1, 
#4											base := 257, // 256
#5											no := 4, 
#6											object := ADR(resp_eta_lcr), 
#7											timeout := 200); *)
#8			ADR		resp_eta_lcr	{LNXT:2|8|-1}
(*) UDINT
A18045BA  F8DF 0510		ldr r0, [pc, #+1296] ; 0xA1A0000C

#9			ST		$$TMP0	{LNXT:2|8|-1}
(*) @INT
A18045BE  F8DF 751C		ldr r7, [pc, #+1308] ; 0xA1A00014
A18045C2  6038     		str r0, [r7]

#10			LDP0		1	{LNXT:2|8|-1}
(-) @INT
#11			sysMbMRTU_FC03		257, 4, $$TMP0, 200	{LNXT:2|8|-1}
(*) @INT
A18045C4  B082     		sub sp, sp, #8
A18045C6  2001     		mov r0, #1 ; 1
A18045C8  F8DF 7570		ldr r7, [pc, #+1392] ; 0x101
A18045CC  4639     		mov r1, r7
A18045CE  2704     		mov r7, #4 ; 4
A18045D0  463A     		mov r2, r7
A18045D2  F8DF 7508		ldr r7, [pc, #+1288] ; 0xA1A00014
A18045D6  683B     		ldr r3, [r7]
A18045D8  27C8     		mov r7, #200 ; 200
A18045DA  F8CD 7000		str r7, [sp]
A18045DE  F8DF 4564		ldr r4, [pc, #+1380] ; 0x241DB
A18045E2  F044 0401		orr r4, r4, #1
A18045E6  47A0     		blx r4
A18045E8  B002     		add sp, sp, #8

#12			ST		res	{LNXT:2|8|-1}
(*) UINT
A18045EA  F8DF 74F4		ldr r7, [pc, #+1268] ; 0xA1A00018
A18045EE  8038     		strh r0, [r7]

#13		
#14			(* ATS22_DUT.Ready 	:= to_bool(resp_eta_lcr[0] And 16#01); *)
#15			LD		resp_eta_lcr[0]	{LNXT:8|9|-1}
(*) UNDEF
A18045F0  F8DF 74D8		ldr r7, [pc, #+1240] ; 0xA1A0000C
A18045F4  F9B7 0000		ldrsh r0, [r7]

#16			AND		16#01	{LNXT:8|9|-1}
(*) INT
A18045F8  2701     		mov r7, #1 ; 1
A18045FA  4038     		and r0, r0, r7

#17			to_bool	{LNXT:8|9|-1}
(*) INT
A18045FC  2800     		cmp r0, #0
A18045FE  BF18 2001		nemov r0, #1
A1804602  BF08 2000		eqmov r0, #0

#18			ST		ATS22_DUT.Ready	{LNXT:8|9|-1}
(*) BOOL
A1804606  F8DF 74E4		ldr r7, [pc, #+1252] ; 0xA1A0001C
A180460A  7038     		strb r0, [r7]

#19		
#20			(* ATS22_DUT.On 		:= to_bool(resp_eta_lcr[0] And 16#02); *)
#21			LD		resp_eta_lcr[0]	{LNXT:9|10|-1}
(*) UNDEF
A180460C  F8DF 74BC		ldr r7, [pc, #+1212] ; 0xA1A0000C
A1804610  F9B7 0000		ldrsh r0, [r7]

#22			AND		16#02	{LNXT:9|10|-1}
(*) INT
A1804614  2702     		mov r7, #2 ; 2
A1804616  4038     		and r0, r0, r7

#23			to_bool	{LNXT:9|10|-1}
(*) INT
A1804618  2800     		cmp r0, #0
A180461A  BF18 2001		nemov r0, #1
A180461E  BF08 2000		eqmov r0, #0

#24			ST		ATS22_DUT.On	{LNXT:9|10|-1}
(*) BOOL
A1804622  F8DF 74CC		ldr r7, [pc, #+1228] ; 0xA1A0001D
A1804626  7038     		strb r0, [r7]

#25		
#26			(* ATS22_DUT.Trip 		:= to_bool(resp_eta_lcr[0] And 16#04); *)
#27			LD		resp_eta_lcr[0]	{LNXT:10|11|-1}
(*) UNDEF
A1804628  F8DF 74A0		ldr r7, [pc, #+1184] ; 0xA1A0000C
A180462C  F9B7 0000		ldrsh r0, [r7]

#28			AND		16#04	{LNXT:10|11|-1}
(*) INT
A1804630  2704     		mov r7, #4 ; 4
A1804632  4038     		and r0, r0, r7

#29			to_bool	{LNXT:10|11|-1}
(*) INT
A1804634  2800     		cmp r0, #0
A1804636  BF18 2001		nemov r0, #1
A180463A  BF08 2000		eqmov r0, #0

#30			ST		ATS22_DUT.Trip	{LNXT:10|11|-1}
(*) BOOL
A180463E  F8DF 74B4		ldr r7, [pc, #+1204] ; 0xA1A0001E
A1804642  7038     		strb r0, [r7]

#31		
#32			(* ATS22_DUT.Warning 	:= to_bool(resp_eta_lcr[0] And 16#08); *)
#33			LD		resp_eta_lcr[0]	{LNXT:11|12|-1}
(*) UNDEF
A1804644  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A0000C
A1804648  F9B7 0000		ldrsh r0, [r7]

#34			AND		16#08	{LNXT:11|12|-1}
(*) INT
A180464C  2708     		mov r7, #8 ; 8
A180464E  4038     		and r0, r0, r7

#35			to_bool	{LNXT:11|12|-1}
(*) INT
A1804650  2800     		cmp r0, #0
A1804652  BF18 2001		nemov r0, #1
A1804656  BF08 2000		eqmov r0, #0

#36			ST		ATS22_DUT.Warning	{LNXT:11|12|-1}
(*) BOOL
A180465A  F8DF 749C		ldr r7, [pc, #+1180] ; 0xA1A0001F
A180465E  7038     		strb r0, [r7]

#37		
#38			(* ATS22_DUT.LI3 		:= to_bool(resp_eta_lcr[0] And 16#20); *)
#39			LD		resp_eta_lcr[0]	{LNXT:12|13|-1}
(*) UNDEF
A1804660  F8DF 7468		ldr r7, [pc, #+1128] ; 0xA1A0000C
A1804664  F9B7 0000		ldrsh r0, [r7]

#40			AND		16#20	{LNXT:12|13|-1}
(*) INT
A1804668  2720     		mov r7, #32 ; 32
A180466A  4038     		and r0, r0, r7

#41			to_bool	{LNXT:12|13|-1}
(*) INT
A180466C  2800     		cmp r0, #0
A180466E  BF18 2001		nemov r0, #1
A1804672  BF08 2000		eqmov r0, #0

#42			ST		ATS22_DUT.LI3	{LNXT:12|13|-1}
(*) BOOL
A1804676  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A00020
A180467A  7038     		strb r0, [r7]

#43		
#44			(* ATS22_DUT.LI2 		:= to_bool(resp_eta_lcr[0] And 16#40); *)
#45			LD		resp_eta_lcr[0]	{LNXT:13|14|-1}
(*) UNDEF
A180467C  F8DF 744C		ldr r7, [pc, #+1100] ; 0xA1A0000C
A1804680  F9B7 0000		ldrsh r0, [r7]

#46			AND		16#40	{LNXT:13|14|-1}
(*) INT
A1804684  2740     		mov r7, #64 ; 64
A1804686  4038     		and r0, r0, r7

#47			to_bool	{LNXT:13|14|-1}
(*) INT
A1804688  2800     		cmp r0, #0
A180468A  BF18 2001		nemov r0, #1
A180468E  BF08 2000		eqmov r0, #0

#48			ST		ATS22_DUT.LI2	{LNXT:13|14|-1}
(*) BOOL
A1804692  F8DF 746C		ldr r7, [pc, #+1132] ; 0xA1A00021
A1804696  7038     		strb r0, [r7]

#49		
#50			(* ATS22_DUT.LI1 		:= to_bool(resp_eta_lcr[0] And 16#80); *)
#51			LD		resp_eta_lcr[0]	{LNXT:14|17|-1}
(*) UNDEF
A1804698  F8DF 7430		ldr r7, [pc, #+1072] ; 0xA1A0000C
A180469C  F9B7 0000		ldrsh r0, [r7]

#52			AND		16#80	{LNXT:14|17|-1}
(*) INT
A18046A0  2780     		mov r7, #128 ; 128
A18046A2  4038     		and r0, r0, r7

#53			to_bool	{LNXT:14|17|-1}
(*) INT
A18046A4  2800     		cmp r0, #0
A18046A6  BF18 2001		nemov r0, #1
A18046AA  BF08 2000		eqmov r0, #0

#54			ST		ATS22_DUT.LI1	{LNXT:14|17|-1}
(*) BOOL
A18046AE  F8DF 7454		ldr r7, [pc, #+1108] ; 0xA1A00022
A18046B2  7038     		strb r0, [r7]

#55		
#56			(* ATS_State_bits.0 := ATS22_DUT.Ready; *)
#57			MOVE		ATS22_DUT.Ready,ATS_State_bits.0	{LNXT:17|18|-1}
(*) BOOL
A18046B4  F8DF 7434		ldr r7, [pc, #+1076] ; 0xA1A0001C
A18046B8  7838     		ldrb r0, [r7]
A18046BA  F8DF 73E8		ldr r7, [pc, #+1000] ; 0xA0003F10
A18046BE  F8B7 8000		ldrh r8, [r7]
A18046C2  F360 0800		bfi r8, r0, #0, #1
A18046C6  F8A7 8000		strh r8, [r7]

#58		
#59			(* ATS_State_bits.1 := ATS22_DUT.On And i_run_ats; *)
#60			LD		ATS22_DUT.On	{LNXT:18|19|-1}
(*) UNDEF
A18046CA  F8DF 7424		ldr r7, [pc, #+1060] ; 0xA1A0001D
A18046CE  7838     		ldrb r0, [r7]

#61			AND		i_run_ats	{LNXT:18|19|-1}
(*) BOOL
A18046D0  F8DF 7414		ldr r7, [pc, #+1044] ; 0xA1A0001B
A18046D4  783F     		ldrb r7, [r7]
A18046D6  4038     		and r0, r0, r7

#62			ST		ATS_State_bits.1	{LNXT:18|19|-1}
(*) BOOL
A18046D8  F8DF 73C8		ldr r7, [pc, #+968] ; 0xA0003F10
A18046DC  F8B7 8000		ldrh r8, [r7]
A18046E0  F360 0841		bfi r8, r0, #1, #1
A18046E4  F8A7 8000		strh r8, [r7]

#63		
#64			(* ATS_State_bits.2 := ATS22_DUT.Trip Or Not i_no_alm_ats ; *)
#65			LD		i_no_alm_ats	{LNXT:19|20|-1}
(*) UNDEF
A18046E8  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001A
A18046EC  7838     		ldrb r0, [r7]

#66			NOT	{LNXT:19|20|-1}
(*) BOOL
A18046EE  2800     		cmp r0, #0
A18046F0  BF08 2001		eqmov r0, #1
A18046F4  BF18 2000		nemov r0, #0

#67			OR		ATS22_DUT.Trip	{LNXT:19|20|-1}
(*) BOOL
A18046F8  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001E
A18046FC  783F     		ldrb r7, [r7]
A18046FE  4338     		orr r0, r0, r7

#68			ST		ATS_State_bits.2	{LNXT:19|20|-1}
(*) BOOL
A1804700  F8DF 73A0		ldr r7, [pc, #+928] ; 0xA0003F10
A1804704  F8B7 8000		ldrh r8, [r7]
A1804708  F360 0882		bfi r8, r0, #2, #1
A180470C  F8A7 8000		strh r8, [r7]

#69		
#70			(* ATS_State_bits.3 := ATS22_DUT.Warning; *)
#71			MOVE		ATS22_DUT.Warning,ATS_State_bits.3	{LNXT:20|21|-1}
(*) BOOL
A1804710  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A0001F
A1804714  7838     		ldrb r0, [r7]
A1804716  F8DF 738C		ldr r7, [pc, #+908] ; 0xA0003F10
A180471A  F8B7 8000		ldrh r8, [r7]
A180471E  F360 08C3		bfi r8, r0, #3, #1
A1804722  F8A7 8000		strh r8, [r7]

#72		
#73			(* ATS_State_bits.4 := ATS22_DUT.Local; *)
#74			MOVE		ATS22_DUT.Local,ATS_State_bits.4	{LNXT:21|22|-1}
(*) BOOL
A1804726  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A00024
A180472A  7838     		ldrb r0, [r7]
A180472C  F8DF 7374		ldr r7, [pc, #+884] ; 0xA0003F10
A1804730  F8B7 8000		ldrh r8, [r7]
A1804734  F360 1804		bfi r8, r0, #4, #1
A1804738  F8A7 8000		strh r8, [r7]

#75		
#76			(* ATS_State_bits.5 := ATS22_DUT.Ramping; *)
#77			MOVE		ATS22_DUT.Ramping,ATS_State_bits.5	{LNXT:22|23|-1}
(*) BOOL
A180473C  F8DF 73D0		ldr r7, [pc, #+976] ; 0xA1A00025
A1804740  7838     		ldrb r0, [r7]
A1804742  F8DF 7360		ldr r7, [pc, #+864] ; 0xA0003F10
A1804746  F8B7 8000		ldrh r8, [r7]
A180474A  F360 1845		bfi r8, r0, #5, #1
A180474E  F8A7 8000		strh r8, [r7]

#78		
#79			(* ATS_State_bits.6 := ATS22_DUT.LI1; *)
#80			MOVE		ATS22_DUT.LI1,ATS_State_bits.6	{LNXT:23|24|-1}
(*) BOOL
A1804752  F8DF 73B0		ldr r7, [pc, #+944] ; 0xA1A00022
A1804756  7838     		ldrb r0, [r7]
A1804758  F8DF 7348		ldr r7, [pc, #+840] ; 0xA0003F10
A180475C  F8B7 8000		ldrh r8, [r7]
A1804760  F360 1886		bfi r8, r0, #6, #1
A1804764  F8A7 8000		strh r8, [r7]

#81		
#82			(* ATS_State_bits.7 := ATS22_DUT.LI2; *)
#83			MOVE		ATS22_DUT.LI2,ATS_State_bits.7	{LNXT:24|25|-1}
(*) BOOL
A1804768  F8DF 7394		ldr r7, [pc, #+916] ; 0xA1A00021
A180476C  7838     		ldrb r0, [r7]
A180476E  F8DF 7334		ldr r7, [pc, #+820] ; 0xA0003F10
A1804772  F8B7 8000		ldrh r8, [r7]
A1804776  F360 18C7		bfi r8, r0, #7, #1
A180477A  F8A7 8000		strh r8, [r7]

#84		
#85			(* ATS_State_bits.8 := ATS22_DUT.LI3; *)
#86			MOVE		ATS22_DUT.LI3,ATS_State_bits.8	{LNXT:25|28|-1}
(*) BOOL
A180477E  F8DF 737C		ldr r7, [pc, #+892] ; 0xA1A00020
A1804782  7838     		ldrb r0, [r7]
A1804784  F8DF 731C		ldr r7, [pc, #+796] ; 0xA0003F10
A1804788  F8B7 8000		ldrh r8, [r7]
A180478C  F360 2808		bfi r8, r0, #8, #1
A1804790  F8A7 8000		strh r8, [r7]

#87		
#88			(* ATS_State_bits.9 := i_pb_loc; *)
#89			MOVE		i_pb_loc,ATS_State_bits.9	{LNXT:28|29|-1}
(*) BOOL
A1804794  F8DF 739C		ldr r7, [pc, #+924] ; 0xA1A00038
A1804798  F9B7 0000		ldrsh r0, [r7]
A180479C  F8DF 7304		ldr r7, [pc, #+772] ; 0xA0003F10
A18047A0  B082     		sub sp, sp, #8
A18047A2  F8CD 0000		str r0, [sp]
A18047A6  2800     		cmp r0, #0
A18047A8  BF08 2000		eqmov r0, #0
A18047AC  BF18 2001		nemov r0, #1
A18047B0  F8B7 8000		ldrh r8, [r7]
A18047B4  F360 2849		bfi r8, r0, #9, #1
A18047B8  F8A7 8000		strh r8, [r7]
A18047BC  F8DD 0000		ldr r0, [sp]
A18047C0  B002     		add sp, sp, #8

#90		
#91			(* ATS_State_bits.10 := i_pb_rem; *)
#92			MOVE		i_pb_rem,ATS_State_bits.10	{LNXT:29|31|-1}
(*) INT
A18047C2  F8DF 7374		ldr r7, [pc, #+884] ; 0xA1A0003A
A18047C6  F9B7 0000		ldrsh r0, [r7]
A18047CA  F8DF 72D8		ldr r7, [pc, #+728] ; 0xA0003F10
A18047CE  B082     		sub sp, sp, #8
A18047D0  F8CD 0000		str r0, [sp]
A18047D4  2800     		cmp r0, #0
A18047D6  BF08 2000		eqmov r0, #0
A18047DA  BF18 2001		nemov r0, #1
A18047DE  F8B7 8000		ldrh r8, [r7]
A18047E2  F360 288A		bfi r8, r0, #10, #1
A18047E6  F8A7 8000		strh r8, [r7]
A18047EA  F8DD 0000		ldr r0, [sp]
A18047EE  B002     		add sp, sp, #8

#93		
#94		
#95			(* IF i_pb_loc AND not i_pb_rem *)
#96			LD		i_pb_rem	{LNXT:31|-1|-1}
(*) UNDEF
A18047F0  F8DF 7344		ldr r7, [pc, #+836] ; 0xA1A0003A
A18047F4  F9B7 0000		ldrsh r0, [r7]

#97			NOT	{LNXT:31|-1|-1}
(-) INT
A18047F8  43C0     		mvn r0, r0

#98			AND(		i_pb_loc	{LNXT:31|-1|-1}
(*) INT
A18047FA  B082     		sub sp, sp, #8
A18047FC  F8CD 0000		str r0, [sp]
A1804800  F8DF 7330		ldr r7, [pc, #+816] ; 0xA1A00038
A1804804  F9B7 0000		ldrsh r0, [r7]

#99			NOT	{LNXT:31|-1|-1}
(-) INT
A1804808  43C0     		mvn r0, r0

#100			)	{LNXT:31|-1|-1}
(*) INT
A180480A  4607     		mov r7, r0
A180480C  F8DD 0000		ldr r0, [sp]
A1804810  B002     		add sp, sp, #8
A1804812  4038     		and r0, r0, r7

#101			JMPCN	$label0	{LNXT:31|32|34}
(-) INT
A1804814  2800     		cmp r0, #0
A1804816  D009     		beq #18 ; 0xA180482C


#102		
#103			(* THEN *)
#104		
#105				(* ATS_State_bits.11 := TRUE; *)
#106				MOVE		TRUE,ATS_State_bits.11	{LNXT:32|34|-1}
(*) INT
A180481A  2001     		mov r0, #1 ; 1
A180481C  F8DF 7284		ldr r7, [pc, #+644] ; 0xA0003F10
A1804820  F8B7 8000		ldrh r8, [r7]
A1804824  F360 28CB		bfi r8, r0, #11, #1
A1804828  F8A7 8000		strh r8, [r7]

#107		
#108		$label0:
#109			(* END_IF *)
#110		
#111		
#112			(* IF i_pb_loc AND i_pb_rem *)
#113			LD		i_pb_loc	{LNXT:34|-1|-1}
(*) UNDEF
A180482C  F8DF 7304		ldr r7, [pc, #+772] ; 0xA1A00038
A1804830  F9B7 0000		ldrsh r0, [r7]

#114			NOT	{LNXT:34|-1|-1}
(-) INT
A1804834  43C0     		mvn r0, r0

#115			AND		i_pb_rem	{LNXT:34|-1|-1}
(*) INT
A1804836  F8DF 7300		ldr r7, [pc, #+768] ; 0xA1A0003A
A180483A  F9B7 7000		ldrsh r7, [r7]
A180483E  4038     		and r0, r0, r7

#116			JMPCN	$label1	{LNXT:34|35|37}
(-) INT
A1804840  2800     		cmp r0, #0
A1804842  D009     		beq #18 ; 0xA1804858


#117		
#118			(* THEN *)
#119		
#120				(* ATS_State_bits.11 := FALSE; *)
#121				MOVE		FALSE,ATS_State_bits.11	{LNXT:35|37|-1}
(*) INT
A1804846  2000     		mov r0, #0 ; 0
A1804848  F8DF 7258		ldr r7, [pc, #+600] ; 0xA0003F10
A180484C  F8B7 8000		ldrh r8, [r7]
A1804850  F360 28CB		bfi r8, r0, #11, #1
A1804854  F8A7 8000		strh r8, [r7]

#122		
#123		$label1:
#124			(* END_IF *)
#125		
#126		
#127			(* IF i_pb_loc AND not i_pb_rem *)
#128			LD		i_pb_rem	{LNXT:37|-1|-1}
(*) UNDEF
A1804858  F8DF 72DC		ldr r7, [pc, #+732] ; 0xA1A0003A
A180485C  F9B7 0000		ldrsh r0, [r7]

#129			NOT	{LNXT:37|-1|-1}
(-) INT
A1804860  43C0     		mvn r0, r0

#130			AND		i_pb_loc	{LNXT:37|-1|-1}
(*) INT
A1804862  F8DF 72D0		ldr r7, [pc, #+720] ; 0xA1A00038
A1804866  F9B7 7000		ldrsh r7, [r7]
A180486A  4038     		and r0, r0, r7

#131			JMPCN	$label2	{LNXT:37|38|43}
(-) INT
A180486C  2800     		cmp r0, #0
A180486E  D009     		beq #18 ; 0xA1804884


#132		
#133			(* THEN *)
#134		
#135				(* ATS_State_bits.11 := FALSE; *)
#136				MOVE		FALSE,ATS_State_bits.11	{LNXT:38|43|-1}
(*) INT
A1804872  2000     		mov r0, #0 ; 0
A1804874  F8DF 722C		ldr r7, [pc, #+556] ; 0xA0003F10
A1804878  F8B7 8000		ldrh r8, [r7]
A180487C  F360 28CB		bfi r8, r0, #11, #1
A1804880  F8A7 8000		strh r8, [r7]

#137		
#138		$label2:
#139			(* END_IF *)
#140		
#141			(* ATS22_DUT.EtaCurrent := to_byte(SHR(resp_eta_lcr[0] AND 16#3F00, 16#08) * 200 / 63); *)
#142			LD		resp_eta_lcr[0]	{LNXT:43|44|-1}
(*) UNDEF
A1804884  F8DF 7244		ldr r7, [pc, #+580] ; 0xA1A0000C
A1804888  F9B7 0000		ldrsh r0, [r7]

#143			AND		16#3F00	{LNXT:43|44|-1}
(*) INT
A180488C  F44F 577C		mov r7, #16128 ; 16128
A1804890  4038     		and r0, r0, r7

#144			SHR		16#08	{LNXT:43|44|-1}
(*) INT
A1804892  0A00     		lsr r0, r0, #8
A1804894  0400     		lsl r0, r0, #16
A1804896  0C00     		lsr r0, r0, #16

#145			MUL		200	{LNXT:43|44|-1}
(*) INT
A1804898  27C8     		mov r7, #200 ; 200
A180489A  4378     		mul r0, r0, r7

#146			DIV		63	{LNXT:43|44|-1}
(*) INT
A180489C  273F     		mov r7, #63 ; 63
A180489E  B082     		sub sp, sp, #8
A18048A0  F8CD 1000		str r1, [sp]
A18048A4  4639     		mov r1, r7
A18048A6  FB90 F0F1		sdiv r0, r0, r1
A18048AA  F8DD 1000		ldr r1, [sp]
A18048AE  B002     		add sp, sp, #8

#147			to_byte	{LNXT:43|44|-1}
(-) INT
#148			ST		ATS22_DUT.EtaCurrent	{LNXT:43|44|-1}
(*) BYTE
A18048B0  F8DF 7254		ldr r7, [pc, #+596] ; 0xA1A00023
A18048B4  7038     		strb r0, [r7]

#149		
#150			(* ATS_Current_prsnt	 := ATS22_DUT.EtaCurrent; *)
#151			MOVE		ATS22_DUT.EtaCurrent,ATS_Current_prsnt	{LNXT:44|46|-1}
(*) BYTE
A18048B6  F8DF 7250		ldr r7, [pc, #+592] ; 0xA1A00023
A18048BA  7838     		ldrb r0, [r7]
A18048BC  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA0003F12
A18048C0  8038     		strh r0, [r7]

#152		
#153			(* ATS22_DUT.Local 	:= to_bool(resp_eta_lcr[0] And 16#4000); *)
#154			LD		resp_eta_lcr[0]	{LNXT:46|47|-1}
(*) UNDEF
A18048C2  F8DF 7208		ldr r7, [pc, #+520] ; 0xA1A0000C
A18048C6  F9B7 0000		ldrsh r0, [r7]

#155			AND		16#4000	{LNXT:46|47|-1}
(*) INT
A18048CA  F44F 4780		mov r7, #16384 ; 16384
A18048CE  4038     		and r0, r0, r7

#156			to_bool	{LNXT:46|47|-1}
(*) INT
A18048D0  2800     		cmp r0, #0
A18048D2  BF18 2001		nemov r0, #1
A18048D6  BF08 2000		eqmov r0, #0

#157			ST		ATS22_DUT.Local	{LNXT:46|47|-1}
(*) BOOL
A18048DA  F8DF 7230		ldr r7, [pc, #+560] ; 0xA1A00024
A18048DE  7038     		strb r0, [r7]

#158		
#159			(* ATS22_DUT.Ramping 	:= to_bool(resp_eta_lcr[0] And 16#8000); *)
#160			LD		resp_eta_lcr[0]	{LNXT:47|49|-1}
(*) UNDEF
A18048E0  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A0000C
A18048E4  F9B7 0000		ldrsh r0, [r7]

#161			AND		16#8000	{LNXT:47|49|-1}
(*) INT
A18048E8  F44F 4700		mov r7, #32768 ; 32768
A18048EC  4038     		and r0, r0, r7

#162			to_bool	{LNXT:47|49|-1}
(*) INT
A18048EE  2800     		cmp r0, #0
A18048F0  BF18 2001		nemov r0, #1
A18048F4  BF08 2000		eqmov r0, #0

#163			ST		ATS22_DUT.Ramping	{LNXT:47|49|-1}
(*) BOOL
A18048F8  F8DF 7214		ldr r7, [pc, #+532] ; 0xA1A00025
A18048FC  7038     		strb r0, [r7]

#164		
#165			(* ATS22_DUT.Lcr1 := resp_eta_lcr[1]; *)
#166			MOVE		resp_eta_lcr[1],ATS22_DUT.Lcr1	{LNXT:49|50|-1}
(*) BOOL
A18048FE  F8DF 71D0		ldr r7, [pc, #+464] ; 0xA1A0000E
A1804902  F9B7 0000		ldrsh r0, [r7]
A1804906  F8DF 720C		ldr r7, [pc, #+524] ; 0xA1A00026
A180490A  8038     		strh r0, [r7]

#167		
#168			(* ATS22_DUT.Lcr2 := resp_eta_lcr[2]; *)
#169			MOVE		resp_eta_lcr[2],ATS22_DUT.Lcr2	{LNXT:50|51|-1}
(*) INT
A180490C  F8DF 71C4		ldr r7, [pc, #+452] ; 0xA1A00010
A1804910  F9B7 0000		ldrsh r0, [r7]
A1804914  F8DF 7200		ldr r7, [pc, #+512] ; 0xA1A00028
A1804918  8038     		strh r0, [r7]

#170		
#171			(* ATS22_DUT.Lcr3 := resp_eta_lcr[3]; *)
#172			MOVE		resp_eta_lcr[3],ATS22_DUT.Lcr3	{LNXT:51|53|-1}
(*) INT
A180491A  F8DF 71BC		ldr r7, [pc, #+444] ; 0xA1A00012
A180491E  F9B7 0000		ldrsh r0, [r7]
A1804922  F8DF 71F8		ldr r7, [pc, #+504] ; 0xA1A0002A
A1804926  8038     		strh r0, [r7]

#173		
#174			(* ATS_Current_L1 := ATS22_DUT.Lcr1; *)
#175			MOVE		ATS22_DUT.Lcr1,ATS_Current_L1	{LNXT:53|54|-1}
(*) INT
A1804928  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A00026
A180492C  F9B7 0000		ldrsh r0, [r7]
A1804930  F8DF 7178		ldr r7, [pc, #+376] ; 0xA0003F14
A1804934  8038     		strh r0, [r7]

#176		
#177			(* ATS_Current_L2 := ATS22_DUT.Lcr2; *)
#178			MOVE		ATS22_DUT.Lcr2,ATS_Current_L2	{LNXT:54|55|-1}
(*) INT
A1804936  F8DF 71E0		ldr r7, [pc, #+480] ; 0xA1A00028
A180493A  F9B7 0000		ldrsh r0, [r7]
A180493E  F8DF 7170		ldr r7, [pc, #+368] ; 0xA0003F16
A1804942  8038     		strh r0, [r7]

#179		
#180			(* ATS_Current_L3 := ATS22_DUT.Lcr3; *)
#181			MOVE		ATS22_DUT.Lcr3,ATS_Current_L3	{LNXT:55|57|-1}
(*) INT
A1804944  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA1A0002A
A1804948  F9B7 0000		ldrsh r0, [r7]
A180494C  F8DF 7164		ldr r7, [pc, #+356] ; 0xA0003F18
A1804950  8038     		strh r0, [r7]

#182		
#183			(* res := sysMbMRTU_FC03(	addr := 1, 
#184											base := 261, // 260
#185											no := 1, 
#186											object := ADR(resp_eta_lcr), 
#187											timeout := 200); *)
#188			ADR		resp_eta_lcr	{LNXT:57|63|-1}
(*) INT
A1804952  F8DF 0178		ldr r0, [pc, #+376] ; 0xA1A0000C

#189			ST		$$TMP0	{LNXT:57|63|-1}
(*) @INT
A1804956  F8DF 7184		ldr r7, [pc, #+388] ; 0xA1A00014
A180495A  6038     		str r0, [r7]

#190			LDP0		1	{LNXT:57|63|-1}
(-) @INT
#191			sysMbMRTU_FC03		261, 1, $$TMP0, 200	{LNXT:57|63|-1}
(*) @INT
A180495C  B082     		sub sp, sp, #8
A180495E  2001     		mov r0, #1 ; 1
A1804960  F8DF 71DC		ldr r7, [pc, #+476] ; 0x105
A1804964  4639     		mov r1, r7
A1804966  2701     		mov r7, #1 ; 1
A1804968  463A     		mov r2, r7
A180496A  F8DF 7170		ldr r7, [pc, #+368] ; 0xA1A00014
A180496E  683B     		ldr r3, [r7]
A1804970  27C8     		mov r7, #200 ; 200
A1804972  F8CD 7000		str r7, [sp]
A1804976  F8DF 41CC		ldr r4, [pc, #+460] ; 0x241DB
A180497A  F044 0401		orr r4, r4, #1
A180497E  47A0     		blx r4
A1804980  B002     		add sp, sp, #8

#192			ST		res	{LNXT:57|63|-1}
(*) UINT
A1804982  F8DF 715C		ldr r7, [pc, #+348] ; 0xA1A00018
A1804986  8038     		strh r0, [r7]

#193		
#194			(* ATS22_DUT.LcrVoltage	:= resp_eta_lcr[0]; *)
#195			MOVE		resp_eta_lcr[0],ATS22_DUT.LcrVoltage	{LNXT:63|64|-1}
(*) INT
A1804988  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0000C
A180498C  F9B7 0000		ldrsh r0, [r7]
A1804990  F8DF 718C		ldr r7, [pc, #+396] ; 0xA1A0002C
A1804994  8038     		strh r0, [r7]

#196		
#197			(* ATS_Voltage := ATS22_DUT.LcrVoltage; *)
#198			MOVE		ATS22_DUT.LcrVoltage,ATS_Voltage	{LNXT:64|68|-1}
(*) INT
A1804996  F8DF 7188		ldr r7, [pc, #+392] ; 0xA1A0002C
A180499A  F9B7 0000		ldrsh r0, [r7]
A180499E  F8DF 7128		ldr r7, [pc, #+296] ; 0xA0003F24
A18049A2  8038     		strh r0, [r7]

#199		
#200			(* res := sysMbMRTU_FC03(	addr := 1, 
#201											base := 280, // 279
#202											no := 1, 
#203											object := ADR(resp_eta_lcr), 
#204											timeout := 200); *)
#205			ADR		resp_eta_lcr	{LNXT:68|74|-1}
(*) INT
A18049A4  F8DF 0124		ldr r0, [pc, #+292] ; 0xA1A0000C

#206			ST		$$TMP0	{LNXT:68|74|-1}
(*) @INT
A18049A8  F8DF 7130		ldr r7, [pc, #+304] ; 0xA1A00014
A18049AC  6038     		str r0, [r7]

#207			LDP0		1	{LNXT:68|74|-1}
(-) @INT
#208			sysMbMRTU_FC03		280, 1, $$TMP0, 200	{LNXT:68|74|-1}
(*) @INT
A18049AE  B082     		sub sp, sp, #8
A18049B0  2001     		mov r0, #1 ; 1
A18049B2  F44F 718C		mov r1, #280 ; 280
A18049B6  2701     		mov r7, #1 ; 1
A18049B8  463A     		mov r2, r7
A18049BA  F8DF 7120		ldr r7, [pc, #+288] ; 0xA1A00014
A18049BE  683B     		ldr r3, [r7]
A18049C0  27C8     		mov r7, #200 ; 200
A18049C2  F8CD 7000		str r7, [sp]
A18049C6  F8DF 417C		ldr r4, [pc, #+380] ; 0x241DB
A18049CA  F044 0401		orr r4, r4, #1
A18049CE  47A0     		blx r4
A18049D0  B002     		add sp, sp, #8

#209			ST		res	{LNXT:68|74|-1}
(*) UINT
A18049D2  F8DF 710C		ldr r7, [pc, #+268] ; 0xA1A00018
A18049D6  8038     		strh r0, [r7]

#210		
#211			(* ATS22_DUT.LastFLT 	:= resp_eta_lcr[0]; *)
#212			MOVE		resp_eta_lcr[0],ATS22_DUT.LastFLT	{LNXT:74|75|-1}
(*) INT
A18049D8  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A0000C
A18049DC  F9B7 0000		ldrsh r0, [r7]
A18049E0  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0002E
A18049E4  8038     		strh r0, [r7]

#213		
#214			(* ATS_Last_FaultCode := ATS22_DUT.LastFLT; *)
#215			MOVE		ATS22_DUT.LastFLT,ATS_Last_FaultCode	{LNXT:75|78|-1}
(*) INT
A18049E6  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A0002E
A18049EA  F9B7 0000		ldrsh r0, [r7]
A18049EE  F8DF 70C8		ldr r7, [pc, #+200] ; 0xA0003F1A
A18049F2  8038     		strh r0, [r7]

#216		
#217			(* res := sysMbMRTU_FC03(	addr := 1, 
#218											base := 274, // 273
#219											no := 3, 
#220											object := ADR(resp_eta_lcr), 
#221											timeout := 200); *)
#222			ADR		resp_eta_lcr	{LNXT:78|84|-1}
(*) INT
A18049F4  F8DF 00D4		ldr r0, [pc, #+212] ; 0xA1A0000C

#223			ST		$$TMP0	{LNXT:78|84|-1}
(*) @INT
A18049F8  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A00014
A18049FC  6038     		str r0, [r7]

#224			LDP0		1	{LNXT:78|84|-1}
(-) @INT
#225			sysMbMRTU_FC03		274, 3, $$TMP0, 200	{LNXT:78|84|-1}
(*) @INT
A18049FE  B082     		sub sp, sp, #8
A1804A00  2001     		mov r0, #1 ; 1
A1804A02  F44F 7189		mov r1, #274 ; 274
A1804A06  2703     		mov r7, #3 ; 3
A1804A08  463A     		mov r2, r7
A1804A0A  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A00014
A1804A0E  683B     		ldr r3, [r7]
A1804A10  27C8     		mov r7, #200 ; 200
A1804A12  F8CD 7000		str r7, [sp]
A1804A16  F8DF 412C		ldr r4, [pc, #+300] ; 0x241DB
A1804A1A  F044 0401		orr r4, r4, #1
A1804A1E  47A0     		blx r4
A1804A20  B002     		add sp, sp, #8

#226			ST		res	{LNXT:78|84|-1}
(*) UINT
A1804A22  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA1A00018
A1804A26  8038     		strh r0, [r7]

#227		
#228		
#229			(* IF res <> 0 *)
#230			LD		res	{LNXT:84|-1|-1}
(*) UNDEF
A1804A28  F8DF 70B4		ldr r7, [pc, #+180] ; 0xA1A00018
A1804A2C  F9B7 0000		ldrsh r0, [r7]

#231			NE		0	{LNXT:84|-1|-1}
(*) INT
A1804A30  2800     		cmp r0, #0
A1804A32  BF08 2000		eqmov r0, #0
A1804A36  BF18 2001		nemov r0, #1

#232			JMPCN	$label3	{LNXT:84|84|86}
(-) BOOL
A1804A3A  2800     		cmp r0, #0
A1804A3C  D009     		beq #18 ; 0xA1804A52


#233		
#234			(* THEN *)
#235		
#236				(* Alarms.6 := true; *)
#237				MOVE		true,Alarms.6	{LNXT:84|86|-1}
(*) BOOL
A1804A40  2001     		mov r0, #1 ; 1
A1804A42  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F20
A1804A46  F8B7 8000		ldrh r8, [r7]
A1804A4A  F360 1886		bfi r8, r0, #6, #1
A1804A4E  F8A7 8000		strh r8, [r7]

#238		
#239		$label3:
#240			(* END_IF *)
#241		
#242			(* ATS22_DUT.MotRunTime 		:= resp_eta_lcr[0]; *)
#243			MOVE		resp_eta_lcr[0],ATS22_DUT.MotRunTime	{LNXT:86|87|-1}
(*) WORD
A1804A52  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A0000C
A1804A56  F9B7 0000		ldrsh r0, [r7]
A1804A5A  F8DF 70CC		ldr r7, [pc, #+204] ; 0xA1A00030
A1804A5E  8038     		strh r0, [r7]

#244		
#245			(* ATS22_DUT.MotStartCnt 		:= resp_eta_lcr[1]; *)
#246			MOVE		resp_eta_lcr[1],ATS22_DUT.MotStartCnt	{LNXT:87|88|-1}
(*) INT
A1804A60  F8DF 706C		ldr r7, [pc, #+108] ; 0xA1A0000E
A1804A64  F9B7 0000		ldrsh r0, [r7]
A1804A68  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A00032
A1804A6C  8038     		strh r0, [r7]

#247		
#248			(* ATS22_DUT.MotLastStartTime 	:= resp_eta_lcr[2]; *)
#249			MOVE		resp_eta_lcr[2],ATS22_DUT.MotLastStartTime	{LNXT:88|90|-1}
(*) INT
A1804A6E  F8DF 7064		ldr r7, [pc, #+100] ; 0xA1A00010
A1804A72  F9B7 0000		ldrsh r0, [r7]
A1804A76  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A00034
A1804A7A  8038     		strh r0, [r7]

#250		
#251			(* ATS_RunTime_Hors	:= to_word(ATS22_DUT.MotRunTime); *)
#252			LDP0		ATS22_DUT.MotRunTime	{LNXT:90|91|-1}
(-) INT
#253			to_word	{LNXT:90|91|-1}
(*) INT
A1804A7C  F8DF 70A8		ldr r7, [pc, #+168] ; 0xA1A00030
A1804A80  F9B7 0000		ldrsh r0, [r7]

#254			ST		ATS_RunTime_Hors	{LNXT:90|91|-1}
(*) WORD
A1804A84  F8DF 7034		ldr r7, [pc, #+52] ; 0xA0003F1C
A1804A88  8038     		strh r0, [r7]

#255		
#256			(* ATS_OnTimes_Cnt		:= to_word(ATS22_DUT.MotStartCnt); *)
#257			LDP0		ATS22_DUT.MotStartCnt	{LNXT:91|2|-1}
(-) WORD
#258			to_word	{LNXT:91|2|-1}
(*) WORD
A1804A8A  F8DF 70A0		ldr r7, [pc, #+160] ; 0xA1A00032
A1804A8E  F9B7 0000		ldrsh r0, [r7]

#259			ST		ATS_OnTimes_Cnt	{LNXT:91|2|-1}
(*) WORD
A1804A92  F8DF 702C		ldr r7, [pc, #+44] ; 0xA0003F1E
A1804A96  8038     		strh r0, [r7]

A1804A98  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804A9C  F8DD E000		ldr lr, [sp]
A1804AA0  B002     		add sp, sp, #8

A1804AA2  4770     		bx lr

A1804AA4  FFFFFFFF		; 0xA0003F10
A1804AA8  FFFFFFFF		; 0xA0003F12
A1804AAC  FFFFFFFF		; 0xA0003F14
A1804AB0  FFFFFFFF		; 0xA0003F16
A1804AB4  FFFFFFFF		; 0xA0003F18
A1804AB8  FFFFFFFF		; 0xA0003F1A
A1804ABC  FFFFFFFF		; 0xA0003F1C
A1804AC0  FFFFFFFF		; 0xA0003F1E
A1804AC4  FFFFFFFF		; 0xA0003F20
A1804AC8  FFFFFFFF		; 0xA0003F24
A1804ACC  A1A0000C		; 0xA1A0000C
A1804AD0  A1A0000E		; 0xA1A0000E
A1804AD4  A1A00010		; 0xA1A00010
A1804AD8  A1A00012		; 0xA1A00012
A1804ADC  A1A00014		; 0xA1A00014
A1804AE0  A1A00018		; 0xA1A00018
A1804AE4  A1A0001A		; 0xA1A0001A
A1804AE8  A1A0001B		; 0xA1A0001B
A1804AEC  A1A0001C		; 0xA1A0001C
A1804AF0  A1A0001D		; 0xA1A0001D
A1804AF4  A1A0001E		; 0xA1A0001E
A1804AF8  A1A0001F		; 0xA1A0001F
A1804AFC  A1A00020		; 0xA1A00020
A1804B00  A1A00021		; 0xA1A00021
A1804B04  A1A00022		; 0xA1A00022
A1804B08  A1A00023		; 0xA1A00023
A1804B0C  A1A00024		; 0xA1A00024
A1804B10  A1A00025		; 0xA1A00025
A1804B14  A1A00026		; 0xA1A00026
A1804B18  A1A00028		; 0xA1A00028
A1804B1C  A1A0002A		; 0xA1A0002A
A1804B20  A1A0002C		; 0xA1A0002C
A1804B24  A1A0002E		; 0xA1A0002E
A1804B28  A1A00030		; 0xA1A00030
A1804B2C  A1A00032		; 0xA1A00032
A1804B30  A1A00034		; 0xA1A00034
A1804B34  A1A00038		; 0xA1A00038
A1804B38  A1A0003A		; 0xA1A0003A
A1804B3C  00000101		; 0x00000101
A1804B40  00000105		; 0x00000105
A1804B44  FFFFFFFF		; 0x000241DB

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1804B48  B082     		sub sp, sp, #8
A1804B4A  F8CD E000		str lr, [sp]
A1804B4E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804B52  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000427
A1804B56  7838     		ldrb r0, [r7]
A1804B58  F8DF 7038		ldr r7, [pc, #+56] ; 0xA1A0001B
A1804B5C  7038     		strb r0, [r7]

A1804B5E  F8DF 7040		ldr r7, [pc, #+64] ; 0x10000426
A1804B62  7838     		ldrb r0, [r7]
A1804B64  F8DF 7028		ldr r7, [pc, #+40] ; 0xA1A0001A
A1804B68  7038     		strb r0, [r7]

A1804B6A  F8DF 703C		ldr r7, [pc, #+60] ; 0x1000044E
A1804B6E  8838     		ldrh r0, [r7]
A1804B70  F8DF 7024		ldr r7, [pc, #+36] ; 0xA1A00038
A1804B74  8038     		strh r0, [r7]

A1804B76  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000450
A1804B7A  8838     		ldrh r0, [r7]
A1804B7C  F8DF 701C		ldr r7, [pc, #+28] ; 0xA1A0003A
A1804B80  8038     		strh r0, [r7]

A1804B82  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804B86  F8DD E000		ldr lr, [sp]
A1804B8A  B002     		add sp, sp, #8

A1804B8C  4770     		bx lr

A1804B90  A1A0001A		; 0xA1A0001A
A1804B94  A1A0001B		; 0xA1A0001B
A1804B98  A1A00038		; 0xA1A00038
A1804B9C  A1A0003A		; 0xA1A0003A
A1804BA0  FFFFFFFF		; 0x10000426
A1804BA4  FFFFFFFF		; 0x10000427
A1804BA8  FFFFFFFF		; 0x1000044E
A1804BAC  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1804BB0  B082     		sub sp, sp, #8
A1804BB2  F8CD E000		str lr, [sp]
A1804BB6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804BBA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804BBE  F8DD E000		ldr lr, [sp]
A1804BC2  B002     		add sp, sp, #8

A1804BC4  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

A1804BC6  B082     		sub sp, sp, #8
A1804BC8  F8CD E000		str lr, [sp]
A1804BCC  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804BD0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804BD4  F8DD E000		ldr lr, [sp]
A1804BD8  B002     		add sp, sp, #8

A1804BDA  4770     		bx lr

**************************************************
	List program: sr_init_counters
**************************************************

PROGRAM sr_init_counters

END_PROGRAM

A1804BF0  B082     		sub sp, sp, #8
A1804BF2  F8CD E000		str lr, [sp]
A1804BF6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_init_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_counter 	:= epprom_kw_cnt; *)
#4			MOVE		epprom_kw_cnt,kw_counter	{LNXT:1|2|-1}
(*) UDINT
A1804BFA  F8DF 7028		ldr r7, [pc, #+40] ; 0xA00017F8
A1804BFE  6838     		ldr r0, [r7]
A1804C00  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003F04
A1804C04  6038     		str r0, [r7]

#5		
#6			(* q_counter	:= epprom_q_cnt; *)
#7			MOVE		epprom_q_cnt,q_counter	{LNXT:2|1|-1}
(*) DWORD
A1804C06  F8DF 7018		ldr r7, [pc, #+24] ; 0xA00017F0
A1804C0A  6838     		ldr r0, [r7]
A1804C0C  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0003F08
A1804C10  6038     		str r0, [r7]

A1804C12  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804C16  F8DD E000		ldr lr, [sp]
A1804C1A  B002     		add sp, sp, #8

A1804C1C  4770     		bx lr

A1804C20  FFFFFFFF		; 0xA00017F0
A1804C24  FFFFFFFF		; 0xA00017F8
A1804C28  FFFFFFFF		; 0xA0003F04
A1804C2C  FFFFFFFF		; 0xA0003F08

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1804C30  4770     		bx lr


*** OUTPUT:
A1804C32  4770     		bx lr



**************************************************
	Task Boot init code
**************************************************

A1804C34  B082     		sub sp, sp, #8
A1804C36  F8CD E000		str lr, [sp]
A1804C3A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804C3E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804C42  F8DD E000		ldr lr, [sp]
A1804C46  B002     		add sp, sp, #8

A1804C48  4770     		bx lr

**************************************************
	List program: ParCheck
**************************************************

PROGRAM ParCheck

END_PROGRAM

A1804C60  B082     		sub sp, sp, #8
A1804C62  F8CD E000		str lr, [sp]
A1804C66  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ParCheck}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Par_POLI AND 16#fc00) <> 2048 *)
#5			LD		Par_POLI	{LNXT:2|-1|-1}
(*) UNDEF
A1804C6A  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000182
A1804C6E  8838     		ldrh r0, [r7]

#6			AND		16#fc00	{LNXT:2|-1|-1}
(*) UINT
A1804C70  F44F 477C		mov r7, #64512 ; 64512
A1804C74  4038     		and r0, r0, r7

#7			NE		2048	{LNXT:2|-1|-1}
(*) UINT
A1804C76  F44F 6700		mov r7, #2048 ; 2048
A1804C7A  42B8     		cmp r0, r7
A1804C7C  BF08 2000		eqmov r0, #0
A1804C80  BF18 2001		nemov r0, #1

#8			JMPCN	$label0	{LNXT:2|3|2}
(-) BOOL
A1804C84  2800     		cmp r0, #0
A1804C86  D005     		beq #10 ; 0xA1804C94


#9		
#10			(* THEN *)
#11		
#12				(* WHILE TRUE *)
#13		$label1:
#14				LD		TRUE	{LNXT:3|-1|-1}
(-) UNDEF
A1804C8A  2001     		mov r0, #1 ; 1

#15				JMPCN		$label2	{LNXT:3|2|2}
(-) BOOL
A1804C8C  2800     		cmp r0, #0
A1804C8E  D001     		beq #2 ; 0xA1804C94


#16		
#17				(* DO *)
#18					JMP		$label1	{LNXT:3|2|2}
(-) BOOL
A1804C92  E7FA     		b #-12 ; 0xA1804C8A

A1804C94  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804C98  F8DD E000		ldr lr, [sp]
A1804C9C  B002     		add sp, sp, #8

A1804C9E  4770     		bx lr

A1804CA0  FFFFFFFF		; 0x10000182

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1804CA4  4770     		bx lr


*** OUTPUT:
A1804CA6  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

A1804CA8  B082     		sub sp, sp, #8
A1804CAA  F8CD E000		str lr, [sp]
A1804CAE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804CB2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804CB6  F8DD E000		ldr lr, [sp]
A1804CBA  B002     		add sp, sp, #8

A1804CBC  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

A1804CD0  B082     		sub sp, sp, #8
A1804CD2  F8CD E000		str lr, [sp]
A1804CD6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 2516947423; *)
#4			MOVE		2516947423,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
A1804CDA  F8DF 7034		ldr r7, [pc, #+52] ; 0x960591DF
A1804CDE  4638     		mov r0, r7
A1804CE0  F8DF 7034		ldr r7, [pc, #+52] ; 0xA1A0003C
A1804CE4  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
A1804CE6  F8DF 002C		ldr r0, [pc, #+44] ; 0xA1800100

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
A1804CEA  4607     		mov r7, r0
A1804CEC  4638     		mov r0, r7
A1804CEE  2714     		mov r7, #20 ; 20
A1804CF0  4639     		mov r1, r7
A1804CF2  F8DF 402C		ldr r4, [pc, #+44] ; 0x1398D
A1804CF6  F044 0401		orr r4, r4, #1
A1804CFA  47A0     		blx r4

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
A1804CFC  F8DF 701C		ldr r7, [pc, #+28] ; 0xA1A00040
A1804D00  7038     		strb r0, [r7]

A1804D02  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804D06  F8DD E000		ldr lr, [sp]
A1804D0A  B002     		add sp, sp, #8

A1804D0C  4770     		bx lr

A1804D10  960591DF		; 0x960591DF
A1804D14  A1800100		; 0xA1800100
A1804D18  A1A0003C		; 0xA1A0003C
A1804D1C  A1A00040		; 0xA1A00040
A1804D20  FFFFFFFF		; 0x0001398D

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1804D24  4770     		bx lr


*** OUTPUT:
A1804D26  4770     		bx lr



**************************************************
	Task Serv init code
**************************************************

A1804D28  B082     		sub sp, sp, #8
A1804D2A  F8CD E000		str lr, [sp]
A1804D2E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804D32  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804D36  F8DD E000		ldr lr, [sp]
A1804D3A  B002     		add sp, sp, #8

A1804D3C  4770     		bx lr

**************************************************
	List program: sr_pressure
**************************************************

PROGRAM sr_pressure

        VAR
tmp_test : INT;
	END_VAR

END_PROGRAM

A1804D50  B082     		sub sp, sp, #8
A1804D52  F8CD E000		str lr, [sp]
A1804D56  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_pressure}
#1		(*$WAITSWITCH$*)
#2		
#3			(* Pressure := to_int(to_real(i_adc_pressure )/10); *)
#4			LDP0		i_adc_pressure	{LNXT:2|2|-1}
(-) UDINT
#5			to_real	{LNXT:2|2|-1}
(*) UDINT
A1804D5A  F8DF 705C		ldr r7, [pc, #+92] ; 0xA1A000AA
A1804D5E  F9B7 0000		ldrsh r0, [r7]
A1804D62  F8DF 405C		ldr r4, [pc, #+92] ; 0x111EB
A1804D66  F044 0401		orr r4, r4, #1
A1804D6A  47A0     		blx r4

#6			DIV		10	{LNXT:2|2|-1}
(*) REAL
A1804D6C  270A     		mov r7, #10 ; 10
A1804D6E  B082     		sub sp, sp, #8
A1804D70  F8CD 0000		str r0, [sp]
A1804D74  4638     		mov r0, r7
A1804D76  F8DF 4044		ldr r4, [pc, #+68] ; 0x111DB
A1804D7A  F044 0401		orr r4, r4, #1
A1804D7E  47A0     		blx r4
A1804D80  4607     		mov r7, r0
A1804D82  F8DD 0000		ldr r0, [sp]
A1804D86  B002     		add sp, sp, #8
A1804D88  B082     		sub sp, sp, #8
A1804D8A  F8CD 1000		str r1, [sp]
A1804D8E  4639     		mov r1, r7
A1804D90  F8DF 4034		ldr r4, [pc, #+52] ; 0x1124B
A1804D94  F044 0401		orr r4, r4, #1
A1804D98  47A0     		blx r4
A1804D9A  F8DD 1000		ldr r1, [sp]
A1804D9E  B002     		add sp, sp, #8

#7			to_int	{LNXT:2|2|-1}
(*) REAL
A1804DA0  F8DF 4020		ldr r4, [pc, #+32] ; 0x1120B
A1804DA4  F044 0401		orr r4, r4, #1
A1804DA8  47A0     		blx r4

#8			ST		Pressure	{LNXT:2|2|-1}
(*) INT
A1804DAA  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F00
A1804DAE  8038     		strh r0, [r7]

A1804DB0  E00C     		b #24

A1804DB4  FFFFFFFF		; 0xA0003F00
A1804DB8  A1A000AA		; 0xA1A000AA
A1804DBC  FFFFFFFF		; 0x000111DB
A1804DC0  FFFFFFFF		; 0x000111EB
A1804DC4  FFFFFFFF		; 0x0001120B
A1804DC8  FFFFFFFF		; 0x0001124B

END_PROGRAM
**************************************************
	List program: sr_counters
**************************************************

PROGRAM sr_counters

        VAR
kw_trig : R_TRIG;
q_trig : R_TRIG;
kw_pulses_per_acs : UINT;
q_pulses_per_acs : UINT;
test_freq : UDINT;
	END_VAR

END_PROGRAM

#0		{SRC:sr_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_pulses_per_acs 	:= 8000; *)
#4			MOVE		8000,kw_pulses_per_acs	{LNXT:2|3|-1}
(*) UDINT
A1804DCC  F44F 50FA		mov r0, #8000 ; 8000
A1804DD0  F8DF 7108		ldr r7, [pc, #+264] ; 0xA1A000A6
A1804DD4  8038     		strh r0, [r7]

#5		
#6			(* q_pulses_per_acs	:= 1; *)
#7			MOVE		1,q_pulses_per_acs	{LNXT:3|15|-1}
(*) UINT
A1804DD6  2001     		mov r0, #1 ; 1
A1804DD8  F8DF 7104		ldr r7, [pc, #+260] ; 0xA1A000A8
A1804DDC  8038     		strh r0, [r7]

#8		
#9		
#10			(* IF fdi_q_cnt >= q_pulses_per_acs *)
#11			LD		fdi_q_cnt	{LNXT:15|-1|-1}
(*) UNDEF
A1804DDE  F8DF 7114		ldr r7, [pc, #+276] ; 0x100004F8
A1804DE2  6838     		ldr r0, [r7]

#12			GE		q_pulses_per_acs	{LNXT:15|-1|-1}
(*) UDINT
A1804DE4  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000A8
A1804DE8  883F     		ldrh r7, [r7]
A1804DEA  42B8     		cmp r0, r7
A1804DEC  BF38 2000		lomov r0, #0
A1804DF0  BF28 2001		hsmov r0, #1

#13			JMPCN	$label0	{LNXT:15|16|20}
(-) BOOL
A1804DF4  2800     		cmp r0, #0
A1804DF6  D00B     		beq #22 ; 0xA1804E10


#14		
#15			(* THEN *)
#16		
#17				(* q_counter := q_counter + 1; *)
#18				LD		q_counter	{LNXT:16|17|-1}
(*) UNDEF
A1804DFA  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA0003F08
A1804DFE  6838     		ldr r0, [r7]

#19				ADD		1	{LNXT:16|17|-1}
(-) DWORD
A1804E00  1C40     		add r0, r0, #1

#20				ST		q_counter	{LNXT:16|17|-1}
(*) DWORD
A1804E02  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA0003F08
A1804E06  6038     		str r0, [r7]

#21		
#22				(* fdi_q_reset := true; *)
#23				MOVE		true,fdi_q_reset	{LNXT:17|20|-1}
(*) DWORD
A1804E08  2001     		mov r0, #1 ; 1
A1804E0A  F8DF 70F0		ldr r7, [pc, #+240] ; 0x100007DD
A1804E0E  7038     		strb r0, [r7]

#24		
#25		$label0:
#26			(* END_IF *)
#27		
#28			(* q_value := to_int((3600 * to_real(fdi_q_freq)) / (to_real(q_pulses_per_acs) / 1)); *)
#29			LDP0		fdi_q_freq	{LNXT:20|2|-1}
(-) BOOL
#30			to_real	{LNXT:20|2|-1}
(*) BOOL
A1804E10  F8DF 70E4		ldr r7, [pc, #+228] ; 0x100004FC
A1804E14  6838     		ldr r0, [r7]
A1804E16  F8DF 40CC		ldr r4, [pc, #+204] ; 0x111DB
A1804E1A  F044 0401		orr r4, r4, #1
A1804E1E  47A0     		blx r4

#31			MUL		3600	{LNXT:20|2|-1}
(*) REAL
A1804E20  F44F 6761		mov r7, #3600 ; 3600
A1804E24  B082     		sub sp, sp, #8
A1804E26  F8CD 0000		str r0, [sp]
A1804E2A  4638     		mov r0, r7
A1804E2C  F8DF 40B4		ldr r4, [pc, #+180] ; 0x111DB
A1804E30  F044 0401		orr r4, r4, #1
A1804E34  47A0     		blx r4
A1804E36  4607     		mov r7, r0
A1804E38  F8DD 0000		ldr r0, [sp]
A1804E3C  B002     		add sp, sp, #8
A1804E3E  B082     		sub sp, sp, #8
A1804E40  F8CD 1000		str r1, [sp]
A1804E44  4639     		mov r1, r7
A1804E46  F8DF 40A4		ldr r4, [pc, #+164] ; 0x1123B
A1804E4A  F044 0401		orr r4, r4, #1
A1804E4E  47A0     		blx r4
A1804E50  F8DD 1000		ldr r1, [sp]
A1804E54  B002     		add sp, sp, #8

#32			DIV(		0	{LNXT:20|2|-1}
(*) REAL
A1804E56  B082     		sub sp, sp, #8
A1804E58  F8CD 0000		str r0, [sp]
A1804E5C  2000     		mov r0, #0 ; 0

#33			LDP0		q_pulses_per_acs	{LNXT:20|2|-1}
(-) USINT
#34			to_real	{LNXT:20|2|-1}
(*) USINT
A1804E5E  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A000A8
A1804E62  8838     		ldrh r0, [r7]
A1804E64  F8DF 407C		ldr r4, [pc, #+124] ; 0x111DB
A1804E68  F044 0401		orr r4, r4, #1
A1804E6C  47A0     		blx r4

#35			DIV		1	{LNXT:20|2|-1}
(*) REAL
A1804E6E  2701     		mov r7, #1 ; 1
A1804E70  B082     		sub sp, sp, #8
A1804E72  F8CD 0000		str r0, [sp]
A1804E76  4638     		mov r0, r7
A1804E78  F8DF 4068		ldr r4, [pc, #+104] ; 0x111DB
A1804E7C  F044 0401		orr r4, r4, #1
A1804E80  47A0     		blx r4
A1804E82  4607     		mov r7, r0
A1804E84  F8DD 0000		ldr r0, [sp]
A1804E88  B002     		add sp, sp, #8
A1804E8A  B082     		sub sp, sp, #8
A1804E8C  F8CD 1000		str r1, [sp]
A1804E90  4639     		mov r1, r7
A1804E92  F8DF 405C		ldr r4, [pc, #+92] ; 0x1124B
A1804E96  F044 0401		orr r4, r4, #1
A1804E9A  47A0     		blx r4
A1804E9C  F8DD 1000		ldr r1, [sp]
A1804EA0  B002     		add sp, sp, #8

#36			)	{LNXT:20|2|-1}
(*) REAL
A1804EA2  4607     		mov r7, r0
A1804EA4  F8DD 0000		ldr r0, [sp]
A1804EA8  B002     		add sp, sp, #8
A1804EAA  B082     		sub sp, sp, #8
A1804EAC  F8CD 1000		str r1, [sp]
A1804EB0  4639     		mov r1, r7
A1804EB2  F8DF 403C		ldr r4, [pc, #+60] ; 0x1124B
A1804EB6  F044 0401		orr r4, r4, #1
A1804EBA  47A0     		blx r4
A1804EBC  F8DD 1000		ldr r1, [sp]
A1804EC0  B002     		add sp, sp, #8

#37			to_int	{LNXT:20|2|-1}
(*) REAL
A1804EC2  F8DF 4024		ldr r4, [pc, #+36] ; 0x1120B
A1804EC6  F044 0401		orr r4, r4, #1
A1804ECA  47A0     		blx r4

#38			ST		q_value	{LNXT:20|2|-1}
(*) INT
A1804ECC  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F0E
A1804ED0  8038     		strh r0, [r7]

A1804ED2  E015     		b #42

A1804ED4  FFFFFFFF		; 0xA0003F08
A1804ED8  FFFFFFFF		; 0xA0003F0E
A1804EDC  A1A000A6		; 0xA1A000A6
A1804EE0  A1A000A8		; 0xA1A000A8
A1804EE4  FFFFFFFF		; 0x000111DB
A1804EE8  FFFFFFFF		; 0x0001120B
A1804EEC  FFFFFFFF		; 0x0001123B
A1804EF0  FFFFFFFF		; 0x0001124B
A1804EF4  FFFFFFFF		; 0x100004F8
A1804EF8  FFFFFFFF		; 0x100004FC
A1804EFC  FFFFFFFF		; 0x100007DD

END_PROGRAM
**************************************************
	List program: sr_save_counters
**************************************************

PROGRAM sr_save_counters

        VAR
power_err : R_TRIG;
ton_start_up : TON;
res_q : BOOL;
res_kw : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:sr_save_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* ton_start_up *)
#4			MOVE		true,ton_start_up.IN	{LNXT:1|-1|-1}
(*) UDINT
A1804F00  2001     		mov r0, #1 ; 1
A1804F02  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000B0
A1804F06  7038     		strb r0, [r7]

#5			MOVE		5000,ton_start_up.PT	{LNXT:1|-1|-1}
(*) BOOL
A1804F08  F8DF 7110		ldr r7, [pc, #+272] ; 0x1388
A1804F0C  4638     		mov r0, r7
A1804F0E  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A000B4
A1804F12  6038     		str r0, [r7]

#6			CAL		ton_start_up	{LNXT:1|2|-1}
(*) UDINT
A1804F14  E92D 0021		stmdb sp!, { r0, r5 }
A1804F18  F8DF 50DC		ldr r5, [pc, #+220] ; 0xA1A000AC
A1804F1C  F8DF 40D0		ldr r4, [pc, #+208] ; 0xA1804440
A1804F20  F044 0401		orr r4, r4, #1
A1804F24  47A0     		blx r4
A1804F26  E8BD 0021		ldmia sp!, { r0, r5 }

#7		
#8			(* power_err *)
#9			LD		ton_start_up.Q	{LNXT:2|-1|-1}
(*) UNDEF
A1804F2A  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA1A000B8
A1804F2E  7838     		ldrb r0, [r7]

#10			AND		i_rnpp	{LNXT:2|-1|-1}
(*) BOOL
A1804F30  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A0008E
A1804F34  783F     		ldrb r7, [r7]
A1804F36  4038     		and r0, r0, r7

#11			ST		power_err.clk	{LNXT:2|-1|-1}
(*) BOOL
A1804F38  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A000C1
A1804F3C  7038     		strb r0, [r7]

#12			CAL		power_err	{LNXT:2|3|-1}
(*) BOOL
A1804F3E  E92D 0021		stmdb sp!, { r0, r5 }
A1804F42  F8DF 50C4		ldr r5, [pc, #+196] ; 0xA1A000C0
A1804F46  F8DF 40A4		ldr r4, [pc, #+164] ; 0xA1804408
A1804F4A  F044 0401		orr r4, r4, #1
A1804F4E  47A0     		blx r4
A1804F50  E8BD 0021		ldmia sp!, { r0, r5 }

#13		
#14		
#15			(* IF power_err.q *)
#16			LD		power_err.q	{LNXT:3|-1|-1}
(*) UNDEF
A1804F54  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A000C2
A1804F58  7838     		ldrb r0, [r7]

#17			JMPCN	$label0	{LNXT:3|4|1}
(-) BOOL
A1804F5A  2800     		cmp r0, #0
A1804F5C  D03C     		beq #120 ; 0xA1804FD8


#18		
#19			(* THEN *)
#20		
#21		
#22				(* IF epprom_q_cnt <> q_counter *)
#23				LD		epprom_q_cnt	{LNXT:4|-1|-1}
(*) UNDEF
A1804F60  F8DF 7078		ldr r7, [pc, #+120] ; 0xA00017F0
A1804F64  6838     		ldr r0, [r7]

#24				NE		q_counter	{LNXT:4|-1|-1}
(*) DWORD
A1804F66  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F08
A1804F6A  683F     		ldr r7, [r7]
A1804F6C  42B8     		cmp r0, r7
A1804F6E  BF08 2000		eqmov r0, #0
A1804F72  BF18 2001		nemov r0, #1

#25				JMPCN	$label1	{LNXT:4|4|5}
(-) BOOL
A1804F76  2800     		cmp r0, #0
A1804F78  D010     		beq #32 ; 0xA1804F9C


#26		
#27				(* THEN *)
#28		
#29					(* res_q := sysWriteParUINT(ADR(epprom_q_cnt), q_counter); *)
#30					ADR		epprom_q_cnt	{LNXT:4|5|-1}
(*) BOOL
A1804F7C  F8DF 005C		ldr r0, [pc, #+92] ; 0xA00017F0

#31					sysWriteParUINT		q_counter	{LNXT:4|5|-1}
(*) @DWORD
A1804F80  4607     		mov r7, r0
A1804F82  4638     		mov r0, r7
A1804F84  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0003F08
A1804F88  683F     		ldr r7, [r7]
A1804F8A  4639     		mov r1, r7
A1804F8C  F8DF 4090		ldr r4, [pc, #+144] ; 0x27D11
A1804F90  F044 0401		orr r4, r4, #1
A1804F94  47A0     		blx r4

#32					ST		res_q	{LNXT:4|5|-1}
(*) BOOL
A1804F96  F8DF 707C		ldr r7, [pc, #+124] ; 0xA1A000C4
A1804F9A  7038     		strb r0, [r7]

#33		
#34		$label1:
#35				(* END_IF *)
#36		
#37		
#38				(* IF epprom_kw_cnt <> kw_counter *)
#39				LD		epprom_kw_cnt	{LNXT:5|-1|-1}
(*) UNDEF
A1804F9C  F8DF 7040		ldr r7, [pc, #+64] ; 0xA00017F8
A1804FA0  6838     		ldr r0, [r7]

#40				NE		kw_counter	{LNXT:5|-1|-1}
(*) DWORD
A1804FA2  F8DF 7040		ldr r7, [pc, #+64] ; 0xA0003F04
A1804FA6  683F     		ldr r7, [r7]
A1804FA8  42B8     		cmp r0, r7
A1804FAA  BF08 2000		eqmov r0, #0
A1804FAE  BF18 2001		nemov r0, #1

#41				JMPCN	$label2	{LNXT:5|5|1}
(-) BOOL
A1804FB2  2800     		cmp r0, #0
A1804FB4  D010     		beq #32 ; 0xA1804FD8


#42		
#43				(* THEN *)
#44		
#45					(* res_kw := sysWriteParUINT(ADR(epprom_kw_cnt), kw_counter); *)
#46					ADR		epprom_kw_cnt	{LNXT:5|1|-1}
(*) BOOL
A1804FB8  F8DF 0024		ldr r0, [pc, #+36] ; 0xA00017F8

#47					sysWriteParUINT		kw_counter	{LNXT:5|1|-1}
(*) @DWORD
A1804FBC  4607     		mov r7, r0
A1804FBE  4638     		mov r0, r7
A1804FC0  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003F04
A1804FC4  683F     		ldr r7, [r7]
A1804FC6  4639     		mov r1, r7
A1804FC8  F8DF 4054		ldr r4, [pc, #+84] ; 0x27D11
A1804FCC  F044 0401		orr r4, r4, #1
A1804FD0  47A0     		blx r4

#48					ST		res_kw	{LNXT:5|1|-1}
(*) BOOL
A1804FD2  F8DF 7044		ldr r7, [pc, #+68] ; 0xA1A000C5
A1804FD6  7038     		strb r0, [r7]

A1804FD8  E024     		b #72

A1804FDC  FFFFFFFF		; 0xA00017F0
A1804FE0  FFFFFFFF		; 0xA00017F8
A1804FE4  FFFFFFFF		; 0xA0003F04
A1804FE8  FFFFFFFF		; 0xA0003F08
A1804FEC  A1804408		; 0xA1804408
A1804FF0  A1804440		; 0xA1804440
A1804FF4  A1A0008E		; 0xA1A0008E
A1804FF8  A1A000AC		; 0xA1A000AC
A1804FFC  A1A000B0		; 0xA1A000B0
A1805000  A1A000B4		; 0xA1A000B4
A1805004  A1A000B8		; 0xA1A000B8
A1805008  A1A000C0		; 0xA1A000C0
A180500C  A1A000C1		; 0xA1A000C1
A1805010  A1A000C2		; 0xA1A000C2
A1805014  A1A000C4		; 0xA1A000C4
A1805018  A1A000C5		; 0xA1A000C5
A180501C  00001388		; 0x00001388
A1805020  FFFFFFFF		; 0x00027D11

END_PROGRAM
**************************************************
	List program: sr_ATS_Ctrl
**************************************************

PROGRAM sr_ATS_Ctrl

        VAR
TON_StartUp_1 : TON;
TON_StartUp_2 : TON;
stopping_timer : TON;
downtimeIN : BOOL;
washing_timer : TON;
checkWashAndStart : CheckWashAndStart;
	END_VAR

END_PROGRAM

#0		{SRC:sr_ATS_Ctrl}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF i_val_state = 1 and
#5		   i_pb_loc = 1 and
#6		   Not Alarms.0 And
#7		   Not Alarms.3 And
#8		   Not Alarms.4 And 
#9		   Not Alarms.5 And 
#10		   Not Alarms.7 *)
#11			LD		Alarms.7	{LNXT:1|-1|-1}
(*) UNDEF
A1805024  F8DF 74C8		ldr r7, [pc, #+1224] ; 0xA0003F20
A1805028  8838     		ldrh r0, [r7]
A180502A  F3C0 10C0		ubfx r0, r0, #7, #1

#12			NOT	{LNXT:1|-1|-1}
(*) BOOL
A180502E  2800     		cmp r0, #0
A1805030  BF08 2001		eqmov r0, #1
A1805034  BF18 2000		nemov r0, #0

#13			AND(		Alarms.5	{LNXT:1|-1|-1}
(*) BOOL
A1805038  B082     		sub sp, sp, #8
A180503A  F8CD 0000		str r0, [sp]
A180503E  F8DF 74B0		ldr r7, [pc, #+1200] ; 0xA0003F20
A1805042  8838     		ldrh r0, [r7]
A1805044  F3C0 1040		ubfx r0, r0, #5, #1

#14			NOT	{LNXT:1|-1|-1}
(*) BOOL
A1805048  2800     		cmp r0, #0
A180504A  BF08 2001		eqmov r0, #1
A180504E  BF18 2000		nemov r0, #0

#15			AND(		Alarms.4	{LNXT:1|-1|-1}
(*) BOOL
A1805052  B082     		sub sp, sp, #8
A1805054  F8CD 0000		str r0, [sp]
A1805058  F8DF 7494		ldr r7, [pc, #+1172] ; 0xA0003F20
A180505C  8838     		ldrh r0, [r7]
A180505E  F3C0 1000		ubfx r0, r0, #4, #1

#16			NOT	{LNXT:1|-1|-1}
(*) BOOL
A1805062  2800     		cmp r0, #0
A1805064  BF08 2001		eqmov r0, #1
A1805068  BF18 2000		nemov r0, #0

#17			AND(		Alarms.3	{LNXT:1|-1|-1}
(*) BOOL
A180506C  B082     		sub sp, sp, #8
A180506E  F8CD 0000		str r0, [sp]
A1805072  F8DF 747C		ldr r7, [pc, #+1148] ; 0xA0003F20
A1805076  8838     		ldrh r0, [r7]
A1805078  F3C0 00C0		ubfx r0, r0, #3, #1

#18			NOT	{LNXT:1|-1|-1}
(*) BOOL
A180507C  2800     		cmp r0, #0
A180507E  BF08 2001		eqmov r0, #1
A1805082  BF18 2000		nemov r0, #0

#19			AND(		Alarms.0	{LNXT:1|-1|-1}
(*) BOOL
A1805086  B082     		sub sp, sp, #8
A1805088  F8CD 0000		str r0, [sp]
A180508C  F8DF 7460		ldr r7, [pc, #+1120] ; 0xA0003F20
A1805090  8838     		ldrh r0, [r7]
A1805092  F3C0 0000		ubfx r0, r0, #0, #1

#20			NOT	{LNXT:1|-1|-1}
(*) BOOL
A1805096  2800     		cmp r0, #0
A1805098  BF08 2001		eqmov r0, #1
A180509C  BF18 2000		nemov r0, #0

#21			AND(		i_pb_loc	{LNXT:1|-1|-1}
(*) BOOL
A18050A0  B082     		sub sp, sp, #8
A18050A2  F8CD 0000		str r0, [sp]
A18050A6  F8DF 7460		ldr r7, [pc, #+1120] ; 0xA1A00042
A18050AA  F9B7 0000		ldrsh r0, [r7]

#22			EQ		1	{LNXT:1|-1|-1}
(*) INT
A18050AE  2801     		cmp r0, #1
A18050B0  BF18 2000		nemov r0, #0
A18050B4  BF08 2001		eqmov r0, #1

#23			AND(		i_val_state	{LNXT:1|-1|-1}
(*) BOOL
A18050B8  B082     		sub sp, sp, #8
A18050BA  F8CD 0000		str r0, [sp]
A18050BE  F8DF 744C		ldr r7, [pc, #+1100] ; 0xA1A00044
A18050C2  F9B7 0000		ldrsh r0, [r7]

#24			EQ		1	{LNXT:1|-1|-1}
(*) INT
A18050C6  2801     		cmp r0, #1
A18050C8  BF18 2000		nemov r0, #0
A18050CC  BF08 2001		eqmov r0, #1

#25			)	{LNXT:1|-1|-1}
(*) BOOL
A18050D0  4607     		mov r7, r0
A18050D2  F8DD 0000		ldr r0, [sp]
A18050D6  B002     		add sp, sp, #8
A18050D8  4038     		and r0, r0, r7

#26			)	{LNXT:1|-1|-1}
(*) BOOL
A18050DA  4607     		mov r7, r0
A18050DC  F8DD 0000		ldr r0, [sp]
A18050E0  B002     		add sp, sp, #8
A18050E2  4038     		and r0, r0, r7

#27			)	{LNXT:1|-1|-1}
(*) BOOL
A18050E4  4607     		mov r7, r0
A18050E6  F8DD 0000		ldr r0, [sp]
A18050EA  B002     		add sp, sp, #8
A18050EC  4038     		and r0, r0, r7

#28			)	{LNXT:1|-1|-1}
(*) BOOL
A18050EE  4607     		mov r7, r0
A18050F0  F8DD 0000		ldr r0, [sp]
A18050F4  B002     		add sp, sp, #8
A18050F6  4038     		and r0, r0, r7

#29			)	{LNXT:1|-1|-1}
(*) BOOL
A18050F8  4607     		mov r7, r0
A18050FA  F8DD 0000		ldr r0, [sp]
A18050FE  B002     		add sp, sp, #8
A1805100  4038     		and r0, r0, r7

#30			)	{LNXT:1|-1|-1}
(*) BOOL
A1805102  4607     		mov r7, r0
A1805104  F8DD 0000		ldr r0, [sp]
A1805108  B002     		add sp, sp, #8
A180510A  4038     		and r0, r0, r7

#31			JMPCN	$label0	{LNXT:1|8|17}
(-) BOOL
A180510C  2800     		cmp r0, #0
A180510E  D029     		beq #82 ; 0xA1805164


#32		
#33			(* THEN *)
#34		
#35				(* checkWashAndStart *)
#36				MOVE		o_val_close_fall,checkWashAndStart.o_val_close_fall	{LNXT:8|-1|-1}
(*) BOOL
A1805112  F8DF 7470		ldr r7, [pc, #+1136] ; 0x100004AD
A1805116  7838     		ldrb r0, [r7]
A1805118  F8DF 740C		ldr r7, [pc, #+1036] ; 0xA1A00060
A180511C  7038     		strb r0, [r7]

#37				MOVE		o_val_close_R,checkWashAndStart.o_val_close_R	{LNXT:9|-1|-1}
(*) BOOL
A180511E  F8DF 746C		ldr r7, [pc, #+1132] ; 0x100004AF
A1805122  7838     		ldrb r0, [r7]
A1805124  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0005E
A1805128  7038     		strb r0, [r7]

#38				MOVE		o_val_open_fall,checkWashAndStart.o_val_open_fall	{LNXT:10|-1|-1}
(*) BOOL
A180512A  F8DF 7454		ldr r7, [pc, #+1108] ; 0x100004AC
A180512E  7838     		ldrb r0, [r7]
A1805130  F8DF 73F0		ldr r7, [pc, #+1008] ; 0xA1A0005F
A1805134  7038     		strb r0, [r7]

#39				MOVE		o_val_open_R,checkWashAndStart.o_val_open_R	{LNXT:11|-1|-1}
(*) BOOL
A1805136  F8DF 7450		ldr r7, [pc, #+1104] ; 0x100004AE
A180513A  7838     		ldrb r0, [r7]
A180513C  F8DF 73DC		ldr r7, [pc, #+988] ; 0xA1A0005D
A1805140  7038     		strb r0, [r7]

#40				MOVE		sv_washing,checkWashAndStart.sv_washing	{LNXT:12|-1|-1}
(*) BOOL
A1805142  F8DF 73B4		ldr r7, [pc, #+948] ; 0xA0003F26
A1805146  7838     		ldrb r0, [r7]
A1805148  F8DF 73CC		ldr r7, [pc, #+972] ; 0xA1A0005C
A180514C  7038     		strb r0, [r7]

#41				CAL		checkWashAndStart	{LNXT:8|17|-1}
(*) BOOL
A180514E  E92D 0021		stmdb sp!, { r0, r5 }
A1805152  F8DF 53C0		ldr r5, [pc, #+960] ; 0xA1A00048
A1805156  F8DF 43A8		ldr r4, [pc, #+936] ; 0xA18044E0
A180515A  F044 0401		orr r4, r4, #1
A180515E  47A0     		blx r4
A1805160  E8BD 0021		ldmia sp!, { r0, r5 }

#42		
#43		$label0:
#44			(* END_IF *)
#45		
#46		
#47			(* IF i_run_ats and i_pb_rem = 1 *)
#48			LD		i_pb_rem	{LNXT:17|-1|-1}
(*) UNDEF
A1805164  F8DF 73A8		ldr r7, [pc, #+936] ; 0xA1A00046
A1805168  F9B7 0000		ldrsh r0, [r7]

#49			EQ		1	{LNXT:17|-1|-1}
(*) INT
A180516C  2801     		cmp r0, #1
A180516E  BF18 2000		nemov r0, #0
A1805172  BF08 2001		eqmov r0, #1

#50			AND(		i_run_ats	{LNXT:17|-1|-1}
(*) BOOL
A1805176  B082     		sub sp, sp, #8
A1805178  F8CD 0000		str r0, [sp]
A180517C  F8DF 7384		ldr r7, [pc, #+900] ; 0xA1A00041
A1805180  7838     		ldrb r0, [r7]

#51			NOT	{LNXT:17|-1|-1}
(*) BOOL
A1805182  2800     		cmp r0, #0
A1805184  BF08 2001		eqmov r0, #1
A1805188  BF18 2000		nemov r0, #0

#52			)	{LNXT:17|-1|-1}
(*) BOOL
A180518C  4607     		mov r7, r0
A180518E  F8DD 0000		ldr r0, [sp]
A1805192  B002     		add sp, sp, #8
A1805194  4038     		and r0, r0, r7

#53			JMPCN	$label1	{LNXT:17|18|23}
(-) BOOL
A1805196  2800     		cmp r0, #0
A1805198  D008     		beq #16 ; 0xA18051AC


#54		
#55			(* THEN *)
#56		
#57				(* o_val_close_fall:=true; *)
#58				MOVE		true,o_val_close_fall	{LNXT:18|19|-1}
(*) BOOL
A180519C  2001     		mov r0, #1 ; 1
A180519E  F8DF 73E4		ldr r7, [pc, #+996] ; 0x100004AD
A18051A2  7038     		strb r0, [r7]

#59		
#60				(* o_val_close_R:=true; *)
#61				MOVE		true,o_val_close_R	{LNXT:19|23|-1}
(*) BOOL
A18051A4  2001     		mov r0, #1 ; 1
A18051A6  F8DF 73E4		ldr r7, [pc, #+996] ; 0x100004AF
A18051AA  7038     		strb r0, [r7]

#62		
#63		$label1:
#64			(* END_IF *)
#65		
#66			(* TON_StartUp_1 *)
#67			MOVE		q_start_ats,TON_StartUp_1.IN	{LNXT:23|-1|-1}
(*) BOOL
A18051AC  F8DF 73E0		ldr r7, [pc, #+992] ; 0x100004B3
A18051B0  7838     		ldrb r0, [r7]
A18051B2  F8DF 7384		ldr r7, [pc, #+900] ; 0xA1A00068
A18051B6  7038     		strb r0, [r7]

#68			MOVE		20000,TON_StartUp_1.PT	{LNXT:23|-1|-1}
(*) BOOL
A18051B8  F8DF 73C0		ldr r7, [pc, #+960] ; 0x4E20
A18051BC  4638     		mov r0, r7
A18051BE  F8DF 737C		ldr r7, [pc, #+892] ; 0xA1A0006C
A18051C2  6038     		str r0, [r7]

#69			CAL		TON_StartUp_1	{LNXT:23|24|-1}
(*) UDINT
A18051C4  E92D 0021		stmdb sp!, { r0, r5 }
A18051C8  F8DF 5368		ldr r5, [pc, #+872] ; 0xA1A00064
A18051CC  F8DF 432C		ldr r4, [pc, #+812] ; 0xA1804440
A18051D0  F044 0401		orr r4, r4, #1
A18051D4  47A0     		blx r4
A18051D6  E8BD 0021		ldmia sp!, { r0, r5 }

#70		
#71			(* TON_StartUp_2 *)
#72			MOVE		TON_StartUp_1.Q,TON_StartUp_2.IN	{LNXT:24|-1|-1}
(*) UDINT
A18051DA  F8DF 7364		ldr r7, [pc, #+868] ; 0xA1A00070
A18051DE  7838     		ldrb r0, [r7]
A18051E0  F8DF 7364		ldr r7, [pc, #+868] ; 0xA1A0007C
A18051E4  7038     		strb r0, [r7]

#73			MOVE		1000,TON_StartUp_2.PT	{LNXT:24|-1|-1}
(*) BOOL
A18051E6  F44F 707A		mov r0, #1000 ; 1000
A18051EA  F8DF 7360		ldr r7, [pc, #+864] ; 0xA1A00080
A18051EE  6038     		str r0, [r7]

#74			CAL		TON_StartUp_2	{LNXT:24|26|-1}
(*) UDINT
A18051F0  E92D 0021		stmdb sp!, { r0, r5 }
A18051F4  F8DF 534C		ldr r5, [pc, #+844] ; 0xA1A00078
A18051F8  F8DF 4300		ldr r4, [pc, #+768] ; 0xA1804440
A18051FC  F044 0401		orr r4, r4, #1
A1805200  47A0     		blx r4
A1805202  E8BD 0021		ldmia sp!, { r0, r5 }

#75		
#76		
#77			(* IF q_start_ats *)
#78			LD		q_start_ats	{LNXT:26|-1|-1}
(*) UNDEF
A1805206  F8DF 7388		ldr r7, [pc, #+904] ; 0x100004B3
A180520A  7838     		ldrb r0, [r7]

#79			JMPCN	$label2	{LNXT:26|27|36}
(-) BOOL
A180520C  2800     		cmp r0, #0
A180520E  D030     		beq #96 ; 0xA1805272


#80		
#81			(* THEN *)
#82		
#83		
#84				(* IF i_sns_pressure And TON_StartUp_1.Q *)
#85				LD		i_sns_pressure	{LNXT:27|-1|-1}
(*) UNDEF
A1805212  F8DF 7340		ldr r7, [pc, #+832] ; 0xA1A0008C
A1805216  7838     		ldrb r0, [r7]

#86				NOT	{LNXT:27|-1|-1}
(*) BOOL
A1805218  2800     		cmp r0, #0
A180521A  BF08 2001		eqmov r0, #1
A180521E  BF18 2000		nemov r0, #0

#87				AND		TON_StartUp_1.Q	{LNXT:27|-1|-1}
(*) BOOL
A1805222  F8DF 731C		ldr r7, [pc, #+796] ; 0xA1A00070
A1805226  783F     		ldrb r7, [r7]
A1805228  4038     		and r0, r0, r7

#88				JMPCN	$label3	{LNXT:27|28|30}
(-) BOOL
A180522A  2800     		cmp r0, #0
A180522C  D009     		beq #18 ; 0xA1805242


#89		
#90				(* THEN *)
#91		
#92					(* Alarms.0 := True; *)
#93					MOVE		True,Alarms.0	{LNXT:28|30|-1}
(*) BOOL
A1805230  2001     		mov r0, #1 ; 1
A1805232  F8DF 72BC		ldr r7, [pc, #+700] ; 0xA0003F20
A1805236  F8B7 8000		ldrh r8, [r7]
A180523A  F360 0800		bfi r8, r0, #0, #1
A180523E  F8A7 8000		strh r8, [r7]

#94		
#95		$label3:
#96				(* END_IF *)
#97		
#98		
#99				(* IF i_sns_pressure And TON_StartUp_2.Q *)
#100				LD		i_sns_pressure	{LNXT:30|-1|-1}
(*) UNDEF
A1805242  F8DF 7310		ldr r7, [pc, #+784] ; 0xA1A0008C
A1805246  7838     		ldrb r0, [r7]

#101				NOT	{LNXT:30|-1|-1}
(*) BOOL
A1805248  2800     		cmp r0, #0
A180524A  BF08 2001		eqmov r0, #1
A180524E  BF18 2000		nemov r0, #0

#102				AND		TON_StartUp_2.Q	{LNXT:30|-1|-1}
(*) BOOL
A1805252  F8DF 72FC		ldr r7, [pc, #+764] ; 0xA1A00084
A1805256  783F     		ldrb r7, [r7]
A1805258  4038     		and r0, r0, r7

#103				JMPCN	$label4	{LNXT:30|31|36}
(-) BOOL
A180525A  2800     		cmp r0, #0
A180525C  D009     		beq #18 ; 0xA1805272


#104		
#105				(* THEN *)
#106		
#107					(* Alarms.1 := True; *)
#108					MOVE		True,Alarms.1	{LNXT:31|36|-1}
(*) BOOL
A1805260  2001     		mov r0, #1 ; 1
A1805262  F8DF 728C		ldr r7, [pc, #+652] ; 0xA0003F20
A1805266  F8B7 8000		ldrh r8, [r7]
A180526A  F360 0841		bfi r8, r0, #1, #1
A180526E  F8A7 8000		strh r8, [r7]

#109		
#110		$label4:
#111				(* END_IF *)
#112		
#113		$label2:
#114			(* END_IF *)
#115		
#116		
#117			(* IF q_start_ats *)
#118			LD		q_start_ats	{LNXT:36|-1|-1}
(*) UNDEF
A1805272  F8DF 731C		ldr r7, [pc, #+796] ; 0x100004B3
A1805276  7838     		ldrb r0, [r7]

#119			NOT	{LNXT:36|-1|-1}
(*) BOOL
A1805278  2800     		cmp r0, #0
A180527A  BF08 2001		eqmov r0, #1
A180527E  BF18 2000		nemov r0, #0

#120			JMPCN	$label5	{LNXT:36|37|39}
(-) BOOL
A1805282  2800     		cmp r0, #0
A1805284  D006     		beq #12 ; 0xA1805294


#121		
#122			(* THEN *)
#123		
#124				(* downtimeIN:=true; *)
#125				MOVE		true,downtimeIN	{LNXT:37|42|-1}
(*) BOOL
A1805288  2001     		mov r0, #1 ; 1
A180528A  F8DF 72CC		ldr r7, [pc, #+716] ; 0xA1A0008D
A180528E  7038     		strb r0, [r7]

#126				JMP		$label6	{LNXT:36|37|39}
(-) BOOL
A1805290  E004     		b #8 ; 0xA180529C


#127		$label5:
#128		
#129			(* ELSE *)
#130		
#131				(* downtimeIN:=false; *)
#132				MOVE		false,downtimeIN	{LNXT:39|42|-1}
(*) BOOL
A1805294  2000     		mov r0, #0 ; 0
A1805296  F8DF 72C0		ldr r7, [pc, #+704] ; 0xA1A0008D
A180529A  7038     		strb r0, [r7]

#133		
#134		$label6:
#135			(* END_IF *)
#136		
#137			(* stopping_timer *)
#138			MOVE		downtimeIN,stopping_timer.IN	{LNXT:42|-1|-1}
(*) BOOL
A180529C  F8DF 72B8		ldr r7, [pc, #+696] ; 0xA1A0008D
A18052A0  7838     		ldrb r0, [r7]
A18052A2  F8DF 72C4		ldr r7, [pc, #+708] ; 0xA1A00094
A18052A6  7038     		strb r0, [r7]

#139			MOVE		ep_time_wash,stopping_timer.PT	{LNXT:42|-1|-1}
(*) BOOL
A18052A8  F8DF 7240		ldr r7, [pc, #+576] ; 0xA00017F4
A18052AC  F9B7 0000		ldrsh r0, [r7]
A18052B0  F8DF 72B8		ldr r7, [pc, #+696] ; 0xA1A00098
A18052B4  6038     		str r0, [r7]

#140			CAL		stopping_timer	{LNXT:42|44|-1}
(*) UDINT
A18052B6  E92D 0021		stmdb sp!, { r0, r5 }
A18052BA  F8DF 52A8		ldr r5, [pc, #+680] ; 0xA1A00090
A18052BE  F8DF 423C		ldr r4, [pc, #+572] ; 0xA1804440
A18052C2  F044 0401		orr r4, r4, #1
A18052C6  47A0     		blx r4
A18052C8  E8BD 0021		ldmia sp!, { r0, r5 }

#141		
#142		
#143			(* IF stopping_timer.Q *)
#144			LD		stopping_timer.Q	{LNXT:44|-1|-1}
(*) UNDEF
A18052CC  F8DF 72A0		ldr r7, [pc, #+672] ; 0xA1A0009C
A18052D0  7838     		ldrb r0, [r7]

#145			JMPCN	$label7	{LNXT:44|45|49}
(-) BOOL
A18052D2  2800     		cmp r0, #0
A18052D4  D004     		beq #8 ; 0xA18052E0


#146		
#147			(* THEN *)
#148		
#149				(* sv_washing :=true; *)
#150				MOVE		true,sv_washing	{LNXT:45|49|-1}
(*) BOOL
A18052D8  2001     		mov r0, #1 ; 1
A18052DA  F8DF 721C		ldr r7, [pc, #+540] ; 0xA0003F26
A18052DE  7038     		strb r0, [r7]

#151		
#152		$label7:
#153			(* END_IF *)
#154		
#155			(* Alarms.2 := i_sns_door; *)
#156			MOVE		i_sns_door,Alarms.2	{LNXT:49|52|-1}
(*) BOOL
A18052E0  F8DF 727C		ldr r7, [pc, #+636] ; 0xA1A0008F
A18052E4  7838     		ldrb r0, [r7]
A18052E6  F8DF 7208		ldr r7, [pc, #+520] ; 0xA0003F20
A18052EA  F8B7 8000		ldrh r8, [r7]
A18052EE  F360 0882		bfi r8, r0, #2, #1
A18052F2  F8A7 8000		strh r8, [r7]

#157		
#158			(* Alarms.3 := i_rnpp; *)
#159			MOVE		i_rnpp,Alarms.3	{LNXT:52|55|-1}
(*) BOOL
A18052F6  F8DF 7264		ldr r7, [pc, #+612] ; 0xA1A0008E
A18052FA  7838     		ldrb r0, [r7]
A18052FC  F8DF 71F0		ldr r7, [pc, #+496] ; 0xA0003F20
A1805300  F8B7 8000		ldrh r8, [r7]
A1805304  F360 08C3		bfi r8, r0, #3, #1
A1805308  F8A7 8000		strh r8, [r7]

#160		
#161			(* Alarms.4 :=  Not i_qf_ats; *)
#162			LD		i_qf_ats	{LNXT:55|58|-1}
(*) UNDEF
A180530C  F8DF 7264		ldr r7, [pc, #+612] ; 0xA1A000A4
A1805310  7838     		ldrb r0, [r7]

#163			NOT	{LNXT:55|58|-1}
(*) BOOL
A1805312  2800     		cmp r0, #0
A1805314  BF08 2001		eqmov r0, #1
A1805318  BF18 2000		nemov r0, #0

#164			ST		Alarms.4	{LNXT:55|58|-1}
(*) BOOL
A180531C  F8DF 71D0		ldr r7, [pc, #+464] ; 0xA0003F20
A1805320  F8B7 8000		ldrh r8, [r7]
A1805324  F360 1804		bfi r8, r0, #4, #1
A1805328  F8A7 8000		strh r8, [r7]

#165		
#166			(* Alarms.5 := i_no_alm_ats; *)
#167			MOVE		i_no_alm_ats,Alarms.5	{LNXT:58|67|-1}
(*) BOOL
A180532C  F8DF 7248		ldr r7, [pc, #+584] ; 0xA1A000A5
A1805330  7838     		ldrb r0, [r7]
A1805332  F8DF 71BC		ldr r7, [pc, #+444] ; 0xA0003F20
A1805336  F8B7 8000		ldrh r8, [r7]
A180533A  F360 1845		bfi r8, r0, #5, #1
A180533E  F8A7 8000		strh r8, [r7]

#168		
#169		
#170			(* IF i_pb_rem = 1 And Not Alarms.0 And Not Alarms.3 And Not Alarms.4 And Not Alarms.5 And Not Alarms.7 *)
#171			LD		Alarms.7	{LNXT:67|-1|-1}
(*) UNDEF
A1805342  F8DF 71AC		ldr r7, [pc, #+428] ; 0xA0003F20
A1805346  8838     		ldrh r0, [r7]
A1805348  F3C0 10C0		ubfx r0, r0, #7, #1

#172			NOT	{LNXT:67|-1|-1}
(*) BOOL
A180534C  2800     		cmp r0, #0
A180534E  BF08 2001		eqmov r0, #1
A1805352  BF18 2000		nemov r0, #0

#173			AND(		Alarms.5	{LNXT:67|-1|-1}
(*) BOOL
A1805356  B082     		sub sp, sp, #8
A1805358  F8CD 0000		str r0, [sp]
A180535C  F8DF 7190		ldr r7, [pc, #+400] ; 0xA0003F20
A1805360  8838     		ldrh r0, [r7]
A1805362  F3C0 1040		ubfx r0, r0, #5, #1

#174			NOT	{LNXT:67|-1|-1}
(*) BOOL
A1805366  2800     		cmp r0, #0
A1805368  BF08 2001		eqmov r0, #1
A180536C  BF18 2000		nemov r0, #0

#175			AND(		Alarms.4	{LNXT:67|-1|-1}
(*) BOOL
A1805370  B082     		sub sp, sp, #8
A1805372  F8CD 0000		str r0, [sp]
A1805376  F8DF 7178		ldr r7, [pc, #+376] ; 0xA0003F20
A180537A  8838     		ldrh r0, [r7]
A180537C  F3C0 1000		ubfx r0, r0, #4, #1

#176			NOT	{LNXT:67|-1|-1}
(*) BOOL
A1805380  2800     		cmp r0, #0
A1805382  BF08 2001		eqmov r0, #1
A1805386  BF18 2000		nemov r0, #0

#177			AND(		Alarms.3	{LNXT:67|-1|-1}
(*) BOOL
A180538A  B082     		sub sp, sp, #8
A180538C  F8CD 0000		str r0, [sp]
A1805390  F8DF 715C		ldr r7, [pc, #+348] ; 0xA0003F20
A1805394  8838     		ldrh r0, [r7]
A1805396  F3C0 00C0		ubfx r0, r0, #3, #1

#178			NOT	{LNXT:67|-1|-1}
(*) BOOL
A180539A  2800     		cmp r0, #0
A180539C  BF08 2001		eqmov r0, #1
A18053A0  BF18 2000		nemov r0, #0

#179			AND(		Alarms.0	{LNXT:67|-1|-1}
(*) BOOL
A18053A4  B082     		sub sp, sp, #8
A18053A6  F8CD 0000		str r0, [sp]
A18053AA  F8DF 7144		ldr r7, [pc, #+324] ; 0xA0003F20
A18053AE  8838     		ldrh r0, [r7]
A18053B0  F3C0 0000		ubfx r0, r0, #0, #1

#180			NOT	{LNXT:67|-1|-1}
(*) BOOL
A18053B4  2800     		cmp r0, #0
A18053B6  BF08 2001		eqmov r0, #1
A18053BA  BF18 2000		nemov r0, #0

#181			AND(		i_pb_rem	{LNXT:67|-1|-1}
(*) BOOL
A18053BE  B082     		sub sp, sp, #8
A18053C0  F8CD 0000		str r0, [sp]
A18053C4  F8DF 7148		ldr r7, [pc, #+328] ; 0xA1A00046
A18053C8  F9B7 0000		ldrsh r0, [r7]

#182			EQ		1	{LNXT:67|-1|-1}
(*) INT
A18053CC  2801     		cmp r0, #1
A18053CE  BF18 2000		nemov r0, #0
A18053D2  BF08 2001		eqmov r0, #1

#183			)	{LNXT:67|-1|-1}
(*) BOOL
A18053D6  4607     		mov r7, r0
A18053D8  F8DD 0000		ldr r0, [sp]
A18053DC  B002     		add sp, sp, #8
A18053DE  4038     		and r0, r0, r7

#184			)	{LNXT:67|-1|-1}
(*) BOOL
A18053E0  4607     		mov r7, r0
A18053E2  F8DD 0000		ldr r0, [sp]
A18053E6  B002     		add sp, sp, #8
A18053E8  4038     		and r0, r0, r7

#185			)	{LNXT:67|-1|-1}
(*) BOOL
A18053EA  4607     		mov r7, r0
A18053EC  F8DD 0000		ldr r0, [sp]
A18053F0  B002     		add sp, sp, #8
A18053F2  4038     		and r0, r0, r7

#186			)	{LNXT:67|-1|-1}
(*) BOOL
A18053F4  4607     		mov r7, r0
A18053F6  F8DD 0000		ldr r0, [sp]
A18053FA  B002     		add sp, sp, #8
A18053FC  4038     		and r0, r0, r7

#187			)	{LNXT:67|-1|-1}
(*) BOOL
A18053FE  4607     		mov r7, r0
A1805400  F8DD 0000		ldr r0, [sp]
A1805404  B002     		add sp, sp, #8
A1805406  4038     		and r0, r0, r7

#188			JMPCN	$label8	{LNXT:67|69|84}
(-) BOOL
A1805408  2800     		cmp r0, #0
A180540A  D046     		beq #140 ; 0xA180549A


#189		
#190			(* THEN *)
#191		
#192		
#193				(* IF CMD.0 *)
#194				LD		CMD.0	{LNXT:69|-1|-1}
(*) UNDEF
A180540E  F8DF 70E4		ldr r7, [pc, #+228] ; 0xA0003F22
A1805412  8838     		ldrh r0, [r7]
A1805414  F3C0 0000		ubfx r0, r0, #0, #1

#195				JMPCN	$label10	{LNXT:69|70|80}
(-) BOOL
A1805418  2800     		cmp r0, #0
A180541A  D038     		beq #112 ; 0xA180548E


#196		
#197				(* THEN *)
#198		
#199					(* checkWashAndStart *)
#200					MOVE		o_val_close_fall,checkWashAndStart.o_val_close_fall	{LNXT:70|-1|-1}
(*) BOOL
A180541E  F8DF 7164		ldr r7, [pc, #+356] ; 0x100004AD
A1805422  7838     		ldrb r0, [r7]
A1805424  F8DF 7100		ldr r7, [pc, #+256] ; 0xA1A00060
A1805428  7038     		strb r0, [r7]

#201					MOVE		o_val_close_R,checkWashAndStart.o_val_close_R	{LNXT:71|-1|-1}
(*) BOOL
A180542A  F8DF 7160		ldr r7, [pc, #+352] ; 0x100004AF
A180542E  7838     		ldrb r0, [r7]
A1805430  F8DF 70EC		ldr r7, [pc, #+236] ; 0xA1A0005E
A1805434  7038     		strb r0, [r7]

#202					MOVE		o_val_open_fall,checkWashAndStart.o_val_open_fall	{LNXT:72|-1|-1}
(*) BOOL
A1805436  F8DF 7148		ldr r7, [pc, #+328] ; 0x100004AC
A180543A  7838     		ldrb r0, [r7]
A180543C  F8DF 70E4		ldr r7, [pc, #+228] ; 0xA1A0005F
A1805440  7038     		strb r0, [r7]

#203					MOVE		o_val_open_R,checkWashAndStart.o_val_open_R	{LNXT:73|-1|-1}
(*) BOOL
A1805442  F8DF 7144		ldr r7, [pc, #+324] ; 0x100004AE
A1805446  7838     		ldrb r0, [r7]
A1805448  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A0005D
A180544C  7038     		strb r0, [r7]

#204					MOVE		sv_washing,checkWashAndStart.sv_washing	{LNXT:74|-1|-1}
(*) BOOL
A180544E  F8DF 70A8		ldr r7, [pc, #+168] ; 0xA0003F26
A1805452  7838     		ldrb r0, [r7]
A1805454  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A0005C
A1805458  7038     		strb r0, [r7]

#205					MOVE		q_start_ats,checkWashAndStart.q_start_ats	{LNXT:75|-1|-1}
(*) BOOL
A180545A  F8DF 7134		ldr r7, [pc, #+308] ; 0x100004B3
A180545E  7838     		ldrb r0, [r7]
A1805460  F8DF 70C8		ldr r7, [pc, #+200] ; 0xA1A00061
A1805464  7038     		strb r0, [r7]

#206					MOVE		ep_time_wash,checkWashAndStart.ep_time_wash	{LNXT:76|-1|-1}
(*) BOOL
A1805466  F8DF 7084		ldr r7, [pc, #+132] ; 0xA00017F4
A180546A  F9B7 0000		ldrsh r0, [r7]
A180546E  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A00062
A1805472  8038     		strh r0, [r7]

#207					CAL		checkWashAndStart	{LNXT:70|99|-1}
(*) INT
A1805474  E92D 0021		stmdb sp!, { r0, r5 }
A1805478  F8DF 5098		ldr r5, [pc, #+152] ; 0xA1A00048
A180547C  F8DF 4080		ldr r4, [pc, #+128] ; 0xA18044E0
A1805480  F044 0401		orr r4, r4, #1
A1805484  47A0     		blx r4
A1805486  E8BD 0021		ldmia sp!, { r0, r5 }

#208					JMP		$label11	{LNXT:69|70|80}
(-) INT
A180548A  E004     		b #8 ; 0xA1805496


#209		$label10:
#210		
#211				(* ELSE *)
#212		
#213					(* q_start_ats := False; *)
#214					MOVE		False,q_start_ats	{LNXT:80|99|-1}
(*) INT
A180548E  2000     		mov r0, #0 ; 0
A1805490  F8DF 70FC		ldr r7, [pc, #+252] ; 0x100004B3
A1805494  7038     		strb r0, [r7]

#215		
#216		$label11:
#217				(* END_IF *)
#218				JMP		$label9	{LNXT:67|69|84}
(-) BOOL
A1805496  E00D     		b #26 ; 0xA18054B4


#219		$label8:
#220		
#221			(* ELSE *)
#222		
#223				(* CMD.0 := False; *)
#224				MOVE		False,CMD.0	{LNXT:84|85|-1}
(*) BOOL
A180549A  2000     		mov r0, #0 ; 0
A180549C  F8DF 7054		ldr r7, [pc, #+84] ; 0xA0003F22
A18054A0  F8B7 8000		ldrh r8, [r7]
A18054A4  F360 0800		bfi r8, r0, #0, #1
A18054A8  F8A7 8000		strh r8, [r7]

#225		
#226				(* q_start_ats := False; *)
#227				MOVE		False,q_start_ats	{LNXT:85|99|-1}
(*) WORD
A18054AC  2000     		mov r0, #0 ; 0
A18054AE  F8DF 70E0		ldr r7, [pc, #+224] ; 0x100004B3
A18054B2  7038     		strb r0, [r7]

#228		
#229		$label9:
#230			(* END_IF *)
#231		
#232		
#233			(* IF CMD.1 *)
#234			LD		CMD.1	{LNXT:99|-1|-1}
(*) UNDEF
A18054B4  F8DF 703C		ldr r7, [pc, #+60] ; 0xA0003F22
A18054B8  8838     		ldrh r0, [r7]
A18054BA  F3C0 0040		ubfx r0, r0, #1, #1

#235			JMPCN	$label12	{LNXT:99|100|1}
(-) BOOL
A18054BE  2800     		cmp r0, #0
A18054C0  D00D     		beq #26 ; 0xA18054DE


#236		
#237			(* THEN *)
#238		
#239				(* Alarms := 0; *)
#240				MOVE		0,Alarms	{LNXT:100|101|-1}
(*) BOOL
A18054C4  2000     		mov r0, #0 ; 0
A18054C6  F8DF 7028		ldr r7, [pc, #+40] ; 0xA0003F20
A18054CA  8038     		strh r0, [r7]

#241		
#242				(* CMD.1 := False; *)
#243				MOVE		False,CMD.1	{LNXT:101|1|-1}
(*) WORD
A18054CC  2000     		mov r0, #0 ; 0
A18054CE  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003F22
A18054D2  F8B7 8000		ldrh r8, [r7]
A18054D6  F360 0841		bfi r8, r0, #1, #1
A18054DA  F8A7 8000		strh r8, [r7]

A18054DE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18054E2  F8DD E000		ldr lr, [sp]
A18054E6  B002     		add sp, sp, #8

A18054E8  4770     		bx lr

A18054EC  FFFFFFFF		; 0xA00017F4
A18054F0  FFFFFFFF		; 0xA0003F20
A18054F4  FFFFFFFF		; 0xA0003F22
A18054F8  FFFFFFFF		; 0xA0003F26
A18054FC  A1804440		; 0xA1804440
A1805500  A18044E0		; 0xA18044E0
A1805504  A1A00041		; 0xA1A00041
A1805508  A1A00042		; 0xA1A00042
A180550C  A1A00044		; 0xA1A00044
A1805510  A1A00046		; 0xA1A00046
A1805514  A1A00048		; 0xA1A00048
A1805518  A1A0005C		; 0xA1A0005C
A180551C  A1A0005D		; 0xA1A0005D
A1805520  A1A0005E		; 0xA1A0005E
A1805524  A1A0005F		; 0xA1A0005F
A1805528  A1A00060		; 0xA1A00060
A180552C  A1A00061		; 0xA1A00061
A1805530  A1A00062		; 0xA1A00062
A1805534  A1A00064		; 0xA1A00064
A1805538  A1A00068		; 0xA1A00068
A180553C  A1A0006C		; 0xA1A0006C
A1805540  A1A00070		; 0xA1A00070
A1805544  A1A00078		; 0xA1A00078
A1805548  A1A0007C		; 0xA1A0007C
A180554C  A1A00080		; 0xA1A00080
A1805550  A1A00084		; 0xA1A00084
A1805554  A1A0008C		; 0xA1A0008C
A1805558  A1A0008D		; 0xA1A0008D
A180555C  A1A0008E		; 0xA1A0008E
A1805560  A1A0008F		; 0xA1A0008F
A1805564  A1A00090		; 0xA1A00090
A1805568  A1A00094		; 0xA1A00094
A180556C  A1A00098		; 0xA1A00098
A1805570  A1A0009C		; 0xA1A0009C
A1805574  A1A000A4		; 0xA1A000A4
A1805578  A1A000A5		; 0xA1A000A5
A180557C  00004E20		; 0x00004E20
A1805580  FFFFFFFF		; 0x100004AC
A1805584  FFFFFFFF		; 0x100004AD
A1805588  FFFFFFFF		; 0x100004AE
A180558C  FFFFFFFF		; 0x100004AF
A1805590  FFFFFFFF		; 0x100004B3

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1805594  B082     		sub sp, sp, #8
A1805596  F8CD E000		str lr, [sp]
A180559A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A180559E  F8DF 70CC		ldr r7, [pc, #+204] ; 0x1000044E
A18055A2  8838     		ldrh r0, [r7]
A18055A4  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A00042
A18055A8  8038     		strh r0, [r7]

A18055AA  F8DF 70BC		ldr r7, [pc, #+188] ; 0x10000446
A18055AE  8838     		ldrh r0, [r7]
A18055B0  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A00044
A18055B4  8038     		strh r0, [r7]

A18055B6  F8DF 70B8		ldr r7, [pc, #+184] ; 0x10000450
A18055BA  8838     		ldrh r0, [r7]
A18055BC  F8DF 7070		ldr r7, [pc, #+112] ; 0xA1A00046
A18055C0  8038     		strh r0, [r7]

A18055C2  F8DF 709C		ldr r7, [pc, #+156] ; 0x10000427
A18055C6  7838     		ldrb r0, [r7]
A18055C8  F8DF 7058		ldr r7, [pc, #+88] ; 0xA1A00041
A18055CC  7038     		strb r0, [r7]

A18055CE  F8DF 707C		ldr r7, [pc, #+124] ; 0x10000422
A18055D2  7838     		ldrb r0, [r7]
A18055D4  F8DF 705C		ldr r7, [pc, #+92] ; 0xA1A0008C
A18055D8  7038     		strb r0, [r7]

A18055DA  F8DF 7074		ldr r7, [pc, #+116] ; 0x10000423
A18055DE  7838     		ldrb r0, [r7]
A18055E0  F8DF 7058		ldr r7, [pc, #+88] ; 0xA1A0008F
A18055E4  7038     		strb r0, [r7]

A18055E6  F8DF 706C		ldr r7, [pc, #+108] ; 0x10000424
A18055EA  7838     		ldrb r0, [r7]
A18055EC  F8DF 7048		ldr r7, [pc, #+72] ; 0xA1A0008E
A18055F0  7038     		strb r0, [r7]

A18055F2  F8DF 7064		ldr r7, [pc, #+100] ; 0x10000425
A18055F6  7838     		ldrb r0, [r7]
A18055F8  F8DF 7044		ldr r7, [pc, #+68] ; 0xA1A000A4
A18055FC  7038     		strb r0, [r7]

A18055FE  F8DF 705C		ldr r7, [pc, #+92] ; 0x10000426
A1805602  7838     		ldrb r0, [r7]
A1805604  F8DF 703C		ldr r7, [pc, #+60] ; 0xA1A000A5
A1805608  7038     		strb r0, [r7]

A180560A  F8DF 7058		ldr r7, [pc, #+88] ; 0x10000442
A180560E  8838     		ldrh r0, [r7]
A1805610  F8DF 7034		ldr r7, [pc, #+52] ; 0xA1A000AA
A1805614  8038     		strh r0, [r7]

A1805616  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A180561A  F8DD E000		ldr lr, [sp]
A180561E  B002     		add sp, sp, #8

A1805620  4770     		bx lr

A1805624  A1A00041		; 0xA1A00041
A1805628  A1A00042		; 0xA1A00042
A180562C  A1A00044		; 0xA1A00044
A1805630  A1A00046		; 0xA1A00046
A1805634  A1A0008C		; 0xA1A0008C
A1805638  A1A0008E		; 0xA1A0008E
A180563C  A1A0008F		; 0xA1A0008F
A1805640  A1A000A4		; 0xA1A000A4
A1805644  A1A000A5		; 0xA1A000A5
A1805648  A1A000AA		; 0xA1A000AA
A180564C  FFFFFFFF		; 0x10000422
A1805650  FFFFFFFF		; 0x10000423
A1805654  FFFFFFFF		; 0x10000424
A1805658  FFFFFFFF		; 0x10000425
A180565C  FFFFFFFF		; 0x10000426
A1805660  FFFFFFFF		; 0x10000427
A1805664  FFFFFFFF		; 0x10000442
A1805668  FFFFFFFF		; 0x10000446
A180566C  FFFFFFFF		; 0x1000044E
A1805670  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1805674  B082     		sub sp, sp, #8
A1805676  F8CD E000		str lr, [sp]
A180567A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A180567E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805682  F8DD E000		ldr lr, [sp]
A1805686  B002     		add sp, sp, #8

A1805688  4770     		bx lr



**************************************************
	Task Timed init code
**************************************************

A180568A  B082     		sub sp, sp, #8
A180568C  F8CD E000		str lr, [sp]
A1805690  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805694  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805698  F8DD E000		ldr lr, [sp]
A180569C  B002     		add sp, sp, #8

A180569E  4770     		bx lr



**************************************************
	Global init code
**************************************************

A18056B0  B082     		sub sp, sp, #8
A18056B2  F8CD E000		str lr, [sp]
A18056B6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18056BA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18056BE  F8DD E000		ldr lr, [sp]
A18056C2  B002     		add sp, sp, #8

A18056C4  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

A18056C6  B082     		sub sp, sp, #8
A18056C8  F8CD E000		str lr, [sp]
A18056CC  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18056D0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18056D4  F8DD E000		ldr lr, [sp]
A18056D8  B002     		add sp, sp, #8

A18056DA  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000A1800000h
End code area:            		00000000A1805B4Ch
Code size:                		00005B4Ch

Start local data area:    		00000000A1A00000h
End local data area:      		00000000A1A000C6h
Local data size:          		000000C6h

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                866CA0D6
DEBUG MEMO ID:                          A180B976
FULL MEMO ID:                           0000FF2D
********************************************
