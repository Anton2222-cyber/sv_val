***********************************************************************
*
*	CODE GENERATION LISTING FOR: sw37
*	COMPILER VERSION: 6.0.0.52
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
A1804440  FB90 F3F1		sdiv r3, r0, r1
A1804444  4359     		mul r1, r1, r3
A1804446  EBC1 0000		rsb r0, r1, r0
A180444A  4770     		bx lr

$$MOD_U:
A180444C  FBB0 F3F1		udiv r3, r0, r1
A1804450  4359     		mul r1, r1, r3
A1804452  EBC1 0000		rsb r0, r1, r0
A1804456  4770     		bx lr

**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"<HTML>The output Q will remain FALSE as long as the input variable CLK is FALSE.<br>
As soon as CLK returns TRUE, Q will first return TRUE.<br><br>
This means each time the function is called up, Q will return FALSE until CLK has falling edge followed by an rising edge.<br><br>
<img src= r_trig.png>" }

        VAR_INPUT
clk : BOOL;	{ DE:"Input for edge detection" }
	END_VAR

        VAR_OUTPUT
q : BOOL;	{ DE:"Raising edge output" }
	END_VAR

        VAR
m : BOOL := FALSE;
	END_VAR

END_FUNCTION_BLOCK

A1804458  E92D 4040		stmdb sp!, { r6, lr }
A180445C  462E     		mov r6, r5

#0		{SRC:R_TRIG}
#1		
#2			LD		clk
(*) UNDEF
A180445E  F8DF 7028		ldr r7, [pc, #+40] ; 0x1
A1804462  5DF0     		ldrb r0, [r6, +r7]

#3			ANDN	m
(*) BOOL
A1804464  7837     		ldrb r7, [r6]
A1804466  2F00     		cmp r7, #0
A1804468  BF08 2701		eqmov r7, #1
A180446C  BF18 2700		nemov r7, #0
A1804470  4038     		and r0, r0, r7

#4			ST		q
(*) BOOL
A1804472  F8DF 7018		ldr r7, [pc, #+24] ; 0x2
A1804476  55F0     		strb r0, [r6, +r7]

#5		
#6			LD		clk
(*) UNDEF
A1804478  F8DF 700C		ldr r7, [pc, #+12] ; 0x1
A180447C  5DF0     		ldrb r0, [r6, +r7]

#7			ST		m
(-) BOOL
A180447E  7030     		strb r0, [r6]

A1804480  E8BD 4040		ldmia sp!, { r6, lr }

A1804484  4770     		bx lr

A1804488  00000001		; 0x00000001
A180448C  00000002		; 0x00000002


Frame allocation (hex):

	0000 bit  0: VAR m
	0001 bit  0: VAR clk
	0002 bit  0: VAR q

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

A1804490  E92D 4040		stmdb sp!, { r6, lr }
A1804494  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
A1804496  F8DF 7084		ldr r7, [pc, #+132] ; 0x4
A180449A  5DF0     		ldrb r0, [r6, +r7]

#5			JMPCN	lReset
(-) BOOL
A180449C  2800     		cmp r0, #0
A180449E  D031     		beq #98 ; 0xA1804504


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
A18044A2  F8DF 7080		ldr r7, [pc, #+128] ; 0xC
A18044A6  5DF0     		ldrb r0, [r6, +r7]

#9			RETC
#10			
(-) BOOL
A18044A8  2800     		cmp r0, #0
A18044AA  D134     		bne #104 ; 0xA1804516


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
A18044AE  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
A18044B0  2800     		cmp r0, #0
A18044B2  BF18 2000		nemov r0, #0
A18044B6  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
A18044BA  2800     		cmp r0, #0
A18044BC  D004     		beq #8 ; 0xA18044C8


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
A18044C0  F8DF 7068		ldr r7, [pc, #+104] ; 0x1000052C
A18044C4  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
A18044C6  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
A18044C8  F8DF 7060		ldr r7, [pc, #+96] ; 0x1000052C
A18044CC  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
A18044CE  6837     		ldr r7, [r6]
A18044D0  1BC0     		sub r0, r0, r7

#25			ST		ET
(*) UDINT
A18044D2  F8DF 7054		ldr r7, [pc, #+84] ; 0x10
A18044D6  51F0     		str r0, [r6, +r7]

#26			GE		PT
(*) UDINT
A18044D8  F8DF 7044		ldr r7, [pc, #+68] ; 0x8
A18044DC  59F7     		ldr r7, [r6, +r7]
A18044DE  42B8     		cmp r0, r7
A18044E0  BF38 2000		lomov r0, #0
A18044E4  BF28 2001		hsmov r0, #1

#27			ST		Q
(*) BOOL
A18044E8  F8DF 7038		ldr r7, [pc, #+56] ; 0xC
A18044EC  55F0     		strb r0, [r6, +r7]

#28			RETCN
#29		
(-) BOOL
A18044EE  2800     		cmp r0, #0
A18044F0  D011     		beq #34 ; 0xA1804516


#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
A18044F4  F8DF 7028		ldr r7, [pc, #+40] ; 0x8
A18044F8  59F0     		ldr r0, [r6, +r7]

#32			ST		ET
(*) UDINT
A18044FA  F8DF 702C		ldr r7, [pc, #+44] ; 0x10
A18044FE  51F0     		str r0, [r6, +r7]

#33			RET
#34		
(-) UDINT
A1804500  E009     		b #18 ; 0xA1804516


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
A1804504  2000     		mov r0, #0 ; 0

#39			ST		ET
(*) USINT
A1804506  F8DF 7020		ldr r7, [pc, #+32] ; 0x10
A180450A  51F0     		str r0, [r6, +r7]

#40			ST		timStart
(-) UDINT
A180450C  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
A180450E  2000     		mov r0, #0 ; 0

#42			ST		Q
(*) BOOL
A1804510  F8DF 7010		ldr r7, [pc, #+16] ; 0xC
A1804514  55F0     		strb r0, [r6, +r7]

A1804516  E8BD 4040		ldmia sp!, { r6, lr }

A180451A  4770     		bx lr

A180451C  00000004		; 0x00000004
A1804520  00000008		; 0x00000008
A1804524  0000000C		; 0x0000000C
A1804528  00000010		; 0x00000010
A180452C  FFFFFFFF		; 0x1000052C


Frame allocation (hex):

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: CheckAlarmVal
**************************************************

FUNCTION_BLOCK CheckAlarmVal

        VAR_IN_OUT
di_val_open_state_fall_FB : INT^;
di_val_close_state_fall_FB : INT^;
di_val_open_state_R_FB : INT^;
di_val_close_state_R_FB : BOOL^;
Alarm_Val_FB : WORD^;
o_val_open_R_FB : BOOL^;
o_val_close_R_FB : BOOL^;
o_val_open_fall_FB : BOOL^;
o_val_close_fall_FB : BOOL^;
start_check : BOOL^;
	END_VAR

        VAR_OUTPUT
is_check_done : BOOL;
isOK : BOOL;
	END_VAR

        VAR
check_timer : TON;	{ DE:"локальний FB таймера" }
should_run_timer : BOOL;
	END_VAR

END_FUNCTION_BLOCK

A1804530  E92D 4040		stmdb sp!, { r6, lr }
A1804534  462E     		mov r6, r5

#0		{SRC:CheckAlarmVal}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF check_timer.IN *)
#5			LD		check_timer.IN	{LNXT:3|-1|-1}
(*) UNDEF
A1804536  F8DF 71D0		ldr r7, [pc, #+464] ; 0x4
A180453A  5DF0     		ldrb r0, [r6, +r7]

#6			JMPCN	$label0	{LNXT:3|4|8}
(-) BOOL
A180453C  2800     		cmp r0, #0
A180453E  D008     		beq #16 ; 0xA1804552


#7		
#8			(* THEN *)
#9		
#10				(* isOK := TRUE; *)
#11				MOVE		TRUE,isOK	{LNXT:4|5|-1}
(*) BOOL
A1804542  2001     		mov r0, #1 ; 1
A1804544  F8DF 71D0		ldr r7, [pc, #+464] ; 0x16
A1804548  55F0     		strb r0, [r6, +r7]

#12		
#13				(* is_check_done := false; *)
#14				MOVE		false,is_check_done	{LNXT:5|8|-1}
(*) BOOL
A180454A  2000     		mov r0, #0 ; 0
A180454C  F8DF 71C4		ldr r7, [pc, #+452] ; 0x15
A1804550  55F0     		strb r0, [r6, +r7]

#15		
#16		$label0:
#17			(* END_IF *)
#18		
#19		
#20			(* IF start_check *)
#21			LD		start_check	{LNXT:8|-1|-1}
(*) UNDEF
A1804552  F8DF 71EC		ldr r7, [pc, #+492] ; 0x3C
A1804556  F856 C007		ldr r12, [r6, +r7]
A180455A  F89C 0000		ldrb r0, [r12]

#22			JMPCN	$label1	{LNXT:8|9|13}
(-) BOOL
A180455E  2800     		cmp r0, #0
A1804560  D014     		beq #40 ; 0xA180458C


#23		
#24			(* THEN *)
#25		
#26				(* check_timer *)
#27				MOVE		true,check_timer.IN	{LNXT:9|-1|-1}
(*) BOOL
A1804564  2001     		mov r0, #1 ; 1
A1804566  F8DF 71A0		ldr r7, [pc, #+416] ; 0x4
A180456A  55F0     		strb r0, [r6, +r7]

#28				MOVE		10000,check_timer.PT	{LNXT:9|-1|-1}
(*) BOOL
A180456C  F8DF 71D4		ldr r7, [pc, #+468] ; 0x2710
A1804570  4638     		mov r0, r7
A1804572  F8DF 7198		ldr r7, [pc, #+408] ; 0x8
A1804576  51F0     		str r0, [r6, +r7]

#29				CAL		check_timer	{LNXT:9|13|-1}
(*) UDINT
A1804578  E92D 0021		stmdb sp!, { r0, r5 }
A180457C  4635     		mov r5, r6
A180457E  467C     		mov r4, pc
A1804580  3CF2     		sub  r4, r4, #+0xF2 ; 0xA1804490
A1804582  F044 0401		orr r4, r4, #1
A1804586  47A0     		blx r4
A1804588  E8BD 0021		ldmia sp!, { r0, r5 }

#30		
#31		$label1:
#32			(* END_IF *)
#33		
#34		
#35			(* IF check_timer.Q *)
#36			LD		check_timer.Q	{LNXT:13|-1|-1}
(*) UNDEF
A180458C  F8DF 7180		ldr r7, [pc, #+384] ; 0xC
A1804590  5DF0     		ldrb r0, [r6, +r7]

#37			JMPCN	$label2	{LNXT:13|15|44}
(-) BOOL
A1804592  2800     		cmp r0, #0
A1804594  F000 80A8		beq #336 ; 0xA18046E8


#38		
#39			(* THEN *)
#40		
#41				(* check_timer *)
#42				MOVE		false,check_timer.IN	{LNXT:15|-1|-1}
(*) BOOL
A1804598  2000     		mov r0, #0 ; 0
A180459A  F8DF 716C		ldr r7, [pc, #+364] ; 0x4
A180459E  55F0     		strb r0, [r6, +r7]

#43				CAL		check_timer	{LNXT:15|17|-1}
(*) BOOL
A18045A0  E92D 0021		stmdb sp!, { r0, r5 }
A18045A4  4635     		mov r5, r6
A18045A6  F8DF 415C		ldr r4, [pc, #+348] ; 0xA1804490
A18045AA  F044 0401		orr r4, r4, #1
A18045AE  47A0     		blx r4
A18045B0  E8BD 0021		ldmia sp!, { r0, r5 }

#44		
#45		
#46				(* IF o_val_open_R_FB^ AND NOT di_val_open_state_R_FB^ *)
#47				LD		di_val_open_state_R_FB^	{LNXT:17|-1|-1}
(*) UNDEF
A18045B4  F8DF 716C		ldr r7, [pc, #+364] ; 0x20
A18045B8  F856 C007		ldr r12, [r6, +r7]
A18045BC  F9BC 0000		ldrsh r0, [r12]

#48				NOT	{LNXT:17|-1|-1}
(-) INT
A18045C0  43C0     		mvn r0, r0

#49				AND		o_val_open_R_FB^	{LNXT:17|-1|-1}
(*) INT
A18045C2  F8DF 716C		ldr r7, [pc, #+364] ; 0x2C
A18045C6  F856 C007		ldr r12, [r6, +r7]
A18045CA  F8DF 7164		ldr r7, [pc, #+356] ; 0x2C
A18045CE  F856 C007		ldr r12, [r6, +r7]
A18045D2  F89C 7000		ldrb r7, [r12]
A18045D6  4038     		and r0, r0, r7

#50				JMPCN	$label3	{LNXT:17|18|21}
(-) INT
A18045D8  2800     		cmp r0, #0
A18045DA  D00B     		beq #22 ; 0xA18045F4


#51		
#52				(* THEN *)
#53		
#54					(* Alarm_Val_FB^.0 := TRUE; *)
#55					MOVE		TRUE,Alarm_Val_FB^.0	{LNXT:18|21|-1}
(*) INT
A18045DE  2001     		mov r0, #1 ; 1
A18045E0  F8DF 7148		ldr r7, [pc, #+328] ; 0x28
A18045E4  F856 C007		ldr r12, [r6, +r7]
A18045E8  F8BC 8000		ldrh r8, [r12]
A18045EC  F360 0800		bfi r8, r0, #0, #1
A18045F0  F8AC 8000		strh r8, [r12]

#56		
#57		$label3:
#58				(* END_IF *)
#59		
#60		
#61				(* IF o_val_close_R_FB^ AND NOT di_val_close_state_R_FB^ *)
#62				LD		di_val_close_state_R_FB^	{LNXT:21|-1|-1}
(*) UNDEF
A18045F4  F8DF 7130		ldr r7, [pc, #+304] ; 0x24
A18045F8  F856 C007		ldr r12, [r6, +r7]
A18045FC  F89C 0000		ldrb r0, [r12]

#63				NOT	{LNXT:21|-1|-1}
(*) BOOL
A1804600  2800     		cmp r0, #0
A1804602  BF08 2001		eqmov r0, #1
A1804606  BF18 2000		nemov r0, #0

#64				AND		o_val_close_R_FB^	{LNXT:21|-1|-1}
(*) BOOL
A180460A  F8DF 7128		ldr r7, [pc, #+296] ; 0x30
A180460E  F856 C007		ldr r12, [r6, +r7]
A1804612  F8DF 7120		ldr r7, [pc, #+288] ; 0x30
A1804616  F856 C007		ldr r12, [r6, +r7]
A180461A  F89C 7000		ldrb r7, [r12]
A180461E  4038     		and r0, r0, r7

#65				JMPCN	$label4	{LNXT:21|22|25}
(-) BOOL
A1804620  2800     		cmp r0, #0
A1804622  D00B     		beq #22 ; 0xA180463C


#66		
#67				(* THEN *)
#68		
#69					(* Alarm_Val_FB^.1 := TRUE; *)
#70					MOVE		TRUE,Alarm_Val_FB^.1	{LNXT:22|25|-1}
(*) BOOL
A1804626  2001     		mov r0, #1 ; 1
A1804628  F8DF 7100		ldr r7, [pc, #+256] ; 0x28
A180462C  F856 C007		ldr r12, [r6, +r7]
A1804630  F8BC 8000		ldrh r8, [r12]
A1804634  F360 0841		bfi r8, r0, #1, #1
A1804638  F8AC 8000		strh r8, [r12]

#71		
#72		$label4:
#73				(* END_IF *)
#74		
#75		
#76				(* IF o_val_open_fall_FB^ AND NOT di_val_open_state_fall_FB^ *)
#77				LD		di_val_open_state_fall_FB^	{LNXT:25|-1|-1}
(*) UNDEF
A180463C  F8DF 70DC		ldr r7, [pc, #+220] ; 0x18
A1804640  F856 C007		ldr r12, [r6, +r7]
A1804644  F9BC 0000		ldrsh r0, [r12]

#78				NOT	{LNXT:25|-1|-1}
(-) INT
A1804648  43C0     		mvn r0, r0

#79				AND		o_val_open_fall_FB^	{LNXT:25|-1|-1}
(*) INT
A180464A  F8DF 70EC		ldr r7, [pc, #+236] ; 0x34
A180464E  F856 C007		ldr r12, [r6, +r7]
A1804652  F8DF 70E4		ldr r7, [pc, #+228] ; 0x34
A1804656  F856 C007		ldr r12, [r6, +r7]
A180465A  F89C 7000		ldrb r7, [r12]
A180465E  4038     		and r0, r0, r7

#80				JMPCN	$label5	{LNXT:25|26|29}
(-) INT
A1804660  2800     		cmp r0, #0
A1804662  D00B     		beq #22 ; 0xA180467C


#81		
#82				(* THEN *)
#83		
#84					(* Alarm_Val_FB^.2 := TRUE; *)
#85					MOVE		TRUE,Alarm_Val_FB^.2	{LNXT:26|29|-1}
(*) INT
A1804666  2001     		mov r0, #1 ; 1
A1804668  F8DF 70C0		ldr r7, [pc, #+192] ; 0x28
A180466C  F856 C007		ldr r12, [r6, +r7]
A1804670  F8BC 8000		ldrh r8, [r12]
A1804674  F360 0882		bfi r8, r0, #2, #1
A1804678  F8AC 8000		strh r8, [r12]

#86		
#87		$label5:
#88				(* END_IF *)
#89		
#90		
#91				(* IF o_val_close_fall_FB^ AND NOT di_val_close_state_fall_FB^ *)
#92				LD		di_val_close_state_fall_FB^	{LNXT:29|-1|-1}
(*) UNDEF
A180467C  F8DF 70A0		ldr r7, [pc, #+160] ; 0x1C
A1804680  F856 C007		ldr r12, [r6, +r7]
A1804684  F9BC 0000		ldrsh r0, [r12]

#93				NOT	{LNXT:29|-1|-1}
(-) INT
A1804688  43C0     		mvn r0, r0

#94				AND		o_val_close_fall_FB^	{LNXT:29|-1|-1}
(*) INT
A180468A  F8DF 70B0		ldr r7, [pc, #+176] ; 0x38
A180468E  F856 C007		ldr r12, [r6, +r7]
A1804692  F8DF 70A8		ldr r7, [pc, #+168] ; 0x38
A1804696  F856 C007		ldr r12, [r6, +r7]
A180469A  F89C 7000		ldrb r7, [r12]
A180469E  4038     		and r0, r0, r7

#95				JMPCN	$label6	{LNXT:29|30|34}
(-) INT
A18046A0  2800     		cmp r0, #0
A18046A2  D00B     		beq #22 ; 0xA18046BC


#96		
#97				(* THEN *)
#98		
#99					(* Alarm_Val_FB^.3 := TRUE; *)
#100					MOVE		TRUE,Alarm_Val_FB^.3	{LNXT:30|34|-1}
(*) INT
A18046A6  2001     		mov r0, #1 ; 1
A18046A8  F8DF 7080		ldr r7, [pc, #+128] ; 0x28
A18046AC  F856 C007		ldr r12, [r6, +r7]
A18046B0  F8BC 8000		ldrh r8, [r12]
A18046B4  F360 08C3		bfi r8, r0, #3, #1
A18046B8  F8AC 8000		strh r8, [r12]

#101		
#102		$label6:
#103				(* END_IF *)
#104		
#105		
#106				(* IF Alarm_Val_FB^ > 0 *)
#107				LD		Alarm_Val_FB^	{LNXT:34|-1|-1}
(*) UNDEF
A18046BC  F8DF 706C		ldr r7, [pc, #+108] ; 0x28
A18046C0  F856 C007		ldr r12, [r6, +r7]
A18046C4  F8BC 0000		ldrh r0, [r12]

#108				GT		0	{LNXT:34|-1|-1}
(*) WORD
A18046C8  2800     		cmp r0, #0
A18046CA  BFD8 2000		lemov r0, #0
A18046CE  BFC8 2001		gtmov r0, #1

#109				JMPCN	$label7	{LNXT:34|35|38}
(-) BOOL
A18046D2  2800     		cmp r0, #0
A18046D4  D004     		beq #8 ; 0xA18046E0


#110		
#111				(* THEN *)
#112		
#113					(* isOK := FALSE; *)
#114					MOVE		FALSE,isOK	{LNXT:35|38|-1}
(*) BOOL
A18046D8  2000     		mov r0, #0 ; 0
A18046DA  F8DF 703C		ldr r7, [pc, #+60] ; 0x16
A18046DE  55F0     		strb r0, [r6, +r7]

#115		
#116		$label7:
#117				(* END_IF *)
#118		
#119				(* is_check_done := TRUE; *)
#120				MOVE		TRUE,is_check_done	{LNXT:38|44|-1}
(*) BOOL
A18046E0  2001     		mov r0, #1 ; 1
A18046E2  F8DF 7030		ldr r7, [pc, #+48] ; 0x15
A18046E6  55F0     		strb r0, [r6, +r7]

#121		
#122		$label2:
#123			(* END_IF *)
#124		
#125			(* check_timer *)
#126			CAL		check_timer	{LNXT:44|-1|-1}
(*) BOOL
A18046E8  E92D 0021		stmdb sp!, { r0, r5 }
A18046EC  4635     		mov r5, r6
A18046EE  F8DF 4014		ldr r4, [pc, #+20] ; 0xA1804490
A18046F2  F044 0401		orr r4, r4, #1
A18046F6  47A0     		blx r4
A18046F8  E8BD 0021		ldmia sp!, { r0, r5 }

A18046FC  E8BD 4040		ldmia sp!, { r6, lr }

A1804700  4770     		bx lr

A1804704  A1804490		; 0xA1804490
A1804708  00000004		; 0x00000004
A180470C  00000008		; 0x00000008
A1804710  0000000C		; 0x0000000C
A1804714  00000015		; 0x00000015
A1804718  00000016		; 0x00000016
A180471C  00000018		; 0x00000018
A1804720  0000001C		; 0x0000001C
A1804724  00000020		; 0x00000020
A1804728  00000024		; 0x00000024
A180472C  00000028		; 0x00000028
A1804730  0000002C		; 0x0000002C
A1804734  00000030		; 0x00000030
A1804738  00000034		; 0x00000034
A180473C  00000038		; 0x00000038
A1804740  0000003C		; 0x0000003C
A1804744  00002710		; 0x00002710


Frame allocation (hex):

	0000       : FB check_timer
	0014 bit  0: VAR should_run_timer
	0015 bit  0: VAR is_check_done
	0016 bit  0: VAR isOK
	0018       : VAR di_val_open_state_fall_FB
	001C       : VAR di_val_close_state_fall_FB
	0020       : VAR di_val_open_state_R_FB
	0024       : VAR di_val_close_state_R_FB
	0028       : VAR Alarm_Val_FB
	002C       : VAR o_val_open_R_FB
	0030       : VAR o_val_close_R_FB
	0034       : VAR o_val_open_fall_FB
	0038       : VAR o_val_close_fall_FB
	003C       : VAR start_check

END_FUNCTION_BLOCK
**************************************************
	List function block: CheckWashAndStart
**************************************************

FUNCTION_BLOCK CheckWashAndStart

        VAR_IN_OUT
sv_washing_FB : BOOL^;
o_val_open_R_FB : BOOL^;
o_val_close_R_FB : BOOL^;
o_val_open_fall_FB : BOOL^;
o_val_close_fall_FB : BOOL^;
q_start_ats_FB : BOOL^;
ep_time_wash_FB : INT^;
i_val_state_FB : INT^;
di_val_open_state_fall_FB : INT^;
di_val_close_state_fall_FB : INT^;
di_val_open_state_R_FB : INT^;
di_val_close_state_R_FB : BOOL^;
Alarm_Val_FB : WORD^;
	END_VAR

        VAR_OUTPUT
is_running_wash : BOOL;
	END_VAR

        VAR
washing_timer : TON;	{ DE:"локальний FB таймера" }
onWash : BOOL;
checkAlarmVal : CheckAlarmVal;
valve_rising : BOOL;
prev_val_open_fall : BOOL;
prev_val_close_fall : BOOL;
prev_val_open_R : BOOL;
prev_val_close_R : BOOL;
	END_VAR

END_FUNCTION_BLOCK

A1804748  E92D 4040		stmdb sp!, { r6, lr }
A180474C  462E     		mov r6, r5

#0		{SRC:CheckWashAndStart}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF sv_washing_FB^ and i_val_state_FB^=1 *)
#5			LD		i_val_state_FB^	{LNXT:1|-1|-1}
(*) UNDEF
A180474E  F8DF 73D0		ldr r7, [pc, #+976] ; 0x7C
A1804752  F856 C007		ldr r12, [r6, +r7]
A1804756  F9BC 0000		ldrsh r0, [r12]

#6			EQ		1	{LNXT:1|-1|-1}
(*) INT
A180475A  2801     		cmp r0, #1
A180475C  BF18 2000		nemov r0, #0
A1804760  BF08 2001		eqmov r0, #1

#7			AND		sv_washing_FB^	{LNXT:1|-1|-1}
(*) BOOL
A1804764  F8DF 739C		ldr r7, [pc, #+924] ; 0x60
A1804768  F856 C007		ldr r12, [r6, +r7]
A180476C  F8DF 7394		ldr r7, [pc, #+916] ; 0x60
A1804770  F856 C007		ldr r12, [r6, +r7]
A1804774  F89C 7000		ldrb r7, [r12]
A1804778  4038     		and r0, r0, r7

#8			JMPCN	$label0	{LNXT:1|2|4}
(-) BOOL
A180477A  2800     		cmp r0, #0
A180477C  D006     		beq #12 ; 0xA180478C


#9		
#10			(* THEN *)
#11		
#12				(* onWash :=true; *)
#13				MOVE		true,onWash	{LNXT:2|7|-1}
(*) BOOL
A1804780  2001     		mov r0, #1 ; 1
A1804782  F8DF 7330		ldr r7, [pc, #+816] ; 0x14
A1804786  55F0     		strb r0, [r6, +r7]

#14				JMP		$label1	{LNXT:1|2|4}
(-) BOOL
A1804788  E004     		b #8 ; 0xA1804794


#15		$label0:
#16		
#17			(* ELSE *)
#18		
#19				(* onWash :=false; *)
#20				MOVE		false,onWash	{LNXT:4|7|-1}
(*) BOOL
A180478C  2000     		mov r0, #0 ; 0
A180478E  F8DF 7324		ldr r7, [pc, #+804] ; 0x14
A1804792  55F0     		strb r0, [r6, +r7]

#21		
#22		$label1:
#23			(* END_IF *)
#24		
#25		
#26			(* IF onWash *)
#27			LD		onWash	{LNXT:7|-1|-1}
(*) UNDEF
A1804794  F8DF 731C		ldr r7, [pc, #+796] ; 0x14
A1804798  5DF0     		ldrb r0, [r6, +r7]

#28			JMPCN	$label2	{LNXT:7|10|50}
(-) BOOL
A180479A  2800     		cmp r0, #0
A180479C  F000 8121		beq #578 ; 0xA18049E2


#29		
#30			(* THEN *)
#31		
#32				(* is_running_wash :=true; *)
#33				MOVE		true,is_running_wash	{LNXT:10|11|-1}
(*) BOOL
A18047A0  2001     		mov r0, #1 ; 1
A18047A2  F8DF 735C		ldr r7, [pc, #+860] ; 0x5D
A18047A6  55F0     		strb r0, [r6, +r7]

#34		
#35				(* o_val_close_R_FB^:=true; *)
#36				MOVE		true,o_val_close_R_FB^	{LNXT:11|12|-1}
(*) BOOL
A18047A8  2001     		mov r0, #1 ; 1
A18047AA  F8DF 7360		ldr r7, [pc, #+864] ; 0x68
A18047AE  F856 C007		ldr r12, [r6, +r7]
A18047B2  F88C 0000		strb r0, [r12]

#37		
#38				(* o_val_open_R_FB^:=false; *)
#39				MOVE		false,o_val_open_R_FB^	{LNXT:12|14|-1}
(*) BOOL
A18047B6  2000     		mov r0, #0 ; 0
A18047B8  F8DF 734C		ldr r7, [pc, #+844] ; 0x64
A18047BC  F856 C007		ldr r12, [r6, +r7]
A18047C0  F88C 0000		strb r0, [r12]

#40		
#41				(* o_val_open_fall_FB^:=true; *)
#42				MOVE		true,o_val_open_fall_FB^	{LNXT:14|15|-1}
(*) BOOL
A18047C4  2001     		mov r0, #1 ; 1
A18047C6  F8DF 7348		ldr r7, [pc, #+840] ; 0x6C
A18047CA  F856 C007		ldr r12, [r6, +r7]
A18047CE  F88C 0000		strb r0, [r12]

#43		
#44				(* o_val_close_fall_FB^:=false; *)
#45				MOVE		false,o_val_close_fall_FB^	{LNXT:15|17|-1}
(*) BOOL
A18047D2  2000     		mov r0, #0 ; 0
A18047D4  F8DF 733C		ldr r7, [pc, #+828] ; 0x70
A18047D8  F856 C007		ldr r12, [r6, +r7]
A18047DC  F88C 0000		strb r0, [r12]

#46		
#47				(* valve_rising :=
#48		    (o_val_open_fall_FB^ AND NOT prev_val_open_fall) OR
#49			(o_val_close_fall_FB^ AND NOT prev_val_close_fall) OR
#50			(o_val_open_R_FB^ AND NOT prev_val_open_R) OR
#51			(o_val_close_R_FB^ AND NOT prev_val_close_R); *)
#52				LD		prev_val_close_R	{LNXT:17|23|-1}
(*) UNDEF
A18047E0  F8DF 7318		ldr r7, [pc, #+792] ; 0x5C
A18047E4  5DF0     		ldrb r0, [r6, +r7]

#53				NOT	{LNXT:17|23|-1}
(*) BOOL
A18047E6  2800     		cmp r0, #0
A18047E8  BF08 2001		eqmov r0, #1
A18047EC  BF18 2000		nemov r0, #0

#54				AND		o_val_close_R_FB^	{LNXT:17|23|-1}
(*) BOOL
A18047F0  F8DF 7318		ldr r7, [pc, #+792] ; 0x68
A18047F4  F856 C007		ldr r12, [r6, +r7]
A18047F8  F8DF 7310		ldr r7, [pc, #+784] ; 0x68
A18047FC  F856 C007		ldr r12, [r6, +r7]
A1804800  F89C 7000		ldrb r7, [r12]
A1804804  4038     		and r0, r0, r7

#55				OR(		prev_val_open_R	{LNXT:17|23|-1}
(*) BOOL
A1804806  B082     		sub sp, sp, #8
A1804808  F8CD 0000		str r0, [sp]
A180480C  F8DF 72E8		ldr r7, [pc, #+744] ; 0x5B
A1804810  5DF0     		ldrb r0, [r6, +r7]

#56				NOT	{LNXT:17|23|-1}
(*) BOOL
A1804812  2800     		cmp r0, #0
A1804814  BF08 2001		eqmov r0, #1
A1804818  BF18 2000		nemov r0, #0

#57				AND		o_val_open_R_FB^	{LNXT:17|23|-1}
(*) BOOL
A180481C  F8DF 72E8		ldr r7, [pc, #+744] ; 0x64
A1804820  F856 C007		ldr r12, [r6, +r7]
A1804824  F8DF 72E0		ldr r7, [pc, #+736] ; 0x64
A1804828  F856 C007		ldr r12, [r6, +r7]
A180482C  F89C 7000		ldrb r7, [r12]
A1804830  4038     		and r0, r0, r7

#58				OR(		prev_val_close_fall	{LNXT:17|23|-1}
(*) BOOL
A1804832  B082     		sub sp, sp, #8
A1804834  F8CD 0000		str r0, [sp]
A1804838  F8DF 72B8		ldr r7, [pc, #+696] ; 0x5A
A180483C  5DF0     		ldrb r0, [r6, +r7]

#59				NOT	{LNXT:17|23|-1}
(*) BOOL
A180483E  2800     		cmp r0, #0
A1804840  BF08 2001		eqmov r0, #1
A1804844  BF18 2000		nemov r0, #0

#60				AND		o_val_close_fall_FB^	{LNXT:17|23|-1}
(*) BOOL
A1804848  F8DF 72C8		ldr r7, [pc, #+712] ; 0x70
A180484C  F856 C007		ldr r12, [r6, +r7]
A1804850  F8DF 72C0		ldr r7, [pc, #+704] ; 0x70
A1804854  F856 C007		ldr r12, [r6, +r7]
A1804858  F89C 7000		ldrb r7, [r12]
A180485C  4038     		and r0, r0, r7

#61				OR(		prev_val_open_fall	{LNXT:17|23|-1}
(*) BOOL
A180485E  B082     		sub sp, sp, #8
A1804860  F8CD 0000		str r0, [sp]
A1804864  F8DF 7288		ldr r7, [pc, #+648] ; 0x59
A1804868  5DF0     		ldrb r0, [r6, +r7]

#62				NOT	{LNXT:17|23|-1}
(*) BOOL
A180486A  2800     		cmp r0, #0
A180486C  BF08 2001		eqmov r0, #1
A1804870  BF18 2000		nemov r0, #0

#63				AND		o_val_open_fall_FB^	{LNXT:17|23|-1}
(*) BOOL
A1804874  F8DF 7298		ldr r7, [pc, #+664] ; 0x6C
A1804878  F856 C007		ldr r12, [r6, +r7]
A180487C  F8DF 7290		ldr r7, [pc, #+656] ; 0x6C
A1804880  F856 C007		ldr r12, [r6, +r7]
A1804884  F89C 7000		ldrb r7, [r12]
A1804888  4038     		and r0, r0, r7

#64				)	{LNXT:17|23|-1}
(*) BOOL
A180488A  4607     		mov r7, r0
A180488C  F8DD 0000		ldr r0, [sp]
A1804890  B002     		add sp, sp, #8
A1804892  4338     		orr r0, r0, r7

#65				)	{LNXT:17|23|-1}
(*) BOOL
A1804894  4607     		mov r7, r0
A1804896  F8DD 0000		ldr r0, [sp]
A180489A  B002     		add sp, sp, #8
A180489C  4338     		orr r0, r0, r7

#66				)	{LNXT:17|23|-1}
(*) BOOL
A180489E  4607     		mov r7, r0
A18048A0  F8DD 0000		ldr r0, [sp]
A18048A4  B002     		add sp, sp, #8
A18048A6  4338     		orr r0, r0, r7

#67				ST		valve_rising	{LNXT:17|23|-1}
(*) BOOL
A18048A8  F8DF 7240		ldr r7, [pc, #+576] ; 0x58
A18048AC  55F0     		strb r0, [r6, +r7]

#68		
#69				(* prev_val_open_fall:=o_val_open_fall_FB^; *)
#70				MOVE		o_val_open_fall_FB^,prev_val_open_fall	{LNXT:23|24|-1}
(*) BOOL
A18048AE  F8DF 7260		ldr r7, [pc, #+608] ; 0x6C
A18048B2  F856 C007		ldr r12, [r6, +r7]
A18048B6  F89C 0000		ldrb r0, [r12]
A18048BA  F8DF 7234		ldr r7, [pc, #+564] ; 0x59
A18048BE  55F0     		strb r0, [r6, +r7]

#71		
#72				(* prev_val_close_fall:=o_val_close_fall_FB^; *)
#73				MOVE		o_val_close_fall_FB^,prev_val_close_fall	{LNXT:24|25|-1}
(*) BOOL
A18048C0  F8DF 7250		ldr r7, [pc, #+592] ; 0x70
A18048C4  F856 C007		ldr r12, [r6, +r7]
A18048C8  F89C 0000		ldrb r0, [r12]
A18048CC  F8DF 7224		ldr r7, [pc, #+548] ; 0x5A
A18048D0  55F0     		strb r0, [r6, +r7]

#74		
#75				(* prev_val_open_R:=o_val_open_R_FB^; *)
#76				MOVE		o_val_open_R_FB^,prev_val_open_R	{LNXT:25|26|-1}
(*) BOOL
A18048D2  F8DF 7234		ldr r7, [pc, #+564] ; 0x64
A18048D6  F856 C007		ldr r12, [r6, +r7]
A18048DA  F89C 0000		ldrb r0, [r12]
A18048DE  F8DF 7218		ldr r7, [pc, #+536] ; 0x5B
A18048E2  55F0     		strb r0, [r6, +r7]

#77		
#78				(* prev_val_close_R:=o_val_close_R_FB^; *)
#79				MOVE		o_val_close_R_FB^,prev_val_close_R	{LNXT:26|28|-1}
(*) BOOL
A18048E4  F8DF 7224		ldr r7, [pc, #+548] ; 0x68
A18048E8  F856 C007		ldr r12, [r6, +r7]
A18048EC  F89C 0000		ldrb r0, [r12]
A18048F0  F8DF 7208		ldr r7, [pc, #+520] ; 0x5C
A18048F4  55F0     		strb r0, [r6, +r7]

#80		
#81				(* checkAlarmVal *)
#82				MOVE		di_val_open_state_fall_FB,checkAlarmVal.di_val_open_state_fall_FB	{LNXT:28|-1|-1}
(*) BOOL
A18048F6  F8DF 722C		ldr r7, [pc, #+556] ; 0x80
A18048FA  F856 C007		ldr r12, [r6, +r7]
A18048FE  4660     		mov r0, r12
A1804900  F8DF 71C0		ldr r7, [pc, #+448] ; 0x30
A1804904  51F0     		str r0, [r6, +r7]

#83				MOVE		di_val_close_state_fall_FB,checkAlarmVal.di_val_close_state_fall_FB	{LNXT:28|-1|-1}
(*) INT^
A1804906  F8DF 7220		ldr r7, [pc, #+544] ; 0x84
A180490A  F856 C007		ldr r12, [r6, +r7]
A180490E  4660     		mov r0, r12
A1804910  F8DF 71B4		ldr r7, [pc, #+436] ; 0x34
A1804914  51F0     		str r0, [r6, +r7]

#84				MOVE		di_val_open_state_R_FB,checkAlarmVal.di_val_open_state_R_FB	{LNXT:29|-1|-1}
(*) INT^
A1804916  F8DF 7214		ldr r7, [pc, #+532] ; 0x88
A180491A  F856 C007		ldr r12, [r6, +r7]
A180491E  4660     		mov r0, r12
A1804920  F8DF 71A8		ldr r7, [pc, #+424] ; 0x38
A1804924  51F0     		str r0, [r6, +r7]

#85				MOVE		di_val_close_state_R_FB,checkAlarmVal.di_val_close_state_R_FB	{LNXT:30|-1|-1}
(*) INT^
A1804926  F8DF 7208		ldr r7, [pc, #+520] ; 0x8C
A180492A  F856 C007		ldr r12, [r6, +r7]
A180492E  4660     		mov r0, r12
A1804930  F8DF 719C		ldr r7, [pc, #+412] ; 0x3C
A1804934  51F0     		str r0, [r6, +r7]

#86				MOVE		Alarm_Val_FB,checkAlarmVal.Alarm_Val_FB	{LNXT:31|-1|-1}
(*) BOOL^
A1804936  F8DF 71FC		ldr r7, [pc, #+508] ; 0x90
A180493A  F856 C007		ldr r12, [r6, +r7]
A180493E  4660     		mov r0, r12
A1804940  F8DF 7190		ldr r7, [pc, #+400] ; 0x40
A1804944  51F0     		str r0, [r6, +r7]

#87				MOVE		o_val_open_R_FB,checkAlarmVal.o_val_open_R_FB	{LNXT:32|-1|-1}
(*) WORD^
A1804946  F8DF 71C0		ldr r7, [pc, #+448] ; 0x64
A180494A  F856 C007		ldr r12, [r6, +r7]
A180494E  4660     		mov r0, r12
A1804950  F8DF 7184		ldr r7, [pc, #+388] ; 0x44
A1804954  51F0     		str r0, [r6, +r7]

#88				MOVE		o_val_close_R_FB,checkAlarmVal.o_val_close_R_FB	{LNXT:33|-1|-1}
(*) BOOL^
A1804956  F8DF 71B4		ldr r7, [pc, #+436] ; 0x68
A180495A  F856 C007		ldr r12, [r6, +r7]
A180495E  4660     		mov r0, r12
A1804960  F8DF 7178		ldr r7, [pc, #+376] ; 0x48
A1804964  51F0     		str r0, [r6, +r7]

#89				MOVE		o_val_open_fall_FB,checkAlarmVal.o_val_open_fall_FB	{LNXT:34|-1|-1}
(*) BOOL^
A1804966  F8DF 71A8		ldr r7, [pc, #+424] ; 0x6C
A180496A  F856 C007		ldr r12, [r6, +r7]
A180496E  4660     		mov r0, r12
A1804970  F8DF 716C		ldr r7, [pc, #+364] ; 0x4C
A1804974  51F0     		str r0, [r6, +r7]

#90				MOVE		o_val_close_fall_FB,checkAlarmVal.o_val_close_fall_FB	{LNXT:35|-1|-1}
(*) BOOL^
A1804976  F8DF 719C		ldr r7, [pc, #+412] ; 0x70
A180497A  F856 C007		ldr r12, [r6, +r7]
A180497E  4660     		mov r0, r12
A1804980  F8DF 7160		ldr r7, [pc, #+352] ; 0x50
A1804984  51F0     		str r0, [r6, +r7]

#91				MOVE		valve_rising,checkAlarmVal.start_check	{LNXT:36|-1|-1}
(*) BOOL^
A1804986  F8DF 7164		ldr r7, [pc, #+356] ; 0x58
A180498A  19F0     		add r0, r6, r7
A180498C  F8DF 7158		ldr r7, [pc, #+344] ; 0x54
A1804990  51F0     		str r0, [r6, +r7]

#92				CAL		checkAlarmVal	{LNXT:28|41|-1}
(*) BOOL^
A1804992  E92D 0021		stmdb sp!, { r0, r5 }
A1804996  F8DF 7120		ldr r7, [pc, #+288] ; 0x18
A180499A  19F5     		add r5, r6, r7
A180499C  F8DF 4104		ldr r4, [pc, #+260] ; 0xA1804530
A18049A0  F044 0401		orr r4, r4, #1
A18049A4  47A0     		blx r4
A18049A6  E8BD 0021		ldmia sp!, { r0, r5 }

#93		
#94		
#95				(* IF checkAlarmVal.is_check_done and checkAlarmVal.isOK *)
#96				LD		checkAlarmVal.is_check_done	{LNXT:41|-1|-1}
(*) UNDEF
A18049AA  F8DF 7110		ldr r7, [pc, #+272] ; 0x2D
A18049AE  5DF0     		ldrb r0, [r6, +r7]

#97				AND		checkAlarmVal.isOK	{LNXT:41|-1|-1}
(*) BOOL
A18049B0  F8DF 710C		ldr r7, [pc, #+268] ; 0x2E
A18049B4  5DF7     		ldrb r7, [r6, +r7]
A18049B6  4038     		and r0, r0, r7

#98				JMPCN	$label4	{LNXT:41|42|44}
(-) BOOL
A18049B8  2800     		cmp r0, #0
A18049BA  D009     		beq #18 ; 0xA18049D0


#99		
#100				(* THEN *)
#101		
#102					(* q_start_ats_FB^:=true; *)
#103					MOVE		true,q_start_ats_FB^	{LNXT:42|54|-1}
(*) BOOL
A18049BE  2001     		mov r0, #1 ; 1
A18049C0  F8DF 7154		ldr r7, [pc, #+340] ; 0x74
A18049C4  F856 C007		ldr r12, [r6, +r7]
A18049C8  F88C 0000		strb r0, [r12]

#104					JMP		$label5	{LNXT:41|42|44}
(-) BOOL
A18049CC  E007     		b #14 ; 0xA18049DE


#105		$label4:
#106		
#107				(* ELSE *)
#108		
#109					(* q_start_ats_FB^:=false; *)
#110					MOVE		false,q_start_ats_FB^	{LNXT:44|54|-1}
(*) BOOL
A18049D0  2000     		mov r0, #0 ; 0
A18049D2  F8DF 7144		ldr r7, [pc, #+324] ; 0x74
A18049D6  F856 C007		ldr r12, [r6, +r7]
A18049DA  F88C 0000		strb r0, [r12]

#111		
#112		$label5:
#113				(* END_IF *)
#114				JMP		$label3	{LNXT:7|10|50}
(-) BOOL
A18049DE  E007     		b #14 ; 0xA18049F0


#115		$label2:
#116		
#117			(* ELSE *)
#118		
#119				(* q_start_ats_FB^:=true; *)
#120				MOVE		true,q_start_ats_FB^	{LNXT:50|54|-1}
(*) BOOL
A18049E2  2001     		mov r0, #1 ; 1
A18049E4  F8DF 7130		ldr r7, [pc, #+304] ; 0x74
A18049E8  F856 C007		ldr r12, [r6, +r7]
A18049EC  F88C 0000		strb r0, [r12]

#121		
#122		$label3:
#123			(* END_IF *)
#124		
#125		
#126			(* IF washing_timer.Q *)
#127			LD		washing_timer.Q	{LNXT:54|-1|-1}
(*) UNDEF
A18049F0  F8DF 70BC		ldr r7, [pc, #+188] ; 0xC
A18049F4  5DF0     		ldrb r0, [r6, +r7]

#128			JMPCN	$label6	{LNXT:54|55|68}
(-) BOOL
A18049F6  2800     		cmp r0, #0
A18049F8  D02B     		beq #86 ; 0xA1804A52


#129		
#130			(* THEN *)
#131		
#132				(* sv_washing_FB^:=false; *)
#133				MOVE		false,sv_washing_FB^	{LNXT:55|56|-1}
(*) BOOL
A18049FC  2000     		mov r0, #0 ; 0
A18049FE  F8DF 7104		ldr r7, [pc, #+260] ; 0x60
A1804A02  F856 C007		ldr r12, [r6, +r7]
A1804A06  F88C 0000		strb r0, [r12]

#134		
#135				(* onWash :=false; *)
#136				MOVE		false,onWash	{LNXT:56|59|-1}
(*) BOOL
A1804A0A  2000     		mov r0, #0 ; 0
A1804A0C  F8DF 70A4		ldr r7, [pc, #+164] ; 0x14
A1804A10  55F0     		strb r0, [r6, +r7]

#137		
#138				(* o_val_close_R_FB^:=false; *)
#139				MOVE		false,o_val_close_R_FB^	{LNXT:59|60|-1}
(*) BOOL
A1804A12  2000     		mov r0, #0 ; 0
A1804A14  F8DF 70F4		ldr r7, [pc, #+244] ; 0x68
A1804A18  F856 C007		ldr r12, [r6, +r7]
A1804A1C  F88C 0000		strb r0, [r12]

#140		
#141				(* o_val_open_fall_FB^:=false; *)
#142				MOVE		false,o_val_open_fall_FB^	{LNXT:60|62|-1}
(*) BOOL
A1804A20  2000     		mov r0, #0 ; 0
A1804A22  F8DF 70EC		ldr r7, [pc, #+236] ; 0x6C
A1804A26  F856 C007		ldr r12, [r6, +r7]
A1804A2A  F88C 0000		strb r0, [r12]

#143		
#144				(* o_val_open_R_FB^:=true; *)
#145				MOVE		true,o_val_open_R_FB^	{LNXT:62|63|-1}
(*) BOOL
A1804A2E  2001     		mov r0, #1 ; 1
A1804A30  F8DF 70D4		ldr r7, [pc, #+212] ; 0x64
A1804A34  F856 C007		ldr r12, [r6, +r7]
A1804A38  F88C 0000		strb r0, [r12]

#146		
#147				(* o_val_close_fall_FB^:=true; *)
#148				MOVE		true,o_val_close_fall_FB^	{LNXT:63|65|-1}
(*) BOOL
A1804A3C  2001     		mov r0, #1 ; 1
A1804A3E  F8DF 70D4		ldr r7, [pc, #+212] ; 0x70
A1804A42  F856 C007		ldr r12, [r6, +r7]
A1804A46  F88C 0000		strb r0, [r12]

#149		
#150				(* is_running_wash :=false; *)
#151				MOVE		false,is_running_wash	{LNXT:65|68|-1}
(*) BOOL
A1804A4A  2000     		mov r0, #0 ; 0
A1804A4C  F8DF 70B0		ldr r7, [pc, #+176] ; 0x5D
A1804A50  55F0     		strb r0, [r6, +r7]

#152		
#153		$label6:
#154			(* END_IF *)
#155		
#156			(* washing_timer *)
#157			LD		onWash	{LNXT:68|-1|-1}
(*) UNDEF
A1804A52  F8DF 7060		ldr r7, [pc, #+96] ; 0x14
A1804A56  5DF0     		ldrb r0, [r6, +r7]

#158			AND		q_start_ats_FB^	{LNXT:68|-1|-1}
(*) BOOL
A1804A58  F8DF 70BC		ldr r7, [pc, #+188] ; 0x74
A1804A5C  F856 C007		ldr r12, [r6, +r7]
A1804A60  F8DF 70B4		ldr r7, [pc, #+180] ; 0x74
A1804A64  F856 C007		ldr r12, [r6, +r7]
A1804A68  F89C 7000		ldrb r7, [r12]
A1804A6C  4038     		and r0, r0, r7

#159			ST		washing_timer.IN	{LNXT:68|-1|-1}
(*) BOOL
A1804A6E  F8DF 7038		ldr r7, [pc, #+56] ; 0x4
A1804A72  55F0     		strb r0, [r6, +r7]

#160			MOVE		ep_time_wash_FB^,washing_timer.PT	{LNXT:68|-1|-1}
(*) BOOL
A1804A74  F8DF 70A4		ldr r7, [pc, #+164] ; 0x78
A1804A78  F856 C007		ldr r12, [r6, +r7]
A1804A7C  F9BC 0000		ldrsh r0, [r12]
A1804A80  F8DF 7028		ldr r7, [pc, #+40] ; 0x8
A1804A84  51F0     		str r0, [r6, +r7]

#161			CAL		washing_timer	{LNXT:68|-1|-1}
(*) UDINT
A1804A86  E92D 0021		stmdb sp!, { r0, r5 }
A1804A8A  4635     		mov r5, r6
A1804A8C  F8DF 4010		ldr r4, [pc, #+16] ; 0xA1804490
A1804A90  F044 0401		orr r4, r4, #1
A1804A94  47A0     		blx r4
A1804A96  E8BD 0021		ldmia sp!, { r0, r5 }

A1804A9A  E8BD 4040		ldmia sp!, { r6, lr }

A1804A9E  4770     		bx lr

A1804AA0  A1804490		; 0xA1804490
A1804AA4  A1804530		; 0xA1804530
A1804AA8  00000004		; 0x00000004
A1804AAC  00000008		; 0x00000008
A1804AB0  0000000C		; 0x0000000C
A1804AB4  00000014		; 0x00000014
A1804AB8  00000018		; 0x00000018
A1804ABC  0000002D		; 0x0000002D
A1804AC0  0000002E		; 0x0000002E
A1804AC4  00000030		; 0x00000030
A1804AC8  00000034		; 0x00000034
A1804ACC  00000038		; 0x00000038
A1804AD0  0000003C		; 0x0000003C
A1804AD4  00000040		; 0x00000040
A1804AD8  00000044		; 0x00000044
A1804ADC  00000048		; 0x00000048
A1804AE0  0000004C		; 0x0000004C
A1804AE4  00000050		; 0x00000050
A1804AE8  00000054		; 0x00000054
A1804AEC  00000058		; 0x00000058
A1804AF0  00000059		; 0x00000059
A1804AF4  0000005A		; 0x0000005A
A1804AF8  0000005B		; 0x0000005B
A1804AFC  0000005C		; 0x0000005C
A1804B00  0000005D		; 0x0000005D
A1804B04  00000060		; 0x00000060
A1804B08  00000064		; 0x00000064
A1804B0C  00000068		; 0x00000068
A1804B10  0000006C		; 0x0000006C
A1804B14  00000070		; 0x00000070
A1804B18  00000074		; 0x00000074
A1804B1C  00000078		; 0x00000078
A1804B20  0000007C		; 0x0000007C
A1804B24  00000080		; 0x00000080
A1804B28  00000084		; 0x00000084
A1804B2C  00000088		; 0x00000088
A1804B30  0000008C		; 0x0000008C
A1804B34  00000090		; 0x00000090


Frame allocation (hex):

	0000       : FB washing_timer
	0014 bit  0: VAR onWash
	0018       : FB checkAlarmVal
	0058 bit  0: VAR valve_rising
	0059 bit  0: VAR prev_val_open_fall
	005A bit  0: VAR prev_val_close_fall
	005B bit  0: VAR prev_val_open_R
	005C bit  0: VAR prev_val_close_R
	005D bit  0: VAR is_running_wash
	0060       : VAR sv_washing_FB
	0064       : VAR o_val_open_R_FB
	0068       : VAR o_val_close_R_FB
	006C       : VAR o_val_open_fall_FB
	0070       : VAR o_val_close_fall_FB
	0074       : VAR q_start_ats_FB
	0078       : VAR ep_time_wash_FB
	007C       : VAR i_val_state_FB
	0080       : VAR di_val_open_state_fall_FB
	0084       : VAR di_val_close_state_fall_FB
	0088       : VAR di_val_open_state_R_FB
	008C       : VAR di_val_close_state_R_FB
	0090       : VAR Alarm_Val_FB

END_FUNCTION_BLOCK
**************************************************
	List program: ATS_mdb
**************************************************

PROGRAM ATS_mdb

        VAR
res_eta_lcr : UINT;
resp_eta_lcr : ARRAY[0..3] OF INT;
res : INT;
xTON : TON;
	END_VAR

END_PROGRAM

A1804B40  B082     		sub sp, sp, #8
A1804B42  F8CD E000		str lr, [sp]
A1804B46  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ATS_mdb}
#1		(*$WAITSWITCH$*)
#2		
#3			(* res := sysMbMRTU_FC03(	addr := 1, 
#4											base := 257, // 256
#5											no := 4, 
#6											object := ADR(resp_eta_lcr), 
#7											timeout := 200); *)
#8			ADR		resp_eta_lcr	{LNXT:2|8|-1}
(*) UDINT
A1804B4A  F8DF 0510		ldr r0, [pc, #+1296] ; 0xA1A0000C

#9			ST		$$TMP0	{LNXT:2|8|-1}
(*) @INT
A1804B4E  F8DF 751C		ldr r7, [pc, #+1308] ; 0xA1A00014
A1804B52  6038     		str r0, [r7]

#10			LDP0		1	{LNXT:2|8|-1}
(-) @INT
#11			sysMbMRTU_FC03		257, 4, $$TMP0, 200	{LNXT:2|8|-1}
(*) @INT
A1804B54  B082     		sub sp, sp, #8
A1804B56  2001     		mov r0, #1 ; 1
A1804B58  F8DF 7570		ldr r7, [pc, #+1392] ; 0x101
A1804B5C  4639     		mov r1, r7
A1804B5E  2704     		mov r7, #4 ; 4
A1804B60  463A     		mov r2, r7
A1804B62  F8DF 7508		ldr r7, [pc, #+1288] ; 0xA1A00014
A1804B66  683B     		ldr r3, [r7]
A1804B68  27C8     		mov r7, #200 ; 200
A1804B6A  F8CD 7000		str r7, [sp]
A1804B6E  F8DF 4564		ldr r4, [pc, #+1380] ; 0x241DB
A1804B72  F044 0401		orr r4, r4, #1
A1804B76  47A0     		blx r4
A1804B78  B002     		add sp, sp, #8

#12			ST		res	{LNXT:2|8|-1}
(*) UINT
A1804B7A  F8DF 74F4		ldr r7, [pc, #+1268] ; 0xA1A00018
A1804B7E  8038     		strh r0, [r7]

#13		
#14			(* ATS22_DUT.Ready 	:= to_bool(resp_eta_lcr[0] And 16#01); *)
#15			LD		resp_eta_lcr[0]	{LNXT:8|9|-1}
(*) UNDEF
A1804B80  F8DF 74D8		ldr r7, [pc, #+1240] ; 0xA1A0000C
A1804B84  F9B7 0000		ldrsh r0, [r7]

#16			AND		16#01	{LNXT:8|9|-1}
(*) INT
A1804B88  2701     		mov r7, #1 ; 1
A1804B8A  4038     		and r0, r0, r7

#17			to_bool	{LNXT:8|9|-1}
(*) INT
A1804B8C  2800     		cmp r0, #0
A1804B8E  BF18 2001		nemov r0, #1
A1804B92  BF08 2000		eqmov r0, #0

#18			ST		ATS22_DUT.Ready	{LNXT:8|9|-1}
(*) BOOL
A1804B96  F8DF 74E4		ldr r7, [pc, #+1252] ; 0xA1A0001C
A1804B9A  7038     		strb r0, [r7]

#19		
#20			(* ATS22_DUT.On 		:= to_bool(resp_eta_lcr[0] And 16#02); *)
#21			LD		resp_eta_lcr[0]	{LNXT:9|10|-1}
(*) UNDEF
A1804B9C  F8DF 74BC		ldr r7, [pc, #+1212] ; 0xA1A0000C
A1804BA0  F9B7 0000		ldrsh r0, [r7]

#22			AND		16#02	{LNXT:9|10|-1}
(*) INT
A1804BA4  2702     		mov r7, #2 ; 2
A1804BA6  4038     		and r0, r0, r7

#23			to_bool	{LNXT:9|10|-1}
(*) INT
A1804BA8  2800     		cmp r0, #0
A1804BAA  BF18 2001		nemov r0, #1
A1804BAE  BF08 2000		eqmov r0, #0

#24			ST		ATS22_DUT.On	{LNXT:9|10|-1}
(*) BOOL
A1804BB2  F8DF 74CC		ldr r7, [pc, #+1228] ; 0xA1A0001D
A1804BB6  7038     		strb r0, [r7]

#25		
#26			(* ATS22_DUT.Trip 		:= to_bool(resp_eta_lcr[0] And 16#04); *)
#27			LD		resp_eta_lcr[0]	{LNXT:10|11|-1}
(*) UNDEF
A1804BB8  F8DF 74A0		ldr r7, [pc, #+1184] ; 0xA1A0000C
A1804BBC  F9B7 0000		ldrsh r0, [r7]

#28			AND		16#04	{LNXT:10|11|-1}
(*) INT
A1804BC0  2704     		mov r7, #4 ; 4
A1804BC2  4038     		and r0, r0, r7

#29			to_bool	{LNXT:10|11|-1}
(*) INT
A1804BC4  2800     		cmp r0, #0
A1804BC6  BF18 2001		nemov r0, #1
A1804BCA  BF08 2000		eqmov r0, #0

#30			ST		ATS22_DUT.Trip	{LNXT:10|11|-1}
(*) BOOL
A1804BCE  F8DF 74B4		ldr r7, [pc, #+1204] ; 0xA1A0001E
A1804BD2  7038     		strb r0, [r7]

#31		
#32			(* ATS22_DUT.Warning 	:= to_bool(resp_eta_lcr[0] And 16#08); *)
#33			LD		resp_eta_lcr[0]	{LNXT:11|12|-1}
(*) UNDEF
A1804BD4  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A0000C
A1804BD8  F9B7 0000		ldrsh r0, [r7]

#34			AND		16#08	{LNXT:11|12|-1}
(*) INT
A1804BDC  2708     		mov r7, #8 ; 8
A1804BDE  4038     		and r0, r0, r7

#35			to_bool	{LNXT:11|12|-1}
(*) INT
A1804BE0  2800     		cmp r0, #0
A1804BE2  BF18 2001		nemov r0, #1
A1804BE6  BF08 2000		eqmov r0, #0

#36			ST		ATS22_DUT.Warning	{LNXT:11|12|-1}
(*) BOOL
A1804BEA  F8DF 749C		ldr r7, [pc, #+1180] ; 0xA1A0001F
A1804BEE  7038     		strb r0, [r7]

#37		
#38			(* ATS22_DUT.LI3 		:= to_bool(resp_eta_lcr[0] And 16#20); *)
#39			LD		resp_eta_lcr[0]	{LNXT:12|13|-1}
(*) UNDEF
A1804BF0  F8DF 7468		ldr r7, [pc, #+1128] ; 0xA1A0000C
A1804BF4  F9B7 0000		ldrsh r0, [r7]

#40			AND		16#20	{LNXT:12|13|-1}
(*) INT
A1804BF8  2720     		mov r7, #32 ; 32
A1804BFA  4038     		and r0, r0, r7

#41			to_bool	{LNXT:12|13|-1}
(*) INT
A1804BFC  2800     		cmp r0, #0
A1804BFE  BF18 2001		nemov r0, #1
A1804C02  BF08 2000		eqmov r0, #0

#42			ST		ATS22_DUT.LI3	{LNXT:12|13|-1}
(*) BOOL
A1804C06  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A00020
A1804C0A  7038     		strb r0, [r7]

#43		
#44			(* ATS22_DUT.LI2 		:= to_bool(resp_eta_lcr[0] And 16#40); *)
#45			LD		resp_eta_lcr[0]	{LNXT:13|14|-1}
(*) UNDEF
A1804C0C  F8DF 744C		ldr r7, [pc, #+1100] ; 0xA1A0000C
A1804C10  F9B7 0000		ldrsh r0, [r7]

#46			AND		16#40	{LNXT:13|14|-1}
(*) INT
A1804C14  2740     		mov r7, #64 ; 64
A1804C16  4038     		and r0, r0, r7

#47			to_bool	{LNXT:13|14|-1}
(*) INT
A1804C18  2800     		cmp r0, #0
A1804C1A  BF18 2001		nemov r0, #1
A1804C1E  BF08 2000		eqmov r0, #0

#48			ST		ATS22_DUT.LI2	{LNXT:13|14|-1}
(*) BOOL
A1804C22  F8DF 746C		ldr r7, [pc, #+1132] ; 0xA1A00021
A1804C26  7038     		strb r0, [r7]

#49		
#50			(* ATS22_DUT.LI1 		:= to_bool(resp_eta_lcr[0] And 16#80); *)
#51			LD		resp_eta_lcr[0]	{LNXT:14|17|-1}
(*) UNDEF
A1804C28  F8DF 7430		ldr r7, [pc, #+1072] ; 0xA1A0000C
A1804C2C  F9B7 0000		ldrsh r0, [r7]

#52			AND		16#80	{LNXT:14|17|-1}
(*) INT
A1804C30  2780     		mov r7, #128 ; 128
A1804C32  4038     		and r0, r0, r7

#53			to_bool	{LNXT:14|17|-1}
(*) INT
A1804C34  2800     		cmp r0, #0
A1804C36  BF18 2001		nemov r0, #1
A1804C3A  BF08 2000		eqmov r0, #0

#54			ST		ATS22_DUT.LI1	{LNXT:14|17|-1}
(*) BOOL
A1804C3E  F8DF 7454		ldr r7, [pc, #+1108] ; 0xA1A00022
A1804C42  7038     		strb r0, [r7]

#55		
#56			(* ATS_State_bits.0 := ATS22_DUT.Ready; *)
#57			MOVE		ATS22_DUT.Ready,ATS_State_bits.0	{LNXT:17|18|-1}
(*) BOOL
A1804C44  F8DF 7434		ldr r7, [pc, #+1076] ; 0xA1A0001C
A1804C48  7838     		ldrb r0, [r7]
A1804C4A  F8DF 73E8		ldr r7, [pc, #+1000] ; 0xA0003F10
A1804C4E  F8B7 8000		ldrh r8, [r7]
A1804C52  F360 0800		bfi r8, r0, #0, #1
A1804C56  F8A7 8000		strh r8, [r7]

#58		
#59			(* ATS_State_bits.1 := ATS22_DUT.On And i_run_ats; *)
#60			LD		ATS22_DUT.On	{LNXT:18|19|-1}
(*) UNDEF
A1804C5A  F8DF 7424		ldr r7, [pc, #+1060] ; 0xA1A0001D
A1804C5E  7838     		ldrb r0, [r7]

#61			AND		i_run_ats	{LNXT:18|19|-1}
(*) BOOL
A1804C60  F8DF 7414		ldr r7, [pc, #+1044] ; 0xA1A0001B
A1804C64  783F     		ldrb r7, [r7]
A1804C66  4038     		and r0, r0, r7

#62			ST		ATS_State_bits.1	{LNXT:18|19|-1}
(*) BOOL
A1804C68  F8DF 73C8		ldr r7, [pc, #+968] ; 0xA0003F10
A1804C6C  F8B7 8000		ldrh r8, [r7]
A1804C70  F360 0841		bfi r8, r0, #1, #1
A1804C74  F8A7 8000		strh r8, [r7]

#63		
#64			(* ATS_State_bits.2 := ATS22_DUT.Trip Or Not i_no_alm_ats ; *)
#65			LD		i_no_alm_ats	{LNXT:19|20|-1}
(*) UNDEF
A1804C78  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001A
A1804C7C  7838     		ldrb r0, [r7]

#66			NOT	{LNXT:19|20|-1}
(*) BOOL
A1804C7E  2800     		cmp r0, #0
A1804C80  BF08 2001		eqmov r0, #1
A1804C84  BF18 2000		nemov r0, #0

#67			OR		ATS22_DUT.Trip	{LNXT:19|20|-1}
(*) BOOL
A1804C88  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001E
A1804C8C  783F     		ldrb r7, [r7]
A1804C8E  4338     		orr r0, r0, r7

#68			ST		ATS_State_bits.2	{LNXT:19|20|-1}
(*) BOOL
A1804C90  F8DF 73A0		ldr r7, [pc, #+928] ; 0xA0003F10
A1804C94  F8B7 8000		ldrh r8, [r7]
A1804C98  F360 0882		bfi r8, r0, #2, #1
A1804C9C  F8A7 8000		strh r8, [r7]

#69		
#70			(* ATS_State_bits.3 := ATS22_DUT.Warning; *)
#71			MOVE		ATS22_DUT.Warning,ATS_State_bits.3	{LNXT:20|21|-1}
(*) BOOL
A1804CA0  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A0001F
A1804CA4  7838     		ldrb r0, [r7]
A1804CA6  F8DF 738C		ldr r7, [pc, #+908] ; 0xA0003F10
A1804CAA  F8B7 8000		ldrh r8, [r7]
A1804CAE  F360 08C3		bfi r8, r0, #3, #1
A1804CB2  F8A7 8000		strh r8, [r7]

#72		
#73			(* ATS_State_bits.4 := ATS22_DUT.Local; *)
#74			MOVE		ATS22_DUT.Local,ATS_State_bits.4	{LNXT:21|22|-1}
(*) BOOL
A1804CB6  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A00024
A1804CBA  7838     		ldrb r0, [r7]
A1804CBC  F8DF 7374		ldr r7, [pc, #+884] ; 0xA0003F10
A1804CC0  F8B7 8000		ldrh r8, [r7]
A1804CC4  F360 1804		bfi r8, r0, #4, #1
A1804CC8  F8A7 8000		strh r8, [r7]

#75		
#76			(* ATS_State_bits.5 := ATS22_DUT.Ramping; *)
#77			MOVE		ATS22_DUT.Ramping,ATS_State_bits.5	{LNXT:22|23|-1}
(*) BOOL
A1804CCC  F8DF 73D0		ldr r7, [pc, #+976] ; 0xA1A00025
A1804CD0  7838     		ldrb r0, [r7]
A1804CD2  F8DF 7360		ldr r7, [pc, #+864] ; 0xA0003F10
A1804CD6  F8B7 8000		ldrh r8, [r7]
A1804CDA  F360 1845		bfi r8, r0, #5, #1
A1804CDE  F8A7 8000		strh r8, [r7]

#78		
#79			(* ATS_State_bits.6 := ATS22_DUT.LI1; *)
#80			MOVE		ATS22_DUT.LI1,ATS_State_bits.6	{LNXT:23|24|-1}
(*) BOOL
A1804CE2  F8DF 73B0		ldr r7, [pc, #+944] ; 0xA1A00022
A1804CE6  7838     		ldrb r0, [r7]
A1804CE8  F8DF 7348		ldr r7, [pc, #+840] ; 0xA0003F10
A1804CEC  F8B7 8000		ldrh r8, [r7]
A1804CF0  F360 1886		bfi r8, r0, #6, #1
A1804CF4  F8A7 8000		strh r8, [r7]

#81		
#82			(* ATS_State_bits.7 := ATS22_DUT.LI2; *)
#83			MOVE		ATS22_DUT.LI2,ATS_State_bits.7	{LNXT:24|25|-1}
(*) BOOL
A1804CF8  F8DF 7394		ldr r7, [pc, #+916] ; 0xA1A00021
A1804CFC  7838     		ldrb r0, [r7]
A1804CFE  F8DF 7334		ldr r7, [pc, #+820] ; 0xA0003F10
A1804D02  F8B7 8000		ldrh r8, [r7]
A1804D06  F360 18C7		bfi r8, r0, #7, #1
A1804D0A  F8A7 8000		strh r8, [r7]

#84		
#85			(* ATS_State_bits.8 := ATS22_DUT.LI3; *)
#86			MOVE		ATS22_DUT.LI3,ATS_State_bits.8	{LNXT:25|28|-1}
(*) BOOL
A1804D0E  F8DF 737C		ldr r7, [pc, #+892] ; 0xA1A00020
A1804D12  7838     		ldrb r0, [r7]
A1804D14  F8DF 731C		ldr r7, [pc, #+796] ; 0xA0003F10
A1804D18  F8B7 8000		ldrh r8, [r7]
A1804D1C  F360 2808		bfi r8, r0, #8, #1
A1804D20  F8A7 8000		strh r8, [r7]

#87		
#88			(* ATS_State_bits.9 := i_pb_loc; *)
#89			MOVE		i_pb_loc,ATS_State_bits.9	{LNXT:28|29|-1}
(*) BOOL
A1804D24  F8DF 739C		ldr r7, [pc, #+924] ; 0xA1A00038
A1804D28  F9B7 0000		ldrsh r0, [r7]
A1804D2C  F8DF 7304		ldr r7, [pc, #+772] ; 0xA0003F10
A1804D30  B082     		sub sp, sp, #8
A1804D32  F8CD 0000		str r0, [sp]
A1804D36  2800     		cmp r0, #0
A1804D38  BF08 2000		eqmov r0, #0
A1804D3C  BF18 2001		nemov r0, #1
A1804D40  F8B7 8000		ldrh r8, [r7]
A1804D44  F360 2849		bfi r8, r0, #9, #1
A1804D48  F8A7 8000		strh r8, [r7]
A1804D4C  F8DD 0000		ldr r0, [sp]
A1804D50  B002     		add sp, sp, #8

#90		
#91			(* ATS_State_bits.10 := i_pb_rem; *)
#92			MOVE		i_pb_rem,ATS_State_bits.10	{LNXT:29|31|-1}
(*) INT
A1804D52  F8DF 7374		ldr r7, [pc, #+884] ; 0xA1A0003A
A1804D56  F9B7 0000		ldrsh r0, [r7]
A1804D5A  F8DF 72D8		ldr r7, [pc, #+728] ; 0xA0003F10
A1804D5E  B082     		sub sp, sp, #8
A1804D60  F8CD 0000		str r0, [sp]
A1804D64  2800     		cmp r0, #0
A1804D66  BF08 2000		eqmov r0, #0
A1804D6A  BF18 2001		nemov r0, #1
A1804D6E  F8B7 8000		ldrh r8, [r7]
A1804D72  F360 288A		bfi r8, r0, #10, #1
A1804D76  F8A7 8000		strh r8, [r7]
A1804D7A  F8DD 0000		ldr r0, [sp]
A1804D7E  B002     		add sp, sp, #8

#93		
#94		
#95			(* IF i_pb_loc AND not i_pb_rem *)
#96			LD		i_pb_rem	{LNXT:31|-1|-1}
(*) UNDEF
A1804D80  F8DF 7344		ldr r7, [pc, #+836] ; 0xA1A0003A
A1804D84  F9B7 0000		ldrsh r0, [r7]

#97			NOT	{LNXT:31|-1|-1}
(-) INT
A1804D88  43C0     		mvn r0, r0

#98			AND(		i_pb_loc	{LNXT:31|-1|-1}
(*) INT
A1804D8A  B082     		sub sp, sp, #8
A1804D8C  F8CD 0000		str r0, [sp]
A1804D90  F8DF 7330		ldr r7, [pc, #+816] ; 0xA1A00038
A1804D94  F9B7 0000		ldrsh r0, [r7]

#99			NOT	{LNXT:31|-1|-1}
(-) INT
A1804D98  43C0     		mvn r0, r0

#100			)	{LNXT:31|-1|-1}
(*) INT
A1804D9A  4607     		mov r7, r0
A1804D9C  F8DD 0000		ldr r0, [sp]
A1804DA0  B002     		add sp, sp, #8
A1804DA2  4038     		and r0, r0, r7

#101			JMPCN	$label0	{LNXT:31|32|34}
(-) INT
A1804DA4  2800     		cmp r0, #0
A1804DA6  D009     		beq #18 ; 0xA1804DBC


#102		
#103			(* THEN *)
#104		
#105				(* ATS_State_bits.11 := TRUE; *)
#106				MOVE		TRUE,ATS_State_bits.11	{LNXT:32|34|-1}
(*) INT
A1804DAA  2001     		mov r0, #1 ; 1
A1804DAC  F8DF 7284		ldr r7, [pc, #+644] ; 0xA0003F10
A1804DB0  F8B7 8000		ldrh r8, [r7]
A1804DB4  F360 28CB		bfi r8, r0, #11, #1
A1804DB8  F8A7 8000		strh r8, [r7]

#107		
#108		$label0:
#109			(* END_IF *)
#110		
#111		
#112			(* IF i_pb_loc AND i_pb_rem *)
#113			LD		i_pb_loc	{LNXT:34|-1|-1}
(*) UNDEF
A1804DBC  F8DF 7304		ldr r7, [pc, #+772] ; 0xA1A00038
A1804DC0  F9B7 0000		ldrsh r0, [r7]

#114			NOT	{LNXT:34|-1|-1}
(-) INT
A1804DC4  43C0     		mvn r0, r0

#115			AND		i_pb_rem	{LNXT:34|-1|-1}
(*) INT
A1804DC6  F8DF 7300		ldr r7, [pc, #+768] ; 0xA1A0003A
A1804DCA  F9B7 7000		ldrsh r7, [r7]
A1804DCE  4038     		and r0, r0, r7

#116			JMPCN	$label1	{LNXT:34|35|37}
(-) INT
A1804DD0  2800     		cmp r0, #0
A1804DD2  D009     		beq #18 ; 0xA1804DE8


#117		
#118			(* THEN *)
#119		
#120				(* ATS_State_bits.11 := FALSE; *)
#121				MOVE		FALSE,ATS_State_bits.11	{LNXT:35|37|-1}
(*) INT
A1804DD6  2000     		mov r0, #0 ; 0
A1804DD8  F8DF 7258		ldr r7, [pc, #+600] ; 0xA0003F10
A1804DDC  F8B7 8000		ldrh r8, [r7]
A1804DE0  F360 28CB		bfi r8, r0, #11, #1
A1804DE4  F8A7 8000		strh r8, [r7]

#122		
#123		$label1:
#124			(* END_IF *)
#125		
#126		
#127			(* IF i_pb_loc AND not i_pb_rem *)
#128			LD		i_pb_rem	{LNXT:37|-1|-1}
(*) UNDEF
A1804DE8  F8DF 72DC		ldr r7, [pc, #+732] ; 0xA1A0003A
A1804DEC  F9B7 0000		ldrsh r0, [r7]

#129			NOT	{LNXT:37|-1|-1}
(-) INT
A1804DF0  43C0     		mvn r0, r0

#130			AND		i_pb_loc	{LNXT:37|-1|-1}
(*) INT
A1804DF2  F8DF 72D0		ldr r7, [pc, #+720] ; 0xA1A00038
A1804DF6  F9B7 7000		ldrsh r7, [r7]
A1804DFA  4038     		and r0, r0, r7

#131			JMPCN	$label2	{LNXT:37|38|43}
(-) INT
A1804DFC  2800     		cmp r0, #0
A1804DFE  D009     		beq #18 ; 0xA1804E14


#132		
#133			(* THEN *)
#134		
#135				(* ATS_State_bits.11 := FALSE; *)
#136				MOVE		FALSE,ATS_State_bits.11	{LNXT:38|43|-1}
(*) INT
A1804E02  2000     		mov r0, #0 ; 0
A1804E04  F8DF 722C		ldr r7, [pc, #+556] ; 0xA0003F10
A1804E08  F8B7 8000		ldrh r8, [r7]
A1804E0C  F360 28CB		bfi r8, r0, #11, #1
A1804E10  F8A7 8000		strh r8, [r7]

#137		
#138		$label2:
#139			(* END_IF *)
#140		
#141			(* ATS22_DUT.EtaCurrent := to_byte(SHR(resp_eta_lcr[0] AND 16#3F00, 16#08) * 200 / 63); *)
#142			LD		resp_eta_lcr[0]	{LNXT:43|44|-1}
(*) UNDEF
A1804E14  F8DF 7244		ldr r7, [pc, #+580] ; 0xA1A0000C
A1804E18  F9B7 0000		ldrsh r0, [r7]

#143			AND		16#3F00	{LNXT:43|44|-1}
(*) INT
A1804E1C  F44F 577C		mov r7, #16128 ; 16128
A1804E20  4038     		and r0, r0, r7

#144			SHR		16#08	{LNXT:43|44|-1}
(*) INT
A1804E22  0A00     		lsr r0, r0, #8
A1804E24  0400     		lsl r0, r0, #16
A1804E26  0C00     		lsr r0, r0, #16

#145			MUL		200	{LNXT:43|44|-1}
(*) INT
A1804E28  27C8     		mov r7, #200 ; 200
A1804E2A  4378     		mul r0, r0, r7

#146			DIV		63	{LNXT:43|44|-1}
(*) INT
A1804E2C  273F     		mov r7, #63 ; 63
A1804E2E  B082     		sub sp, sp, #8
A1804E30  F8CD 1000		str r1, [sp]
A1804E34  4639     		mov r1, r7
A1804E36  FB90 F0F1		sdiv r0, r0, r1
A1804E3A  F8DD 1000		ldr r1, [sp]
A1804E3E  B002     		add sp, sp, #8

#147			to_byte	{LNXT:43|44|-1}
(-) INT
#148			ST		ATS22_DUT.EtaCurrent	{LNXT:43|44|-1}
(*) BYTE
A1804E40  F8DF 7254		ldr r7, [pc, #+596] ; 0xA1A00023
A1804E44  7038     		strb r0, [r7]

#149		
#150			(* ATS_Current_prsnt	 := ATS22_DUT.EtaCurrent; *)
#151			MOVE		ATS22_DUT.EtaCurrent,ATS_Current_prsnt	{LNXT:44|46|-1}
(*) BYTE
A1804E46  F8DF 7250		ldr r7, [pc, #+592] ; 0xA1A00023
A1804E4A  7838     		ldrb r0, [r7]
A1804E4C  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA0003F12
A1804E50  8038     		strh r0, [r7]

#152		
#153			(* ATS22_DUT.Local 	:= to_bool(resp_eta_lcr[0] And 16#4000); *)
#154			LD		resp_eta_lcr[0]	{LNXT:46|47|-1}
(*) UNDEF
A1804E52  F8DF 7208		ldr r7, [pc, #+520] ; 0xA1A0000C
A1804E56  F9B7 0000		ldrsh r0, [r7]

#155			AND		16#4000	{LNXT:46|47|-1}
(*) INT
A1804E5A  F44F 4780		mov r7, #16384 ; 16384
A1804E5E  4038     		and r0, r0, r7

#156			to_bool	{LNXT:46|47|-1}
(*) INT
A1804E60  2800     		cmp r0, #0
A1804E62  BF18 2001		nemov r0, #1
A1804E66  BF08 2000		eqmov r0, #0

#157			ST		ATS22_DUT.Local	{LNXT:46|47|-1}
(*) BOOL
A1804E6A  F8DF 7230		ldr r7, [pc, #+560] ; 0xA1A00024
A1804E6E  7038     		strb r0, [r7]

#158		
#159			(* ATS22_DUT.Ramping 	:= to_bool(resp_eta_lcr[0] And 16#8000); *)
#160			LD		resp_eta_lcr[0]	{LNXT:47|49|-1}
(*) UNDEF
A1804E70  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A0000C
A1804E74  F9B7 0000		ldrsh r0, [r7]

#161			AND		16#8000	{LNXT:47|49|-1}
(*) INT
A1804E78  F44F 4700		mov r7, #32768 ; 32768
A1804E7C  4038     		and r0, r0, r7

#162			to_bool	{LNXT:47|49|-1}
(*) INT
A1804E7E  2800     		cmp r0, #0
A1804E80  BF18 2001		nemov r0, #1
A1804E84  BF08 2000		eqmov r0, #0

#163			ST		ATS22_DUT.Ramping	{LNXT:47|49|-1}
(*) BOOL
A1804E88  F8DF 7214		ldr r7, [pc, #+532] ; 0xA1A00025
A1804E8C  7038     		strb r0, [r7]

#164		
#165			(* ATS22_DUT.Lcr1 := resp_eta_lcr[1]; *)
#166			MOVE		resp_eta_lcr[1],ATS22_DUT.Lcr1	{LNXT:49|50|-1}
(*) BOOL
A1804E8E  F8DF 71D0		ldr r7, [pc, #+464] ; 0xA1A0000E
A1804E92  F9B7 0000		ldrsh r0, [r7]
A1804E96  F8DF 720C		ldr r7, [pc, #+524] ; 0xA1A00026
A1804E9A  8038     		strh r0, [r7]

#167		
#168			(* ATS22_DUT.Lcr2 := resp_eta_lcr[2]; *)
#169			MOVE		resp_eta_lcr[2],ATS22_DUT.Lcr2	{LNXT:50|51|-1}
(*) INT
A1804E9C  F8DF 71C4		ldr r7, [pc, #+452] ; 0xA1A00010
A1804EA0  F9B7 0000		ldrsh r0, [r7]
A1804EA4  F8DF 7200		ldr r7, [pc, #+512] ; 0xA1A00028
A1804EA8  8038     		strh r0, [r7]

#170		
#171			(* ATS22_DUT.Lcr3 := resp_eta_lcr[3]; *)
#172			MOVE		resp_eta_lcr[3],ATS22_DUT.Lcr3	{LNXT:51|53|-1}
(*) INT
A1804EAA  F8DF 71BC		ldr r7, [pc, #+444] ; 0xA1A00012
A1804EAE  F9B7 0000		ldrsh r0, [r7]
A1804EB2  F8DF 71F8		ldr r7, [pc, #+504] ; 0xA1A0002A
A1804EB6  8038     		strh r0, [r7]

#173		
#174			(* ATS_Current_L1 := ATS22_DUT.Lcr1; *)
#175			MOVE		ATS22_DUT.Lcr1,ATS_Current_L1	{LNXT:53|54|-1}
(*) INT
A1804EB8  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A00026
A1804EBC  F9B7 0000		ldrsh r0, [r7]
A1804EC0  F8DF 7178		ldr r7, [pc, #+376] ; 0xA0003F14
A1804EC4  8038     		strh r0, [r7]

#176		
#177			(* ATS_Current_L2 := ATS22_DUT.Lcr2; *)
#178			MOVE		ATS22_DUT.Lcr2,ATS_Current_L2	{LNXT:54|55|-1}
(*) INT
A1804EC6  F8DF 71E0		ldr r7, [pc, #+480] ; 0xA1A00028
A1804ECA  F9B7 0000		ldrsh r0, [r7]
A1804ECE  F8DF 7170		ldr r7, [pc, #+368] ; 0xA0003F16
A1804ED2  8038     		strh r0, [r7]

#179		
#180			(* ATS_Current_L3 := ATS22_DUT.Lcr3; *)
#181			MOVE		ATS22_DUT.Lcr3,ATS_Current_L3	{LNXT:55|57|-1}
(*) INT
A1804ED4  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA1A0002A
A1804ED8  F9B7 0000		ldrsh r0, [r7]
A1804EDC  F8DF 7164		ldr r7, [pc, #+356] ; 0xA0003F18
A1804EE0  8038     		strh r0, [r7]

#182		
#183			(* res := sysMbMRTU_FC03(	addr := 1, 
#184											base := 261, // 260
#185											no := 1, 
#186											object := ADR(resp_eta_lcr), 
#187											timeout := 200); *)
#188			ADR		resp_eta_lcr	{LNXT:57|63|-1}
(*) INT
A1804EE2  F8DF 0178		ldr r0, [pc, #+376] ; 0xA1A0000C

#189			ST		$$TMP0	{LNXT:57|63|-1}
(*) @INT
A1804EE6  F8DF 7184		ldr r7, [pc, #+388] ; 0xA1A00014
A1804EEA  6038     		str r0, [r7]

#190			LDP0		1	{LNXT:57|63|-1}
(-) @INT
#191			sysMbMRTU_FC03		261, 1, $$TMP0, 200	{LNXT:57|63|-1}
(*) @INT
A1804EEC  B082     		sub sp, sp, #8
A1804EEE  2001     		mov r0, #1 ; 1
A1804EF0  F8DF 71DC		ldr r7, [pc, #+476] ; 0x105
A1804EF4  4639     		mov r1, r7
A1804EF6  2701     		mov r7, #1 ; 1
A1804EF8  463A     		mov r2, r7
A1804EFA  F8DF 7170		ldr r7, [pc, #+368] ; 0xA1A00014
A1804EFE  683B     		ldr r3, [r7]
A1804F00  27C8     		mov r7, #200 ; 200
A1804F02  F8CD 7000		str r7, [sp]
A1804F06  F8DF 41CC		ldr r4, [pc, #+460] ; 0x241DB
A1804F0A  F044 0401		orr r4, r4, #1
A1804F0E  47A0     		blx r4
A1804F10  B002     		add sp, sp, #8

#192			ST		res	{LNXT:57|63|-1}
(*) UINT
A1804F12  F8DF 715C		ldr r7, [pc, #+348] ; 0xA1A00018
A1804F16  8038     		strh r0, [r7]

#193		
#194			(* ATS22_DUT.LcrVoltage	:= resp_eta_lcr[0]; *)
#195			MOVE		resp_eta_lcr[0],ATS22_DUT.LcrVoltage	{LNXT:63|64|-1}
(*) INT
A1804F18  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0000C
A1804F1C  F9B7 0000		ldrsh r0, [r7]
A1804F20  F8DF 718C		ldr r7, [pc, #+396] ; 0xA1A0002C
A1804F24  8038     		strh r0, [r7]

#196		
#197			(* ATS_Voltage := ATS22_DUT.LcrVoltage; *)
#198			MOVE		ATS22_DUT.LcrVoltage,ATS_Voltage	{LNXT:64|68|-1}
(*) INT
A1804F26  F8DF 7188		ldr r7, [pc, #+392] ; 0xA1A0002C
A1804F2A  F9B7 0000		ldrsh r0, [r7]
A1804F2E  F8DF 7128		ldr r7, [pc, #+296] ; 0xA0003F24
A1804F32  8038     		strh r0, [r7]

#199		
#200			(* res := sysMbMRTU_FC03(	addr := 1, 
#201											base := 280, // 279
#202											no := 1, 
#203											object := ADR(resp_eta_lcr), 
#204											timeout := 200); *)
#205			ADR		resp_eta_lcr	{LNXT:68|74|-1}
(*) INT
A1804F34  F8DF 0124		ldr r0, [pc, #+292] ; 0xA1A0000C

#206			ST		$$TMP0	{LNXT:68|74|-1}
(*) @INT
A1804F38  F8DF 7130		ldr r7, [pc, #+304] ; 0xA1A00014
A1804F3C  6038     		str r0, [r7]

#207			LDP0		1	{LNXT:68|74|-1}
(-) @INT
#208			sysMbMRTU_FC03		280, 1, $$TMP0, 200	{LNXT:68|74|-1}
(*) @INT
A1804F3E  B082     		sub sp, sp, #8
A1804F40  2001     		mov r0, #1 ; 1
A1804F42  F44F 718C		mov r1, #280 ; 280
A1804F46  2701     		mov r7, #1 ; 1
A1804F48  463A     		mov r2, r7
A1804F4A  F8DF 7120		ldr r7, [pc, #+288] ; 0xA1A00014
A1804F4E  683B     		ldr r3, [r7]
A1804F50  27C8     		mov r7, #200 ; 200
A1804F52  F8CD 7000		str r7, [sp]
A1804F56  F8DF 417C		ldr r4, [pc, #+380] ; 0x241DB
A1804F5A  F044 0401		orr r4, r4, #1
A1804F5E  47A0     		blx r4
A1804F60  B002     		add sp, sp, #8

#209			ST		res	{LNXT:68|74|-1}
(*) UINT
A1804F62  F8DF 710C		ldr r7, [pc, #+268] ; 0xA1A00018
A1804F66  8038     		strh r0, [r7]

#210		
#211			(* ATS22_DUT.LastFLT 	:= resp_eta_lcr[0]; *)
#212			MOVE		resp_eta_lcr[0],ATS22_DUT.LastFLT	{LNXT:74|75|-1}
(*) INT
A1804F68  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A0000C
A1804F6C  F9B7 0000		ldrsh r0, [r7]
A1804F70  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0002E
A1804F74  8038     		strh r0, [r7]

#213		
#214			(* ATS_Last_FaultCode := ATS22_DUT.LastFLT; *)
#215			MOVE		ATS22_DUT.LastFLT,ATS_Last_FaultCode	{LNXT:75|78|-1}
(*) INT
A1804F76  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A0002E
A1804F7A  F9B7 0000		ldrsh r0, [r7]
A1804F7E  F8DF 70C8		ldr r7, [pc, #+200] ; 0xA0003F1A
A1804F82  8038     		strh r0, [r7]

#216		
#217			(* res := sysMbMRTU_FC03(	addr := 1, 
#218											base := 274, // 273
#219											no := 3, 
#220											object := ADR(resp_eta_lcr), 
#221											timeout := 200); *)
#222			ADR		resp_eta_lcr	{LNXT:78|84|-1}
(*) INT
A1804F84  F8DF 00D4		ldr r0, [pc, #+212] ; 0xA1A0000C

#223			ST		$$TMP0	{LNXT:78|84|-1}
(*) @INT
A1804F88  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A00014
A1804F8C  6038     		str r0, [r7]

#224			LDP0		1	{LNXT:78|84|-1}
(-) @INT
#225			sysMbMRTU_FC03		274, 3, $$TMP0, 200	{LNXT:78|84|-1}
(*) @INT
A1804F8E  B082     		sub sp, sp, #8
A1804F90  2001     		mov r0, #1 ; 1
A1804F92  F44F 7189		mov r1, #274 ; 274
A1804F96  2703     		mov r7, #3 ; 3
A1804F98  463A     		mov r2, r7
A1804F9A  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A00014
A1804F9E  683B     		ldr r3, [r7]
A1804FA0  27C8     		mov r7, #200 ; 200
A1804FA2  F8CD 7000		str r7, [sp]
A1804FA6  F8DF 412C		ldr r4, [pc, #+300] ; 0x241DB
A1804FAA  F044 0401		orr r4, r4, #1
A1804FAE  47A0     		blx r4
A1804FB0  B002     		add sp, sp, #8

#226			ST		res	{LNXT:78|84|-1}
(*) UINT
A1804FB2  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA1A00018
A1804FB6  8038     		strh r0, [r7]

#227		
#228		
#229			(* IF res <> 0 *)
#230			LD		res	{LNXT:84|-1|-1}
(*) UNDEF
A1804FB8  F8DF 70B4		ldr r7, [pc, #+180] ; 0xA1A00018
A1804FBC  F9B7 0000		ldrsh r0, [r7]

#231			NE		0	{LNXT:84|-1|-1}
(*) INT
A1804FC0  2800     		cmp r0, #0
A1804FC2  BF08 2000		eqmov r0, #0
A1804FC6  BF18 2001		nemov r0, #1

#232			JMPCN	$label3	{LNXT:84|84|86}
(-) BOOL
A1804FCA  2800     		cmp r0, #0
A1804FCC  D009     		beq #18 ; 0xA1804FE2


#233		
#234			(* THEN *)
#235		
#236				(* Alarms.6 := true; *)
#237				MOVE		true,Alarms.6	{LNXT:84|86|-1}
(*) BOOL
A1804FD0  2001     		mov r0, #1 ; 1
A1804FD2  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F20
A1804FD6  F8B7 8000		ldrh r8, [r7]
A1804FDA  F360 1886		bfi r8, r0, #6, #1
A1804FDE  F8A7 8000		strh r8, [r7]

#238		
#239		$label3:
#240			(* END_IF *)
#241		
#242			(* ATS22_DUT.MotRunTime 		:= resp_eta_lcr[0]; *)
#243			MOVE		resp_eta_lcr[0],ATS22_DUT.MotRunTime	{LNXT:86|87|-1}
(*) WORD
A1804FE2  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A0000C
A1804FE6  F9B7 0000		ldrsh r0, [r7]
A1804FEA  F8DF 70CC		ldr r7, [pc, #+204] ; 0xA1A00030
A1804FEE  8038     		strh r0, [r7]

#244		
#245			(* ATS22_DUT.MotStartCnt 		:= resp_eta_lcr[1]; *)
#246			MOVE		resp_eta_lcr[1],ATS22_DUT.MotStartCnt	{LNXT:87|88|-1}
(*) INT
A1804FF0  F8DF 706C		ldr r7, [pc, #+108] ; 0xA1A0000E
A1804FF4  F9B7 0000		ldrsh r0, [r7]
A1804FF8  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A00032
A1804FFC  8038     		strh r0, [r7]

#247		
#248			(* ATS22_DUT.MotLastStartTime 	:= resp_eta_lcr[2]; *)
#249			MOVE		resp_eta_lcr[2],ATS22_DUT.MotLastStartTime	{LNXT:88|90|-1}
(*) INT
A1804FFE  F8DF 7064		ldr r7, [pc, #+100] ; 0xA1A00010
A1805002  F9B7 0000		ldrsh r0, [r7]
A1805006  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A00034
A180500A  8038     		strh r0, [r7]

#250		
#251			(* ATS_RunTime_Hors	:= to_word(ATS22_DUT.MotRunTime); *)
#252			LDP0		ATS22_DUT.MotRunTime	{LNXT:90|91|-1}
(-) INT
#253			to_word	{LNXT:90|91|-1}
(*) INT
A180500C  F8DF 70A8		ldr r7, [pc, #+168] ; 0xA1A00030
A1805010  F9B7 0000		ldrsh r0, [r7]

#254			ST		ATS_RunTime_Hors	{LNXT:90|91|-1}
(*) WORD
A1805014  F8DF 7034		ldr r7, [pc, #+52] ; 0xA0003F1C
A1805018  8038     		strh r0, [r7]

#255		
#256			(* ATS_OnTimes_Cnt		:= to_word(ATS22_DUT.MotStartCnt); *)
#257			LDP0		ATS22_DUT.MotStartCnt	{LNXT:91|2|-1}
(-) WORD
#258			to_word	{LNXT:91|2|-1}
(*) WORD
A180501A  F8DF 70A0		ldr r7, [pc, #+160] ; 0xA1A00032
A180501E  F9B7 0000		ldrsh r0, [r7]

#259			ST		ATS_OnTimes_Cnt	{LNXT:91|2|-1}
(*) WORD
A1805022  F8DF 702C		ldr r7, [pc, #+44] ; 0xA0003F1E
A1805026  8038     		strh r0, [r7]

A1805028  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A180502C  F8DD E000		ldr lr, [sp]
A1805030  B002     		add sp, sp, #8

A1805032  4770     		bx lr

A1805034  FFFFFFFF		; 0xA0003F10
A1805038  FFFFFFFF		; 0xA0003F12
A180503C  FFFFFFFF		; 0xA0003F14
A1805040  FFFFFFFF		; 0xA0003F16
A1805044  FFFFFFFF		; 0xA0003F18
A1805048  FFFFFFFF		; 0xA0003F1A
A180504C  FFFFFFFF		; 0xA0003F1C
A1805050  FFFFFFFF		; 0xA0003F1E
A1805054  FFFFFFFF		; 0xA0003F20
A1805058  FFFFFFFF		; 0xA0003F24
A180505C  A1A0000C		; 0xA1A0000C
A1805060  A1A0000E		; 0xA1A0000E
A1805064  A1A00010		; 0xA1A00010
A1805068  A1A00012		; 0xA1A00012
A180506C  A1A00014		; 0xA1A00014
A1805070  A1A00018		; 0xA1A00018
A1805074  A1A0001A		; 0xA1A0001A
A1805078  A1A0001B		; 0xA1A0001B
A180507C  A1A0001C		; 0xA1A0001C
A1805080  A1A0001D		; 0xA1A0001D
A1805084  A1A0001E		; 0xA1A0001E
A1805088  A1A0001F		; 0xA1A0001F
A180508C  A1A00020		; 0xA1A00020
A1805090  A1A00021		; 0xA1A00021
A1805094  A1A00022		; 0xA1A00022
A1805098  A1A00023		; 0xA1A00023
A180509C  A1A00024		; 0xA1A00024
A18050A0  A1A00025		; 0xA1A00025
A18050A4  A1A00026		; 0xA1A00026
A18050A8  A1A00028		; 0xA1A00028
A18050AC  A1A0002A		; 0xA1A0002A
A18050B0  A1A0002C		; 0xA1A0002C
A18050B4  A1A0002E		; 0xA1A0002E
A18050B8  A1A00030		; 0xA1A00030
A18050BC  A1A00032		; 0xA1A00032
A18050C0  A1A00034		; 0xA1A00034
A18050C4  A1A00038		; 0xA1A00038
A18050C8  A1A0003A		; 0xA1A0003A
A18050CC  00000101		; 0x00000101
A18050D0  00000105		; 0x00000105
A18050D4  FFFFFFFF		; 0x000241DB

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A18050D8  B082     		sub sp, sp, #8
A18050DA  F8CD E000		str lr, [sp]
A18050DE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18050E2  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000427
A18050E6  7838     		ldrb r0, [r7]
A18050E8  F8DF 7038		ldr r7, [pc, #+56] ; 0xA1A0001B
A18050EC  7038     		strb r0, [r7]

A18050EE  F8DF 7040		ldr r7, [pc, #+64] ; 0x10000426
A18050F2  7838     		ldrb r0, [r7]
A18050F4  F8DF 7028		ldr r7, [pc, #+40] ; 0xA1A0001A
A18050F8  7038     		strb r0, [r7]

A18050FA  F8DF 703C		ldr r7, [pc, #+60] ; 0x1000044E
A18050FE  8838     		ldrh r0, [r7]
A1805100  F8DF 7024		ldr r7, [pc, #+36] ; 0xA1A00038
A1805104  8038     		strh r0, [r7]

A1805106  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000450
A180510A  8838     		ldrh r0, [r7]
A180510C  F8DF 701C		ldr r7, [pc, #+28] ; 0xA1A0003A
A1805110  8038     		strh r0, [r7]

A1805112  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805116  F8DD E000		ldr lr, [sp]
A180511A  B002     		add sp, sp, #8

A180511C  4770     		bx lr

A1805120  A1A0001A		; 0xA1A0001A
A1805124  A1A0001B		; 0xA1A0001B
A1805128  A1A00038		; 0xA1A00038
A180512C  A1A0003A		; 0xA1A0003A
A1805130  FFFFFFFF		; 0x10000426
A1805134  FFFFFFFF		; 0x10000427
A1805138  FFFFFFFF		; 0x1000044E
A180513C  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1805140  B082     		sub sp, sp, #8
A1805142  F8CD E000		str lr, [sp]
A1805146  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A180514A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A180514E  F8DD E000		ldr lr, [sp]
A1805152  B002     		add sp, sp, #8

A1805154  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

A1805156  B082     		sub sp, sp, #8
A1805158  F8CD E000		str lr, [sp]
A180515C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805160  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805164  F8DD E000		ldr lr, [sp]
A1805168  B002     		add sp, sp, #8

A180516A  4770     		bx lr

**************************************************
	List program: sr_init_counters
**************************************************

PROGRAM sr_init_counters

END_PROGRAM

A1805180  B082     		sub sp, sp, #8
A1805182  F8CD E000		str lr, [sp]
A1805186  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_init_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_counter 	:= epprom_kw_cnt; *)
#4			MOVE		epprom_kw_cnt,kw_counter	{LNXT:1|2|-1}
(*) UDINT
A180518A  F8DF 7028		ldr r7, [pc, #+40] ; 0xA00017F8
A180518E  6838     		ldr r0, [r7]
A1805190  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003F04
A1805194  6038     		str r0, [r7]

#5		
#6			(* q_counter	:= epprom_q_cnt; *)
#7			MOVE		epprom_q_cnt,q_counter	{LNXT:2|1|-1}
(*) DWORD
A1805196  F8DF 7018		ldr r7, [pc, #+24] ; 0xA00017F0
A180519A  6838     		ldr r0, [r7]
A180519C  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0003F08
A18051A0  6038     		str r0, [r7]

A18051A2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18051A6  F8DD E000		ldr lr, [sp]
A18051AA  B002     		add sp, sp, #8

A18051AC  4770     		bx lr

A18051B0  FFFFFFFF		; 0xA00017F0
A18051B4  FFFFFFFF		; 0xA00017F8
A18051B8  FFFFFFFF		; 0xA0003F04
A18051BC  FFFFFFFF		; 0xA0003F08

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A18051C0  4770     		bx lr


*** OUTPUT:
A18051C2  4770     		bx lr



**************************************************
	Task Boot init code
**************************************************

A18051C4  B082     		sub sp, sp, #8
A18051C6  F8CD E000		str lr, [sp]
A18051CA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18051CE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18051D2  F8DD E000		ldr lr, [sp]
A18051D6  B002     		add sp, sp, #8

A18051D8  4770     		bx lr

**************************************************
	List program: init_val
**************************************************

PROGRAM init_val

END_PROGRAM

A18051F0  B082     		sub sp, sp, #8
A18051F2  F8CD E000		str lr, [sp]
A18051F6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:init_val}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF di_val_close_state_R *)
#5			LD		di_val_close_state_R	{LNXT:1|-1|-1}
(*) UNDEF
A18051FA  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000420
A18051FE  7838     		ldrb r0, [r7]

#6			NOT	{LNXT:1|-1|-1}
(*) BOOL
A1805200  2800     		cmp r0, #0
A1805202  BF08 2001		eqmov r0, #1
A1805206  BF18 2000		nemov r0, #0

#7			JMPCN	$label0	{LNXT:1|2|6}
(-) BOOL
A180520A  2800     		cmp r0, #0
A180520C  D008     		beq #16 ; 0xA1805220


#8		
#9			(* THEN *)
#10		
#11				(* o_val_close_R:=true; *)
#12				MOVE		true,o_val_close_R	{LNXT:2|3|-1}
(*) BOOL
A1805210  2001     		mov r0, #1 ; 1
A1805212  F8DF 704C		ldr r7, [pc, #+76] ; 0x100004AF
A1805216  7038     		strb r0, [r7]

#13		
#14				(* o_val_open_R:=false; *)
#15				MOVE		false,o_val_open_R	{LNXT:3|6|-1}
(*) BOOL
A1805218  2000     		mov r0, #0 ; 0
A180521A  F8DF 7040		ldr r7, [pc, #+64] ; 0x100004AE
A180521E  7038     		strb r0, [r7]

#16		
#17		$label0:
#18			(* END_IF *)
#19		
#20		
#21			(* IF di_val_close_state_fall = 0 *)
#22			LD		di_val_close_state_fall	{LNXT:6|-1|-1}
(*) UNDEF
A1805220  F8DF 702C		ldr r7, [pc, #+44] ; 0x1000044A
A1805224  F9B7 0000		ldrsh r0, [r7]

#23			EQ		0	{LNXT:6|-1|-1}
(*) INT
A1805228  2800     		cmp r0, #0
A180522A  BF18 2000		nemov r0, #0
A180522E  BF08 2001		eqmov r0, #1

#24			JMPCN	$label1	{LNXT:6|7|1}
(-) BOOL
A1805232  2800     		cmp r0, #0
A1805234  D008     		beq #16 ; 0xA1805248


#25		
#26			(* THEN *)
#27		
#28				(* o_val_close_fall:=true; *)
#29				MOVE		true,o_val_close_fall	{LNXT:7|8|-1}
(*) BOOL
A1805238  2001     		mov r0, #1 ; 1
A180523A  F8DF 701C		ldr r7, [pc, #+28] ; 0x100004AD
A180523E  7038     		strb r0, [r7]

#30		
#31				(* o_val_open_fall:=false; *)
#32				MOVE		false,o_val_open_fall	{LNXT:8|1|-1}
(*) BOOL
A1805240  2000     		mov r0, #0 ; 0
A1805242  F8DF 7010		ldr r7, [pc, #+16] ; 0x100004AC
A1805246  7038     		strb r0, [r7]

A1805248  E00C     		b #24

A180524C  FFFFFFFF		; 0x10000420
A1805250  FFFFFFFF		; 0x1000044A
A1805254  FFFFFFFF		; 0x100004AC
A1805258  FFFFFFFF		; 0x100004AD
A180525C  FFFFFFFF		; 0x100004AE
A1805260  FFFFFFFF		; 0x100004AF

END_PROGRAM
**************************************************
	List program: ParCheck
**************************************************

PROGRAM ParCheck

END_PROGRAM

#0		{SRC:ParCheck}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Par_POLI AND 16#fc00) <> 2048 *)
#5			LD		Par_POLI	{LNXT:2|-1|-1}
(*) UNDEF
A1805264  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000182
A1805268  8838     		ldrh r0, [r7]

#6			AND		16#fc00	{LNXT:2|-1|-1}
(*) UINT
A180526A  F44F 477C		mov r7, #64512 ; 64512
A180526E  4038     		and r0, r0, r7

#7			NE		2048	{LNXT:2|-1|-1}
(*) UINT
A1805270  F44F 6700		mov r7, #2048 ; 2048
A1805274  42B8     		cmp r0, r7
A1805276  BF08 2000		eqmov r0, #0
A180527A  BF18 2001		nemov r0, #1

#8			JMPCN	$label0	{LNXT:2|3|2}
(-) BOOL
A180527E  2800     		cmp r0, #0
A1805280  D005     		beq #10 ; 0xA180528E


#9		
#10			(* THEN *)
#11		
#12				(* WHILE TRUE *)
#13		$label1:
#14				LD		TRUE	{LNXT:3|-1|-1}
(-) UNDEF
A1805284  2001     		mov r0, #1 ; 1

#15				JMPCN		$label2	{LNXT:3|2|2}
(-) BOOL
A1805286  2800     		cmp r0, #0
A1805288  D001     		beq #2 ; 0xA180528E


#16		
#17				(* DO *)
#18					JMP		$label1	{LNXT:3|2|2}
(-) BOOL
A180528C  E7FA     		b #-12 ; 0xA1805284

A180528E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805292  F8DD E000		ldr lr, [sp]
A1805296  B002     		add sp, sp, #8

A1805298  4770     		bx lr

A180529C  FFFFFFFF		; 0x10000182

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A18052A0  4770     		bx lr


*** OUTPUT:
A18052A2  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

A18052A4  B082     		sub sp, sp, #8
A18052A6  F8CD E000		str lr, [sp]
A18052AA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18052AE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18052B2  F8DD E000		ldr lr, [sp]
A18052B6  B002     		add sp, sp, #8

A18052B8  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

A18052D0  B082     		sub sp, sp, #8
A18052D2  F8CD E000		str lr, [sp]
A18052D6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 541599759; *)
#4			MOVE		541599759,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
A18052DA  F8DF 7044		ldr r7, [pc, #+68] ; 0x2048280F
A18052DE  4638     		mov r0, r7
A18052E0  F8DF 7030		ldr r7, [pc, #+48] ; 0xA1A0003C
A18052E4  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
A18052E6  F8DF 0028		ldr r0, [pc, #+40] ; 0xA1800100

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
A18052EA  4607     		mov r7, r0
A18052EC  4638     		mov r0, r7
A18052EE  2716     		mov r7, #22 ; 22
A18052F0  4639     		mov r1, r7
A18052F2  F8DF 4028		ldr r4, [pc, #+40] ; 0x1398D
A18052F6  F044 0401		orr r4, r4, #1
A18052FA  47A0     		blx r4

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
A18052FC  F8DF 7018		ldr r7, [pc, #+24] ; 0xA1A00040
A1805300  7038     		strb r0, [r7]

A1805302  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805306  F8DD E000		ldr lr, [sp]
A180530A  B002     		add sp, sp, #8

A180530C  4770     		bx lr

A1805310  A1800100		; 0xA1800100
A1805314  A1A0003C		; 0xA1A0003C
A1805318  A1A00040		; 0xA1A00040
A180531C  FFFFFFFF		; 0x0001398D
A1805320  2048280F		; 0x2048280F

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1805324  4770     		bx lr


*** OUTPUT:
A1805326  4770     		bx lr



**************************************************
	Task Serv init code
**************************************************

A1805328  B082     		sub sp, sp, #8
A180532A  F8CD E000		str lr, [sp]
A180532E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805332  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805336  F8DD E000		ldr lr, [sp]
A180533A  B002     		add sp, sp, #8

A180533C  4770     		bx lr

**************************************************
	List program: sr_pressure
**************************************************

PROGRAM sr_pressure

        VAR
tmp_test : INT;
	END_VAR

END_PROGRAM

A1805350  B082     		sub sp, sp, #8
A1805352  F8CD E000		str lr, [sp]
A1805356  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_pressure}
#1		(*$WAITSWITCH$*)
#2		
#3			(* Pressure := to_int(to_real(i_adc_pressure )/10); *)
#4			LDP0		i_adc_pressure	{LNXT:2|2|-1}
(-) UDINT
#5			to_real	{LNXT:2|2|-1}
(*) UDINT
A180535A  F8DF 705C		ldr r7, [pc, #+92] ; 0xA1A000EA
A180535E  F9B7 0000		ldrsh r0, [r7]
A1805362  F8DF 405C		ldr r4, [pc, #+92] ; 0x111EB
A1805366  F044 0401		orr r4, r4, #1
A180536A  47A0     		blx r4

#6			DIV		10	{LNXT:2|2|-1}
(*) REAL
A180536C  270A     		mov r7, #10 ; 10
A180536E  B082     		sub sp, sp, #8
A1805370  F8CD 0000		str r0, [sp]
A1805374  4638     		mov r0, r7
A1805376  F8DF 4044		ldr r4, [pc, #+68] ; 0x111DB
A180537A  F044 0401		orr r4, r4, #1
A180537E  47A0     		blx r4
A1805380  4607     		mov r7, r0
A1805382  F8DD 0000		ldr r0, [sp]
A1805386  B002     		add sp, sp, #8
A1805388  B082     		sub sp, sp, #8
A180538A  F8CD 1000		str r1, [sp]
A180538E  4639     		mov r1, r7
A1805390  F8DF 4034		ldr r4, [pc, #+52] ; 0x1124B
A1805394  F044 0401		orr r4, r4, #1
A1805398  47A0     		blx r4
A180539A  F8DD 1000		ldr r1, [sp]
A180539E  B002     		add sp, sp, #8

#7			to_int	{LNXT:2|2|-1}
(*) REAL
A18053A0  F8DF 4020		ldr r4, [pc, #+32] ; 0x1120B
A18053A4  F044 0401		orr r4, r4, #1
A18053A8  47A0     		blx r4

#8			ST		Pressure	{LNXT:2|2|-1}
(*) INT
A18053AA  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F00
A18053AE  8038     		strh r0, [r7]

A18053B0  E00C     		b #24

A18053B4  FFFFFFFF		; 0xA0003F00
A18053B8  A1A000EA		; 0xA1A000EA
A18053BC  FFFFFFFF		; 0x000111DB
A18053C0  FFFFFFFF		; 0x000111EB
A18053C4  FFFFFFFF		; 0x0001120B
A18053C8  FFFFFFFF		; 0x0001124B

END_PROGRAM
**************************************************
	List program: sr_counters
**************************************************

PROGRAM sr_counters

        VAR
kw_trig : R_TRIG;
q_trig : R_TRIG;
kw_pulses_per_acs : UINT;
q_pulses_per_acs : UINT;
test_freq : UDINT;
	END_VAR

END_PROGRAM

#0		{SRC:sr_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_pulses_per_acs 	:= 8000; *)
#4			MOVE		8000,kw_pulses_per_acs	{LNXT:2|3|-1}
(*) UDINT
A18053CC  F44F 50FA		mov r0, #8000 ; 8000
A18053D0  F8DF 7108		ldr r7, [pc, #+264] ; 0xA1A000E6
A18053D4  8038     		strh r0, [r7]

#5		
#6			(* q_pulses_per_acs	:= 1; *)
#7			MOVE		1,q_pulses_per_acs	{LNXT:3|15|-1}
(*) UINT
A18053D6  2001     		mov r0, #1 ; 1
A18053D8  F8DF 7104		ldr r7, [pc, #+260] ; 0xA1A000E8
A18053DC  8038     		strh r0, [r7]

#8		
#9		
#10			(* IF fdi_q_cnt >= q_pulses_per_acs *)
#11			LD		fdi_q_cnt	{LNXT:15|-1|-1}
(*) UNDEF
A18053DE  F8DF 7114		ldr r7, [pc, #+276] ; 0x100004F8
A18053E2  6838     		ldr r0, [r7]

#12			GE		q_pulses_per_acs	{LNXT:15|-1|-1}
(*) UDINT
A18053E4  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000E8
A18053E8  883F     		ldrh r7, [r7]
A18053EA  42B8     		cmp r0, r7
A18053EC  BF38 2000		lomov r0, #0
A18053F0  BF28 2001		hsmov r0, #1

#13			JMPCN	$label0	{LNXT:15|16|20}
(-) BOOL
A18053F4  2800     		cmp r0, #0
A18053F6  D00B     		beq #22 ; 0xA1805410


#14		
#15			(* THEN *)
#16		
#17				(* q_counter := q_counter + 1; *)
#18				LD		q_counter	{LNXT:16|17|-1}
(*) UNDEF
A18053FA  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA0003F08
A18053FE  6838     		ldr r0, [r7]

#19				ADD		1	{LNXT:16|17|-1}
(-) DWORD
A1805400  1C40     		add r0, r0, #1

#20				ST		q_counter	{LNXT:16|17|-1}
(*) DWORD
A1805402  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA0003F08
A1805406  6038     		str r0, [r7]

#21		
#22				(* fdi_q_reset := true; *)
#23				MOVE		true,fdi_q_reset	{LNXT:17|20|-1}
(*) DWORD
A1805408  2001     		mov r0, #1 ; 1
A180540A  F8DF 70F0		ldr r7, [pc, #+240] ; 0x100007DD
A180540E  7038     		strb r0, [r7]

#24		
#25		$label0:
#26			(* END_IF *)
#27		
#28			(* q_value := to_int((3600 * to_real(fdi_q_freq)) / (to_real(q_pulses_per_acs) / 1)); *)
#29			LDP0		fdi_q_freq	{LNXT:20|2|-1}
(-) BOOL
#30			to_real	{LNXT:20|2|-1}
(*) BOOL
A1805410  F8DF 70E4		ldr r7, [pc, #+228] ; 0x100004FC
A1805414  6838     		ldr r0, [r7]
A1805416  F8DF 40CC		ldr r4, [pc, #+204] ; 0x111DB
A180541A  F044 0401		orr r4, r4, #1
A180541E  47A0     		blx r4

#31			MUL		3600	{LNXT:20|2|-1}
(*) REAL
A1805420  F44F 6761		mov r7, #3600 ; 3600
A1805424  B082     		sub sp, sp, #8
A1805426  F8CD 0000		str r0, [sp]
A180542A  4638     		mov r0, r7
A180542C  F8DF 40B4		ldr r4, [pc, #+180] ; 0x111DB
A1805430  F044 0401		orr r4, r4, #1
A1805434  47A0     		blx r4
A1805436  4607     		mov r7, r0
A1805438  F8DD 0000		ldr r0, [sp]
A180543C  B002     		add sp, sp, #8
A180543E  B082     		sub sp, sp, #8
A1805440  F8CD 1000		str r1, [sp]
A1805444  4639     		mov r1, r7
A1805446  F8DF 40A4		ldr r4, [pc, #+164] ; 0x1123B
A180544A  F044 0401		orr r4, r4, #1
A180544E  47A0     		blx r4
A1805450  F8DD 1000		ldr r1, [sp]
A1805454  B002     		add sp, sp, #8

#32			DIV(		0	{LNXT:20|2|-1}
(*) REAL
A1805456  B082     		sub sp, sp, #8
A1805458  F8CD 0000		str r0, [sp]
A180545C  2000     		mov r0, #0 ; 0

#33			LDP0		q_pulses_per_acs	{LNXT:20|2|-1}
(-) USINT
#34			to_real	{LNXT:20|2|-1}
(*) USINT
A180545E  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A000E8
A1805462  8838     		ldrh r0, [r7]
A1805464  F8DF 407C		ldr r4, [pc, #+124] ; 0x111DB
A1805468  F044 0401		orr r4, r4, #1
A180546C  47A0     		blx r4

#35			DIV		1	{LNXT:20|2|-1}
(*) REAL
A180546E  2701     		mov r7, #1 ; 1
A1805470  B082     		sub sp, sp, #8
A1805472  F8CD 0000		str r0, [sp]
A1805476  4638     		mov r0, r7
A1805478  F8DF 4068		ldr r4, [pc, #+104] ; 0x111DB
A180547C  F044 0401		orr r4, r4, #1
A1805480  47A0     		blx r4
A1805482  4607     		mov r7, r0
A1805484  F8DD 0000		ldr r0, [sp]
A1805488  B002     		add sp, sp, #8
A180548A  B082     		sub sp, sp, #8
A180548C  F8CD 1000		str r1, [sp]
A1805490  4639     		mov r1, r7
A1805492  F8DF 405C		ldr r4, [pc, #+92] ; 0x1124B
A1805496  F044 0401		orr r4, r4, #1
A180549A  47A0     		blx r4
A180549C  F8DD 1000		ldr r1, [sp]
A18054A0  B002     		add sp, sp, #8

#36			)	{LNXT:20|2|-1}
(*) REAL
A18054A2  4607     		mov r7, r0
A18054A4  F8DD 0000		ldr r0, [sp]
A18054A8  B002     		add sp, sp, #8
A18054AA  B082     		sub sp, sp, #8
A18054AC  F8CD 1000		str r1, [sp]
A18054B0  4639     		mov r1, r7
A18054B2  F8DF 403C		ldr r4, [pc, #+60] ; 0x1124B
A18054B6  F044 0401		orr r4, r4, #1
A18054BA  47A0     		blx r4
A18054BC  F8DD 1000		ldr r1, [sp]
A18054C0  B002     		add sp, sp, #8

#37			to_int	{LNXT:20|2|-1}
(*) REAL
A18054C2  F8DF 4024		ldr r4, [pc, #+36] ; 0x1120B
A18054C6  F044 0401		orr r4, r4, #1
A18054CA  47A0     		blx r4

#38			ST		q_value	{LNXT:20|2|-1}
(*) INT
A18054CC  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F0E
A18054D0  8038     		strh r0, [r7]

A18054D2  E015     		b #42

A18054D4  FFFFFFFF		; 0xA0003F08
A18054D8  FFFFFFFF		; 0xA0003F0E
A18054DC  A1A000E6		; 0xA1A000E6
A18054E0  A1A000E8		; 0xA1A000E8
A18054E4  FFFFFFFF		; 0x000111DB
A18054E8  FFFFFFFF		; 0x0001120B
A18054EC  FFFFFFFF		; 0x0001123B
A18054F0  FFFFFFFF		; 0x0001124B
A18054F4  FFFFFFFF		; 0x100004F8
A18054F8  FFFFFFFF		; 0x100004FC
A18054FC  FFFFFFFF		; 0x100007DD

END_PROGRAM
**************************************************
	List program: sr_save_counters
**************************************************

PROGRAM sr_save_counters

        VAR
power_err : R_TRIG;
ton_start_up : TON;
res_q : BOOL;
res_kw : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:sr_save_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* ton_start_up *)
#4			MOVE		true,ton_start_up.IN	{LNXT:1|-1|-1}
(*) UDINT
A1805500  2001     		mov r0, #1 ; 1
A1805502  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000F0
A1805506  7038     		strb r0, [r7]

#5			MOVE		5000,ton_start_up.PT	{LNXT:1|-1|-1}
(*) BOOL
A1805508  F8DF 7110		ldr r7, [pc, #+272] ; 0x1388
A180550C  4638     		mov r0, r7
A180550E  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A000F4
A1805512  6038     		str r0, [r7]

#6			CAL		ton_start_up	{LNXT:1|2|-1}
(*) UDINT
A1805514  E92D 0021		stmdb sp!, { r0, r5 }
A1805518  F8DF 50DC		ldr r5, [pc, #+220] ; 0xA1A000EC
A180551C  F8DF 40D0		ldr r4, [pc, #+208] ; 0xA1804490
A1805520  F044 0401		orr r4, r4, #1
A1805524  47A0     		blx r4
A1805526  E8BD 0021		ldmia sp!, { r0, r5 }

#7		
#8			(* power_err *)
#9			LD		ton_start_up.Q	{LNXT:2|-1|-1}
(*) UNDEF
A180552A  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA1A000F8
A180552E  7838     		ldrb r0, [r7]

#10			AND		i_rnpp	{LNXT:2|-1|-1}
(*) BOOL
A1805530  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A000E4
A1805534  783F     		ldrb r7, [r7]
A1805536  4038     		and r0, r0, r7

#11			ST		power_err.clk	{LNXT:2|-1|-1}
(*) BOOL
A1805538  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A00101
A180553C  7038     		strb r0, [r7]

#12			CAL		power_err	{LNXT:2|3|-1}
(*) BOOL
A180553E  E92D 0021		stmdb sp!, { r0, r5 }
A1805542  F8DF 50C4		ldr r5, [pc, #+196] ; 0xA1A00100
A1805546  F8DF 40A4		ldr r4, [pc, #+164] ; 0xA1804458
A180554A  F044 0401		orr r4, r4, #1
A180554E  47A0     		blx r4
A1805550  E8BD 0021		ldmia sp!, { r0, r5 }

#13		
#14		
#15			(* IF power_err.q *)
#16			LD		power_err.q	{LNXT:3|-1|-1}
(*) UNDEF
A1805554  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A00102
A1805558  7838     		ldrb r0, [r7]

#17			JMPCN	$label0	{LNXT:3|4|1}
(-) BOOL
A180555A  2800     		cmp r0, #0
A180555C  D03C     		beq #120 ; 0xA18055D8


#18		
#19			(* THEN *)
#20		
#21		
#22				(* IF epprom_q_cnt <> q_counter *)
#23				LD		epprom_q_cnt	{LNXT:4|-1|-1}
(*) UNDEF
A1805560  F8DF 7078		ldr r7, [pc, #+120] ; 0xA00017F0
A1805564  6838     		ldr r0, [r7]

#24				NE		q_counter	{LNXT:4|-1|-1}
(*) DWORD
A1805566  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F08
A180556A  683F     		ldr r7, [r7]
A180556C  42B8     		cmp r0, r7
A180556E  BF08 2000		eqmov r0, #0
A1805572  BF18 2001		nemov r0, #1

#25				JMPCN	$label1	{LNXT:4|4|5}
(-) BOOL
A1805576  2800     		cmp r0, #0
A1805578  D010     		beq #32 ; 0xA180559C


#26		
#27				(* THEN *)
#28		
#29					(* res_q := sysWriteParUINT(ADR(epprom_q_cnt), q_counter); *)
#30					ADR		epprom_q_cnt	{LNXT:4|5|-1}
(*) BOOL
A180557C  F8DF 005C		ldr r0, [pc, #+92] ; 0xA00017F0

#31					sysWriteParUINT		q_counter	{LNXT:4|5|-1}
(*) @DWORD
A1805580  4607     		mov r7, r0
A1805582  4638     		mov r0, r7
A1805584  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0003F08
A1805588  683F     		ldr r7, [r7]
A180558A  4639     		mov r1, r7
A180558C  F8DF 4090		ldr r4, [pc, #+144] ; 0x27D11
A1805590  F044 0401		orr r4, r4, #1
A1805594  47A0     		blx r4

#32					ST		res_q	{LNXT:4|5|-1}
(*) BOOL
A1805596  F8DF 707C		ldr r7, [pc, #+124] ; 0xA1A00104
A180559A  7038     		strb r0, [r7]

#33		
#34		$label1:
#35				(* END_IF *)
#36		
#37		
#38				(* IF epprom_kw_cnt <> kw_counter *)
#39				LD		epprom_kw_cnt	{LNXT:5|-1|-1}
(*) UNDEF
A180559C  F8DF 7040		ldr r7, [pc, #+64] ; 0xA00017F8
A18055A0  6838     		ldr r0, [r7]

#40				NE		kw_counter	{LNXT:5|-1|-1}
(*) DWORD
A18055A2  F8DF 7040		ldr r7, [pc, #+64] ; 0xA0003F04
A18055A6  683F     		ldr r7, [r7]
A18055A8  42B8     		cmp r0, r7
A18055AA  BF08 2000		eqmov r0, #0
A18055AE  BF18 2001		nemov r0, #1

#41				JMPCN	$label2	{LNXT:5|5|1}
(-) BOOL
A18055B2  2800     		cmp r0, #0
A18055B4  D010     		beq #32 ; 0xA18055D8


#42		
#43				(* THEN *)
#44		
#45					(* res_kw := sysWriteParUINT(ADR(epprom_kw_cnt), kw_counter); *)
#46					ADR		epprom_kw_cnt	{LNXT:5|1|-1}
(*) BOOL
A18055B8  F8DF 0024		ldr r0, [pc, #+36] ; 0xA00017F8

#47					sysWriteParUINT		kw_counter	{LNXT:5|1|-1}
(*) @DWORD
A18055BC  4607     		mov r7, r0
A18055BE  4638     		mov r0, r7
A18055C0  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003F04
A18055C4  683F     		ldr r7, [r7]
A18055C6  4639     		mov r1, r7
A18055C8  F8DF 4054		ldr r4, [pc, #+84] ; 0x27D11
A18055CC  F044 0401		orr r4, r4, #1
A18055D0  47A0     		blx r4

#48					ST		res_kw	{LNXT:5|1|-1}
(*) BOOL
A18055D2  F8DF 7044		ldr r7, [pc, #+68] ; 0xA1A00105
A18055D6  7038     		strb r0, [r7]

A18055D8  E024     		b #72

A18055DC  FFFFFFFF		; 0xA00017F0
A18055E0  FFFFFFFF		; 0xA00017F8
A18055E4  FFFFFFFF		; 0xA0003F04
A18055E8  FFFFFFFF		; 0xA0003F08
A18055EC  A1804458		; 0xA1804458
A18055F0  A1804490		; 0xA1804490
A18055F4  A1A000E4		; 0xA1A000E4
A18055F8  A1A000EC		; 0xA1A000EC
A18055FC  A1A000F0		; 0xA1A000F0
A1805600  A1A000F4		; 0xA1A000F4
A1805604  A1A000F8		; 0xA1A000F8
A1805608  A1A00100		; 0xA1A00100
A180560C  A1A00101		; 0xA1A00101
A1805610  A1A00102		; 0xA1A00102
A1805614  A1A00104		; 0xA1A00104
A1805618  A1A00105		; 0xA1A00105
A180561C  00001388		; 0x00001388
A1805620  FFFFFFFF		; 0x00027D11

END_PROGRAM
**************************************************
	List program: sr_ATS_Ctrl
**************************************************

PROGRAM sr_ATS_Ctrl

        VAR
TON_StartUp_1 : TON;
TON_StartUp_2 : TON;
stopping_timer : TON;
downtimeIN : BOOL;
washing_timer : TON;
checkWashAndStart : CheckWashAndStart;
isRunningWash : BOOL;
onWash : BOOL := false;
time_sec : INT := 4000;
	END_VAR

END_PROGRAM

#0		{SRC:sr_ATS_Ctrl}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF i_pb_rem = 1 And
#5		Not Alarms.0 And 
#6		Not Alarms.3 And 
#7		Not Alarms.4 And 
#8		Not Alarms.5 And 
#9		Not Alarms.7 *)
#10			LD		Alarms.7	{LNXT:2|-1|-1}
(*) UNDEF
A1805624  F8DF 723C		ldr r7, [pc, #+572] ; 0xA0003F20
A1805628  8838     		ldrh r0, [r7]
A180562A  F3C0 10C0		ubfx r0, r0, #7, #1

#11			NOT	{LNXT:2|-1|-1}
(*) BOOL
A180562E  2800     		cmp r0, #0
A1805630  BF08 2001		eqmov r0, #1
A1805634  BF18 2000		nemov r0, #0

#12			AND(		Alarms.5	{LNXT:2|-1|-1}
(*) BOOL
A1805638  B082     		sub sp, sp, #8
A180563A  F8CD 0000		str r0, [sp]
A180563E  F8DF 7224		ldr r7, [pc, #+548] ; 0xA0003F20
A1805642  8838     		ldrh r0, [r7]
A1805644  F3C0 1040		ubfx r0, r0, #5, #1

#13			NOT	{LNXT:2|-1|-1}
(*) BOOL
A1805648  2800     		cmp r0, #0
A180564A  BF08 2001		eqmov r0, #1
A180564E  BF18 2000		nemov r0, #0

#14			AND(		Alarms.4	{LNXT:2|-1|-1}
(*) BOOL
A1805652  B082     		sub sp, sp, #8
A1805654  F8CD 0000		str r0, [sp]
A1805658  F8DF 7208		ldr r7, [pc, #+520] ; 0xA0003F20
A180565C  8838     		ldrh r0, [r7]
A180565E  F3C0 1000		ubfx r0, r0, #4, #1

#15			NOT	{LNXT:2|-1|-1}
(*) BOOL
A1805662  2800     		cmp r0, #0
A1805664  BF08 2001		eqmov r0, #1
A1805668  BF18 2000		nemov r0, #0

#16			AND(		Alarms.3	{LNXT:2|-1|-1}
(*) BOOL
A180566C  B082     		sub sp, sp, #8
A180566E  F8CD 0000		str r0, [sp]
A1805672  F8DF 71F0		ldr r7, [pc, #+496] ; 0xA0003F20
A1805676  8838     		ldrh r0, [r7]
A1805678  F3C0 00C0		ubfx r0, r0, #3, #1

#17			NOT	{LNXT:2|-1|-1}
(*) BOOL
A180567C  2800     		cmp r0, #0
A180567E  BF08 2001		eqmov r0, #1
A1805682  BF18 2000		nemov r0, #0

#18			AND(		Alarms.0	{LNXT:2|-1|-1}
(*) BOOL
A1805686  B082     		sub sp, sp, #8
A1805688  F8CD 0000		str r0, [sp]
A180568C  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA0003F20
A1805690  8838     		ldrh r0, [r7]
A1805692  F3C0 0000		ubfx r0, r0, #0, #1

#19			NOT	{LNXT:2|-1|-1}
(*) BOOL
A1805696  2800     		cmp r0, #0
A1805698  BF08 2001		eqmov r0, #1
A180569C  BF18 2000		nemov r0, #0

#20			AND(		i_pb_rem	{LNXT:2|-1|-1}
(*) BOOL
A18056A0  B082     		sub sp, sp, #8
A18056A2  F8CD 0000		str r0, [sp]
A18056A6  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA1A00042
A18056AA  F9B7 0000		ldrsh r0, [r7]

#21			EQ		1	{LNXT:2|-1|-1}
(*) INT
A18056AE  2801     		cmp r0, #1
A18056B0  BF18 2000		nemov r0, #0
A18056B4  BF08 2001		eqmov r0, #1

#22			)	{LNXT:2|-1|-1}
(*) BOOL
A18056B8  4607     		mov r7, r0
A18056BA  F8DD 0000		ldr r0, [sp]
A18056BE  B002     		add sp, sp, #8
A18056C0  4038     		and r0, r0, r7

#23			)	{LNXT:2|-1|-1}
(*) BOOL
A18056C2  4607     		mov r7, r0
A18056C4  F8DD 0000		ldr r0, [sp]
A18056C8  B002     		add sp, sp, #8
A18056CA  4038     		and r0, r0, r7

#24			)	{LNXT:2|-1|-1}
(*) BOOL
A18056CC  4607     		mov r7, r0
A18056CE  F8DD 0000		ldr r0, [sp]
A18056D2  B002     		add sp, sp, #8
A18056D4  4038     		and r0, r0, r7

#25			)	{LNXT:2|-1|-1}
(*) BOOL
A18056D6  4607     		mov r7, r0
A18056D8  F8DD 0000		ldr r0, [sp]
A18056DC  B002     		add sp, sp, #8
A18056DE  4038     		and r0, r0, r7

#26			)	{LNXT:2|-1|-1}
(*) BOOL
A18056E0  4607     		mov r7, r0
A18056E2  F8DD 0000		ldr r0, [sp]
A18056E6  B002     		add sp, sp, #8
A18056E8  4038     		and r0, r0, r7

#27			JMPCN	$label0	{LNXT:2|9|30}
(-) BOOL
A18056EA  2800     		cmp r0, #0
A18056EC  D05C     		beq #184 ; 0xA18057A8


#28		
#29			(* THEN *)
#30		
#31		
#32				(* IF CMD.0 *)
#33				LD		CMD.0	{LNXT:9|-1|-1}
(*) UNDEF
A18056F0  F8DF 7174		ldr r7, [pc, #+372] ; 0xA0003F22
A18056F4  8838     		ldrh r0, [r7]
A18056F6  F3C0 0000		ubfx r0, r0, #0, #1

#34				JMPCN	$label2	{LNXT:9|10|26}
(-) BOOL
A18056FA  2800     		cmp r0, #0
A18056FC  D04E     		beq #156 ; 0xA180579C


#35		
#36				(* THEN *)
#37		
#38					(* checkWashAndStart *)
#39					MOVE		o_val_close_fall,checkWashAndStart.o_val_close_fall_FB	{LNXT:10|-1|-1}
(*) BOOL
A1805700  F8DF 01DC		ldr r0, [pc, #+476] ; 0x100004AD
A1805704  F8DF 718C		ldr r7, [pc, #+396] ; 0xA1A000B4
A1805708  6038     		str r0, [r7]

#40					MOVE		o_val_close_R,checkWashAndStart.o_val_close_R_FB	{LNXT:11|-1|-1}
(*) BOOL^
A180570A  F8DF 01DC		ldr r0, [pc, #+476] ; 0x100004AF
A180570E  F8DF 717C		ldr r7, [pc, #+380] ; 0xA1A000AC
A1805712  6038     		str r0, [r7]

#41					MOVE		o_val_open_fall,checkWashAndStart.o_val_open_fall_FB	{LNXT:12|-1|-1}
(*) BOOL^
A1805714  F8DF 01C4		ldr r0, [pc, #+452] ; 0x100004AC
A1805718  F8DF 7174		ldr r7, [pc, #+372] ; 0xA1A000B0
A180571C  6038     		str r0, [r7]

#42					MOVE		o_val_open_R,checkWashAndStart.o_val_open_R_FB	{LNXT:13|-1|-1}
(*) BOOL^
A180571E  F8DF 01C4		ldr r0, [pc, #+452] ; 0x100004AE
A1805722  F8DF 7164		ldr r7, [pc, #+356] ; 0xA1A000A8
A1805726  6038     		str r0, [r7]

#43					MOVE		sv_washing,checkWashAndStart.sv_washing_FB	{LNXT:14|-1|-1}
(*) BOOL^
A1805728  F8DF 0140		ldr r0, [pc, #+320] ; 0xA0003F26
A180572C  F8DF 7154		ldr r7, [pc, #+340] ; 0xA1A000A4
A1805730  6038     		str r0, [r7]

#44					MOVE		q_start_ats,checkWashAndStart.q_start_ats_FB	{LNXT:15|-1|-1}
(*) BOOL^
A1805732  F8DF 01B8		ldr r0, [pc, #+440] ; 0x100004B3
A1805736  F8DF 7160		ldr r7, [pc, #+352] ; 0xA1A000B8
A180573A  6038     		str r0, [r7]

#45					MOVE		time_sec,checkWashAndStart.ep_time_wash_FB	{LNXT:16|-1|-1}
(*) BOOL^
A180573C  F8DF 0178		ldr r0, [pc, #+376] ; 0xA1A000D8
A1805740  F8DF 7158		ldr r7, [pc, #+344] ; 0xA1A000BC
A1805744  6038     		str r0, [r7]

#46					MOVE		i_val_state,checkWashAndStart.i_val_state_FB	{LNXT:17|-1|-1}
(*) INT^
A1805746  F8DF 0174		ldr r0, [pc, #+372] ; 0xA1A000DA
A180574A  F8DF 7154		ldr r7, [pc, #+340] ; 0xA1A000C0
A180574E  6038     		str r0, [r7]

#47					MOVE		di_val_open_state_fall,checkWashAndStart.di_val_open_state_fall_FB	{LNXT:18|-1|-1}
(*) INT^
A1805750  F8DF 016C		ldr r0, [pc, #+364] ; 0xA1A000DC
A1805754  F8DF 714C		ldr r7, [pc, #+332] ; 0xA1A000C4
A1805758  6038     		str r0, [r7]

#48					MOVE		di_val_close_state_fall,checkWashAndStart.di_val_close_state_fall_FB	{LNXT:19|-1|-1}
(*) INT^
A180575A  F8DF 0168		ldr r0, [pc, #+360] ; 0xA1A000DE
A180575E  F8DF 7148		ldr r7, [pc, #+328] ; 0xA1A000C8
A1805762  6038     		str r0, [r7]

#49					MOVE		di_val_open_state_R,checkWashAndStart.di_val_open_state_R_FB	{LNXT:20|-1|-1}
(*) INT^
A1805764  F8DF 0160		ldr r0, [pc, #+352] ; 0xA1A000E0
A1805768  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A000CC
A180576C  6038     		str r0, [r7]

#50					MOVE		di_val_close_state_R,checkWashAndStart.di_val_close_state_R_FB	{LNXT:21|-1|-1}
(*) INT^
A180576E  F8DF 0108		ldr r0, [pc, #+264] ; 0xA1A00041
A1805772  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A000D0
A1805776  6038     		str r0, [r7]

#51					MOVE		Alarms_Val,checkWashAndStart.Alarm_Val_FB	{LNXT:22|-1|-1}
(*) BOOL^
A1805778  F8DF 00F4		ldr r0, [pc, #+244] ; 0xA0003F28
A180577C  F8DF 7134		ldr r7, [pc, #+308] ; 0xA1A000D4
A1805780  6038     		str r0, [r7]

#52					CAL		checkWashAndStart	{LNXT:10|82|-1}
(*) WORD^
A1805782  E92D 0021		stmdb sp!, { r0, r5 }
A1805786  F8DF 50F8		ldr r5, [pc, #+248] ; 0xA1A00044
A180578A  F8DF 40E8		ldr r4, [pc, #+232] ; 0xA1804748
A180578E  F044 0401		orr r4, r4, #1
A1805792  47A0     		blx r4
A1805794  E8BD 0021		ldmia sp!, { r0, r5 }

#53					JMP		$label3	{LNXT:9|10|26}
(-) WORD^
A1805798  E004     		b #8 ; 0xA18057A4


#54		$label2:
#55		
#56				(* ELSE *)
#57		
#58					(* q_start_ats := False; *)
#59					MOVE		False,q_start_ats	{LNXT:26|82|-1}
(*) WORD^
A180579C  2000     		mov r0, #0 ; 0
A180579E  F8DF 714C		ldr r7, [pc, #+332] ; 0x100004B3
A18057A2  7038     		strb r0, [r7]

#60		
#61		$label3:
#62				(* END_IF *)
#63				JMP		$label1	{LNXT:2|9|30}
(-) BOOL
A18057A4  E00D     		b #26 ; 0xA18057C2


#64		$label0:
#65		
#66			(* ELSE *)
#67		
#68				(* CMD.0 := False; *)
#69				MOVE		False,CMD.0	{LNXT:30|31|-1}
(*) BOOL
A18057A8  2000     		mov r0, #0 ; 0
A18057AA  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA0003F22
A18057AE  F8B7 8000		ldrh r8, [r7]
A18057B2  F360 0800		bfi r8, r0, #0, #1
A18057B6  F8A7 8000		strh r8, [r7]

#70		
#71				(* q_start_ats := False; *)
#72				MOVE		False,q_start_ats	{LNXT:31|82|-1}
(*) WORD
A18057BA  2000     		mov r0, #0 ; 0
A18057BC  F8DF 712C		ldr r7, [pc, #+300] ; 0x100004B3
A18057C0  7038     		strb r0, [r7]

#73		
#74		$label1:
#75			(* END_IF *)
#76		
#77		
#78			(* IF q_start_ats *)
#79			LD		q_start_ats	{LNXT:82|-1|-1}
(*) UNDEF
A18057C2  F8DF 7128		ldr r7, [pc, #+296] ; 0x100004B3
A18057C6  7838     		ldrb r0, [r7]

#80			NOT	{LNXT:82|-1|-1}
(*) BOOL
A18057C8  2800     		cmp r0, #0
A18057CA  BF08 2001		eqmov r0, #1
A18057CE  BF18 2000		nemov r0, #0

#81			JMPCN	$label4	{LNXT:82|83|85}
(-) BOOL
A18057D2  2800     		cmp r0, #0
A18057D4  D006     		beq #12 ; 0xA18057E4


#82		
#83			(* THEN *)
#84		
#85				(* downtimeIN:=true; *)
#86				MOVE		true,downtimeIN	{LNXT:83|95|-1}
(*) BOOL
A18057D8  2001     		mov r0, #1 ; 1
A18057DA  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A000E2
A18057DE  7038     		strb r0, [r7]

#87				JMP		$label5	{LNXT:82|83|85}
(-) BOOL
A18057E0  E004     		b #8 ; 0xA18057EC


#88		$label4:
#89		
#90			(* ELSE *)
#91		
#92				(* downtimeIN:=false; *)
#93				MOVE		false,downtimeIN	{LNXT:85|95|-1}
(*) BOOL
A18057E4  2000     		mov r0, #0 ; 0
A18057E6  F8DF 70E4		ldr r7, [pc, #+228] ; 0xA1A000E2
A18057EA  7038     		strb r0, [r7]

#94		
#95		$label5:
#96			(* END_IF *)
#97		
#98			(* Alarms.2 := i_sns_door; *)
#99			MOVE		i_sns_door,Alarms.2	{LNXT:95|98|-1}
(*) BOOL
A18057EC  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A000E3
A18057F0  7838     		ldrb r0, [r7]
A18057F2  F8DF 7070		ldr r7, [pc, #+112] ; 0xA0003F20
A18057F6  F8B7 8000		ldrh r8, [r7]
A18057FA  F360 0882		bfi r8, r0, #2, #1
A18057FE  F8A7 8000		strh r8, [r7]

#100		
#101			(* Alarms.3 := i_rnpp; *)
#102			MOVE		i_rnpp,Alarms.3	{LNXT:98|104|-1}
(*) BOOL
A1805802  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A000E4
A1805806  7838     		ldrb r0, [r7]
A1805808  F8DF 7058		ldr r7, [pc, #+88] ; 0xA0003F20
A180580C  F8B7 8000		ldrh r8, [r7]
A1805810  F360 08C3		bfi r8, r0, #3, #1
A1805814  F8A7 8000		strh r8, [r7]

#103		
#104			(* Alarms.5 := i_no_alm_ats; *)
#105			MOVE		i_no_alm_ats,Alarms.5	{LNXT:104|145|-1}
(*) BOOL
A1805818  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA1A000E5
A180581C  7838     		ldrb r0, [r7]
A180581E  F8DF 7044		ldr r7, [pc, #+68] ; 0xA0003F20
A1805822  F8B7 8000		ldrh r8, [r7]
A1805826  F360 1845		bfi r8, r0, #5, #1
A180582A  F8A7 8000		strh r8, [r7]

#106		
#107		
#108			(* IF CMD.1 *)
#109			LD		CMD.1	{LNXT:145|-1|-1}
(*) UNDEF
A180582E  F8DF 7038		ldr r7, [pc, #+56] ; 0xA0003F22
A1805832  8838     		ldrh r0, [r7]
A1805834  F3C0 0040		ubfx r0, r0, #1, #1

#110			JMPCN	$label6	{LNXT:145|146|2}
(-) BOOL
A1805838  2800     		cmp r0, #0
A180583A  D00D     		beq #26 ; 0xA1805858


#111		
#112			(* THEN *)
#113		
#114				(* Alarms := 0; *)
#115				MOVE		0,Alarms	{LNXT:146|147|-1}
(*) BOOL
A180583E  2000     		mov r0, #0 ; 0
A1805840  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003F20
A1805844  8038     		strh r0, [r7]

#116		
#117				(* CMD.1 := False; *)
#118				MOVE		False,CMD.1	{LNXT:147|2|-1}
(*) WORD
A1805846  2000     		mov r0, #0 ; 0
A1805848  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0003F22
A180584C  F8B7 8000		ldrh r8, [r7]
A1805850  F360 0841		bfi r8, r0, #1, #1
A1805854  F8A7 8000		strh r8, [r7]

A1805858  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A180585C  F8DD E000		ldr lr, [sp]
A1805860  B002     		add sp, sp, #8

A1805862  4770     		bx lr

A1805864  FFFFFFFF		; 0xA0003F20
A1805868  FFFFFFFF		; 0xA0003F22
A180586C  FFFFFFFF		; 0xA0003F26
A1805870  FFFFFFFF		; 0xA0003F28
A1805874  A1804748		; 0xA1804748
A1805878  A1A00041		; 0xA1A00041
A180587C  A1A00042		; 0xA1A00042
A1805880  A1A00044		; 0xA1A00044
A1805884  A1A000A4		; 0xA1A000A4
A1805888  A1A000A8		; 0xA1A000A8
A180588C  A1A000AC		; 0xA1A000AC
A1805890  A1A000B0		; 0xA1A000B0
A1805894  A1A000B4		; 0xA1A000B4
A1805898  A1A000B8		; 0xA1A000B8
A180589C  A1A000BC		; 0xA1A000BC
A18058A0  A1A000C0		; 0xA1A000C0
A18058A4  A1A000C4		; 0xA1A000C4
A18058A8  A1A000C8		; 0xA1A000C8
A18058AC  A1A000CC		; 0xA1A000CC
A18058B0  A1A000D0		; 0xA1A000D0
A18058B4  A1A000D4		; 0xA1A000D4
A18058B8  A1A000D8		; 0xA1A000D8
A18058BC  A1A000DA		; 0xA1A000DA
A18058C0  A1A000DC		; 0xA1A000DC
A18058C4  A1A000DE		; 0xA1A000DE
A18058C8  A1A000E0		; 0xA1A000E0
A18058CC  A1A000E2		; 0xA1A000E2
A18058D0  A1A000E3		; 0xA1A000E3
A18058D4  A1A000E4		; 0xA1A000E4
A18058D8  A1A000E5		; 0xA1A000E5
A18058DC  FFFFFFFF		; 0x100004AC
A18058E0  FFFFFFFF		; 0x100004AD
A18058E4  FFFFFFFF		; 0x100004AE
A18058E8  FFFFFFFF		; 0x100004AF
A18058EC  FFFFFFFF		; 0x100004B3

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A18058F0  B082     		sub sp, sp, #8
A18058F2  F8CD E000		str lr, [sp]
A18058F6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18058FA  F8DF 70D0		ldr r7, [pc, #+208] ; 0x10000450
A18058FE  8838     		ldrh r0, [r7]
A1805900  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A00042
A1805904  8038     		strh r0, [r7]

A1805906  F8DF 70B4		ldr r7, [pc, #+180] ; 0x10000446
A180590A  8838     		ldrh r0, [r7]
A180590C  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A000DA
A1805910  8038     		strh r0, [r7]

A1805912  F8DF 70AC		ldr r7, [pc, #+172] ; 0x10000448
A1805916  8838     		ldrh r0, [r7]
A1805918  F8DF 7070		ldr r7, [pc, #+112] ; 0xA1A000DC
A180591C  8038     		strh r0, [r7]

A180591E  F8DF 70A4		ldr r7, [pc, #+164] ; 0x1000044A
A1805922  8838     		ldrh r0, [r7]
A1805924  F8DF 7068		ldr r7, [pc, #+104] ; 0xA1A000DE
A1805928  8038     		strh r0, [r7]

A180592A  F8DF 709C		ldr r7, [pc, #+156] ; 0x1000044C
A180592E  8838     		ldrh r0, [r7]
A1805930  F8DF 7060		ldr r7, [pc, #+96] ; 0xA1A000E0
A1805934  8038     		strh r0, [r7]

A1805936  F8DF 7070		ldr r7, [pc, #+112] ; 0x10000420
A180593A  7838     		ldrb r0, [r7]
A180593C  F8DF 7040		ldr r7, [pc, #+64] ; 0xA1A00041
A1805940  7038     		strb r0, [r7]

A1805942  F8DF 7068		ldr r7, [pc, #+104] ; 0x10000423
A1805946  7838     		ldrb r0, [r7]
A1805948  F8DF 704C		ldr r7, [pc, #+76] ; 0xA1A000E3
A180594C  7038     		strb r0, [r7]

A180594E  F8DF 7060		ldr r7, [pc, #+96] ; 0x10000424
A1805952  7838     		ldrb r0, [r7]
A1805954  F8DF 7044		ldr r7, [pc, #+68] ; 0xA1A000E4
A1805958  7038     		strb r0, [r7]

A180595A  F8DF 7058		ldr r7, [pc, #+88] ; 0x10000426
A180595E  7838     		ldrb r0, [r7]
A1805960  F8DF 703C		ldr r7, [pc, #+60] ; 0xA1A000E5
A1805964  7038     		strb r0, [r7]

A1805966  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000442
A180596A  8838     		ldrh r0, [r7]
A180596C  F8DF 7034		ldr r7, [pc, #+52] ; 0xA1A000EA
A1805970  8038     		strh r0, [r7]

A1805972  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805976  F8DD E000		ldr lr, [sp]
A180597A  B002     		add sp, sp, #8

A180597C  4770     		bx lr

A1805980  A1A00041		; 0xA1A00041
A1805984  A1A00042		; 0xA1A00042
A1805988  A1A000DA		; 0xA1A000DA
A180598C  A1A000DC		; 0xA1A000DC
A1805990  A1A000DE		; 0xA1A000DE
A1805994  A1A000E0		; 0xA1A000E0
A1805998  A1A000E3		; 0xA1A000E3
A180599C  A1A000E4		; 0xA1A000E4
A18059A0  A1A000E5		; 0xA1A000E5
A18059A4  A1A000EA		; 0xA1A000EA
A18059A8  FFFFFFFF		; 0x10000420
A18059AC  FFFFFFFF		; 0x10000423
A18059B0  FFFFFFFF		; 0x10000424
A18059B4  FFFFFFFF		; 0x10000426
A18059B8  FFFFFFFF		; 0x10000442
A18059BC  FFFFFFFF		; 0x10000446
A18059C0  FFFFFFFF		; 0x10000448
A18059C4  FFFFFFFF		; 0x1000044A
A18059C8  FFFFFFFF		; 0x1000044C
A18059CC  FFFFFFFF		; 0x10000450


*** OUTPUT:
A18059D0  B082     		sub sp, sp, #8
A18059D2  F8CD E000		str lr, [sp]
A18059D6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18059DA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18059DE  F8DD E000		ldr lr, [sp]
A18059E2  B002     		add sp, sp, #8

A18059E4  4770     		bx lr



**************************************************
	Task Timed init code
**************************************************

A18059E6  B082     		sub sp, sp, #8
A18059E8  F8CD E000		str lr, [sp]
A18059EC  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

Var init: V::SR_ATS_CTRL.TIME_SEC = 4000
A18059F0  F8DF 0018		ldr r0, [pc, #+24] ; 0xFA0
A18059F4  F8DF 7010		ldr r7, [pc, #+16] ; 0xA1A000D8
A18059F8  8038     		strh r0, [r7]

A18059FA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18059FE  F8DD E000		ldr lr, [sp]
A1805A02  B002     		add sp, sp, #8

A1805A04  4770     		bx lr

A1805A08  A1A000D8		; 0xA1A000D8
A1805A0C  00000FA0		; 0x00000FA0



**************************************************
	Global init code
**************************************************

A1805A20  B082     		sub sp, sp, #8
A1805A22  F8CD E000		str lr, [sp]
A1805A26  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805A2A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805A2E  F8DD E000		ldr lr, [sp]
A1805A32  B002     		add sp, sp, #8

A1805A34  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

A1805A36  B082     		sub sp, sp, #8
A1805A38  F8CD E000		str lr, [sp]
A1805A3C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805A40  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805A44  F8DD E000		ldr lr, [sp]
A1805A48  B002     		add sp, sp, #8

A1805A4A  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000A1800000h
End code area:            		00000000A1805EECh
Code size:                		00005EECh

Start local data area:    		00000000A1A00000h
End local data area:      		00000000A1A00106h
Local data size:          		00000106h

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                B2A6B857
DEBUG MEMO ID:                          A180B976
FULL MEMO ID:                           0000FF2D
********************************************
