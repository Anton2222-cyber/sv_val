***********************************************************************
*
*	CODE GENERATION LISTING FOR: sw37
*	COMPILER VERSION: 6.0.0.52
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
A1804420  FB90 F3F1		sdiv r3, r0, r1
A1804424  4359     		mul r1, r1, r3
A1804426  EBC1 0000		rsb r0, r1, r0
A180442A  4770     		bx lr

$$MOD_U:
A180442C  FBB0 F3F1		udiv r3, r0, r1
A1804430  4359     		mul r1, r1, r3
A1804432  EBC1 0000		rsb r0, r1, r0
A1804436  4770     		bx lr

**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"<HTML>The output Q will remain FALSE as long as the input variable CLK is FALSE.<br>
As soon as CLK returns TRUE, Q will first return TRUE.<br><br>
This means each time the function is called up, Q will return FALSE until CLK has falling edge followed by an rising edge.<br><br>
<img src= r_trig.png>" }

        VAR_INPUT
clk : BOOL;	{ DE:"Input for edge detection" }
	END_VAR

        VAR_OUTPUT
q : BOOL;	{ DE:"Raising edge output" }
	END_VAR

        VAR
m : BOOL := FALSE;
	END_VAR

END_FUNCTION_BLOCK

A1804438  E92D 4040		stmdb sp!, { r6, lr }
A180443C  462E     		mov r6, r5

#0		{SRC:R_TRIG}
#1		
#2			LD		clk
(*) UNDEF
A180443E  F8DF 7028		ldr r7, [pc, #+40] ; 0x1
A1804442  5DF0     		ldrb r0, [r6, +r7]

#3			ANDN	m
(*) BOOL
A1804444  7837     		ldrb r7, [r6]
A1804446  2F00     		cmp r7, #0
A1804448  BF08 2701		eqmov r7, #1
A180444C  BF18 2700		nemov r7, #0
A1804450  4038     		and r0, r0, r7

#4			ST		q
(*) BOOL
A1804452  F8DF 7018		ldr r7, [pc, #+24] ; 0x2
A1804456  55F0     		strb r0, [r6, +r7]

#5		
#6			LD		clk
(*) UNDEF
A1804458  F8DF 700C		ldr r7, [pc, #+12] ; 0x1
A180445C  5DF0     		ldrb r0, [r6, +r7]

#7			ST		m
(-) BOOL
A180445E  7030     		strb r0, [r6]

A1804460  E8BD 4040		ldmia sp!, { r6, lr }

A1804464  4770     		bx lr

A1804468  00000001		; 0x00000001
A180446C  00000002		; 0x00000002


Frame allocation (hex):

	0000 bit  0: VAR m
	0001 bit  0: VAR clk
	0002 bit  0: VAR q

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

A1804470  E92D 4040		stmdb sp!, { r6, lr }
A1804474  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
A1804476  F8DF 7084		ldr r7, [pc, #+132] ; 0x4
A180447A  5DF0     		ldrb r0, [r6, +r7]

#5			JMPCN	lReset
(-) BOOL
A180447C  2800     		cmp r0, #0
A180447E  D031     		beq #98 ; 0xA18044E4


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
A1804482  F8DF 7080		ldr r7, [pc, #+128] ; 0xC
A1804486  5DF0     		ldrb r0, [r6, +r7]

#9			RETC
#10			
(-) BOOL
A1804488  2800     		cmp r0, #0
A180448A  D134     		bne #104 ; 0xA18044F6


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
A180448E  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
A1804490  2800     		cmp r0, #0
A1804492  BF18 2000		nemov r0, #0
A1804496  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
A180449A  2800     		cmp r0, #0
A180449C  D004     		beq #8 ; 0xA18044A8


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
A18044A0  F8DF 7068		ldr r7, [pc, #+104] ; 0x1000052C
A18044A4  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
A18044A6  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
A18044A8  F8DF 7060		ldr r7, [pc, #+96] ; 0x1000052C
A18044AC  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
A18044AE  6837     		ldr r7, [r6]
A18044B0  1BC0     		sub r0, r0, r7

#25			ST		ET
(*) UDINT
A18044B2  F8DF 7054		ldr r7, [pc, #+84] ; 0x10
A18044B6  51F0     		str r0, [r6, +r7]

#26			GE		PT
(*) UDINT
A18044B8  F8DF 7044		ldr r7, [pc, #+68] ; 0x8
A18044BC  59F7     		ldr r7, [r6, +r7]
A18044BE  42B8     		cmp r0, r7
A18044C0  BF38 2000		lomov r0, #0
A18044C4  BF28 2001		hsmov r0, #1

#27			ST		Q
(*) BOOL
A18044C8  F8DF 7038		ldr r7, [pc, #+56] ; 0xC
A18044CC  55F0     		strb r0, [r6, +r7]

#28			RETCN
#29		
(-) BOOL
A18044CE  2800     		cmp r0, #0
A18044D0  D011     		beq #34 ; 0xA18044F6


#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
A18044D4  F8DF 7028		ldr r7, [pc, #+40] ; 0x8
A18044D8  59F0     		ldr r0, [r6, +r7]

#32			ST		ET
(*) UDINT
A18044DA  F8DF 702C		ldr r7, [pc, #+44] ; 0x10
A18044DE  51F0     		str r0, [r6, +r7]

#33			RET
#34		
(-) UDINT
A18044E0  E009     		b #18 ; 0xA18044F6


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
A18044E4  2000     		mov r0, #0 ; 0

#39			ST		ET
(*) USINT
A18044E6  F8DF 7020		ldr r7, [pc, #+32] ; 0x10
A18044EA  51F0     		str r0, [r6, +r7]

#40			ST		timStart
(-) UDINT
A18044EC  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
A18044EE  2000     		mov r0, #0 ; 0

#42			ST		Q
(*) BOOL
A18044F0  F8DF 7010		ldr r7, [pc, #+16] ; 0xC
A18044F4  55F0     		strb r0, [r6, +r7]

A18044F6  E8BD 4040		ldmia sp!, { r6, lr }

A18044FA  4770     		bx lr

A18044FC  00000004		; 0x00000004
A1804500  00000008		; 0x00000008
A1804504  0000000C		; 0x0000000C
A1804508  00000010		; 0x00000010
A180450C  FFFFFFFF		; 0x1000052C


Frame allocation (hex):

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: CheckWashAndStart
**************************************************

FUNCTION_BLOCK CheckWashAndStart

        VAR_IN_OUT
sv_washing_FB : BOOL^;
o_val_open_R_FB : BOOL^;
o_val_close_R_FB : BOOL^;
o_val_open_fall_FB : BOOL^;
o_val_close_fall_FB : BOOL^;
q_start_ats_FB : BOOL^;
ep_time_wash_FB : INT^;
	END_VAR

        VAR_OUTPUT
is_running_wash : BOOL;
	END_VAR

        VAR
washing_timer : TON;	{ DE:"локальний FB таймера" }
	END_VAR

END_FUNCTION_BLOCK

A1804510  E92D 4040		stmdb sp!, { r6, lr }
A1804514  462E     		mov r6, r5

#0		{SRC:CheckWashAndStart}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF sv_washing_FB *)
#5			LD		sv_washing_FB	{LNXT:1|-1|-1}
(*) UNDEF
A1804516  F8DF 7110		ldr r7, [pc, #+272] ; 0x18
A180451A  F856 C007		ldr r12, [r6, +r7]
A180451E  F89C 0000		ldrb r0, [r12]

#6			JMPCN	$label0	{LNXT:1|2|23}
(-) BOOL
A1804522  2800     		cmp r0, #0
A1804524  D064     		beq #200 ; 0xA18045F0


#7		
#8			(* THEN *)
#9		
#10				(* is_running_wash :=true; *)
#11				MOVE		true,is_running_wash	{LNXT:2|3|-1}
(*) BOOL
A1804528  2001     		mov r0, #1 ; 1
A180452A  F8DF 70F8		ldr r7, [pc, #+248] ; 0x14
A180452E  55F0     		strb r0, [r6, +r7]

#12		
#13				(* o_val_close_R_FB:=true; *)
#14				MOVE		true,o_val_close_R_FB	{LNXT:3|4|-1}
(*) BOOL
A1804530  2001     		mov r0, #1 ; 1
A1804532  F8DF 70FC		ldr r7, [pc, #+252] ; 0x20
A1804536  F856 C007		ldr r12, [r6, +r7]
A180453A  F88C 0000		strb r0, [r12]

#15		
#16				(* o_val_open_fall_FB:=true; *)
#17				MOVE		true,o_val_open_fall_FB	{LNXT:4|5|-1}
(*) BOOL
A180453E  2001     		mov r0, #1 ; 1
A1804540  F8DF 70F0		ldr r7, [pc, #+240] ; 0x24
A1804544  F856 C007		ldr r12, [r6, +r7]
A1804548  F88C 0000		strb r0, [r12]

#18		
#19				(* q_start_ats_FB:=true; *)
#20				MOVE		true,q_start_ats_FB	{LNXT:5|8|-1}
(*) BOOL
A180454C  2001     		mov r0, #1 ; 1
A180454E  F8DF 70EC		ldr r7, [pc, #+236] ; 0x2C
A1804552  F856 C007		ldr r12, [r6, +r7]
A1804556  F88C 0000		strb r0, [r12]

#21		
#22				(* washing_timer *)
#23				MOVE		sv_washing_FB,washing_timer.IN	{LNXT:8|-1|-1}
(*) BOOL
A180455A  F8DF 70CC		ldr r7, [pc, #+204] ; 0x18
A180455E  F856 C007		ldr r12, [r6, +r7]
A1804562  F89C 0000		ldrb r0, [r12]
A1804566  F8DF 70B0		ldr r7, [pc, #+176] ; 0x4
A180456A  55F0     		strb r0, [r6, +r7]

#24				MOVE		ep_time_wash_FB,washing_timer.PT	{LNXT:8|-1|-1}
(*) BOOL
A180456C  F8DF 70D0		ldr r7, [pc, #+208] ; 0x30
A1804570  F856 C007		ldr r12, [r6, +r7]
A1804574  F9BC 0000		ldrsh r0, [r12]
A1804578  F8DF 70A0		ldr r7, [pc, #+160] ; 0x8
A180457C  51F0     		str r0, [r6, +r7]

#25				CAL		washing_timer	{LNXT:8|10|-1}
(*) UDINT
A180457E  E92D 0021		stmdb sp!, { r0, r5 }
A1804582  4635     		mov r5, r6
A1804584  F8DF 408C		ldr r4, [pc, #+140] ; 0xA1804470
A1804588  F044 0401		orr r4, r4, #1
A180458C  47A0     		blx r4
A180458E  E8BD 0021		ldmia sp!, { r0, r5 }

#26		
#27		
#28				(* IF washing_timer.Q *)
#29				LD		washing_timer.Q	{LNXT:10|-1|-1}
(*) UNDEF
A1804592  F8DF 708C		ldr r7, [pc, #+140] ; 0xC
A1804596  5DF0     		ldrb r0, [r6, +r7]

#30				JMPCN	$label2	{LNXT:10|11|28}
(-) BOOL
A1804598  2800     		cmp r0, #0
A180459A  D027     		beq #78 ; 0xA18045EC


#31		
#32				(* THEN *)
#33		
#34					(* o_val_close_R_FB:=false; *)
#35					MOVE		false,o_val_close_R_FB	{LNXT:11|12|-1}
(*) BOOL
A180459E  2000     		mov r0, #0 ; 0
A18045A0  F8DF 708C		ldr r7, [pc, #+140] ; 0x20
A18045A4  F856 C007		ldr r12, [r6, +r7]
A18045A8  F88C 0000		strb r0, [r12]

#36		
#37					(* o_val_open_fall_FB:=false; *)
#38					MOVE		false,o_val_open_fall_FB	{LNXT:12|14|-1}
(*) BOOL
A18045AC  2000     		mov r0, #0 ; 0
A18045AE  F8DF 7084		ldr r7, [pc, #+132] ; 0x24
A18045B2  F856 C007		ldr r12, [r6, +r7]
A18045B6  F88C 0000		strb r0, [r12]

#39		
#40					(* o_val_open_R_FB:=true; *)
#41					MOVE		true,o_val_open_R_FB	{LNXT:14|15|-1}
(*) BOOL
A18045BA  2001     		mov r0, #1 ; 1
A18045BC  F8DF 706C		ldr r7, [pc, #+108] ; 0x1C
A18045C0  F856 C007		ldr r12, [r6, +r7]
A18045C4  F88C 0000		strb r0, [r12]

#42		
#43					(* o_val_close_fall_FB:=true; *)
#44					MOVE		true,o_val_close_fall_FB	{LNXT:15|17|-1}
(*) BOOL
A18045C8  2001     		mov r0, #1 ; 1
A18045CA  F8DF 706C		ldr r7, [pc, #+108] ; 0x28
A18045CE  F856 C007		ldr r12, [r6, +r7]
A18045D2  F88C 0000		strb r0, [r12]

#45		
#46					(* is_running_wash :=false; *)
#47					MOVE		false,is_running_wash	{LNXT:17|18|-1}
(*) BOOL
A18045D6  2000     		mov r0, #0 ; 0
A18045D8  F8DF 7048		ldr r7, [pc, #+72] ; 0x14
A18045DC  55F0     		strb r0, [r6, +r7]

#48		
#49					(* sv_washing_FB:=false; *)
#50					MOVE		false,sv_washing_FB	{LNXT:18|28|-1}
(*) BOOL
A18045DE  2000     		mov r0, #0 ; 0
A18045E0  F8DF 7044		ldr r7, [pc, #+68] ; 0x18
A18045E4  F856 C007		ldr r12, [r6, +r7]
A18045E8  F88C 0000		strb r0, [r12]

#51		
#52		$label2:
#53				(* END_IF *)
#54				JMP		$label1	{LNXT:1|2|23}
(-) BOOL
A18045EC  E007     		b #14 ; 0xA18045FE


#55		$label0:
#56		
#57			(* ELSE *)
#58		
#59				(* q_start_ats_FB:=true; *)
#60				MOVE		true,q_start_ats_FB	{LNXT:23|28|-1}
(*) BOOL
A18045F0  2001     		mov r0, #1 ; 1
A18045F2  F8DF 7048		ldr r7, [pc, #+72] ; 0x2C
A18045F6  F856 C007		ldr r12, [r6, +r7]
A18045FA  F88C 0000		strb r0, [r12]

#61		
#62		$label1:
#63			(* END_IF *)
#64		
#65			(* sv_washing_FB:=false; *)
#66			MOVE		false,sv_washing_FB	{LNXT:28|-1|-1}
(*) BOOL
A18045FE  2000     		mov r0, #0 ; 0
A1804600  F8DF 7024		ldr r7, [pc, #+36] ; 0x18
A1804604  F856 C007		ldr r12, [r6, +r7]
A1804608  F88C 0000		strb r0, [r12]

A180460C  E8BD 4040		ldmia sp!, { r6, lr }

A1804610  4770     		bx lr

A1804614  A1804470		; 0xA1804470
A1804618  00000004		; 0x00000004
A180461C  00000008		; 0x00000008
A1804620  0000000C		; 0x0000000C
A1804624  00000014		; 0x00000014
A1804628  00000018		; 0x00000018
A180462C  0000001C		; 0x0000001C
A1804630  00000020		; 0x00000020
A1804634  00000024		; 0x00000024
A1804638  00000028		; 0x00000028
A180463C  0000002C		; 0x0000002C
A1804640  00000030		; 0x00000030


Frame allocation (hex):

	0000       : FB washing_timer
	0014 bit  0: VAR is_running_wash
	0018       : VAR sv_washing_FB
	001C       : VAR o_val_open_R_FB
	0020       : VAR o_val_close_R_FB
	0024       : VAR o_val_open_fall_FB
	0028       : VAR o_val_close_fall_FB
	002C       : VAR q_start_ats_FB
	0030       : VAR ep_time_wash_FB

END_FUNCTION_BLOCK
**************************************************
	List program: ATS_mdb
**************************************************

PROGRAM ATS_mdb

        VAR
res_eta_lcr : UINT;
resp_eta_lcr : ARRAY[0..3] OF INT;
res : INT;
xTON : TON;
	END_VAR

END_PROGRAM

A1804650  B082     		sub sp, sp, #8
A1804652  F8CD E000		str lr, [sp]
A1804656  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ATS_mdb}
#1		(*$WAITSWITCH$*)
#2		
#3			(* res := sysMbMRTU_FC03(	addr := 1, 
#4											base := 257, // 256
#5											no := 4, 
#6											object := ADR(resp_eta_lcr), 
#7											timeout := 200); *)
#8			ADR		resp_eta_lcr	{LNXT:2|8|-1}
(*) UDINT
A180465A  F8DF 0510		ldr r0, [pc, #+1296] ; 0xA1A0000C

#9			ST		$$TMP0	{LNXT:2|8|-1}
(*) @INT
A180465E  F8DF 751C		ldr r7, [pc, #+1308] ; 0xA1A00014
A1804662  6038     		str r0, [r7]

#10			LDP0		1	{LNXT:2|8|-1}
(-) @INT
#11			sysMbMRTU_FC03		257, 4, $$TMP0, 200	{LNXT:2|8|-1}
(*) @INT
A1804664  B082     		sub sp, sp, #8
A1804666  2001     		mov r0, #1 ; 1
A1804668  F8DF 7570		ldr r7, [pc, #+1392] ; 0x101
A180466C  4639     		mov r1, r7
A180466E  2704     		mov r7, #4 ; 4
A1804670  463A     		mov r2, r7
A1804672  F8DF 7508		ldr r7, [pc, #+1288] ; 0xA1A00014
A1804676  683B     		ldr r3, [r7]
A1804678  27C8     		mov r7, #200 ; 200
A180467A  F8CD 7000		str r7, [sp]
A180467E  F8DF 4564		ldr r4, [pc, #+1380] ; 0x241DB
A1804682  F044 0401		orr r4, r4, #1
A1804686  47A0     		blx r4
A1804688  B002     		add sp, sp, #8

#12			ST		res	{LNXT:2|8|-1}
(*) UINT
A180468A  F8DF 74F4		ldr r7, [pc, #+1268] ; 0xA1A00018
A180468E  8038     		strh r0, [r7]

#13		
#14			(* ATS22_DUT.Ready 	:= to_bool(resp_eta_lcr[0] And 16#01); *)
#15			LD		resp_eta_lcr[0]	{LNXT:8|9|-1}
(*) UNDEF
A1804690  F8DF 74D8		ldr r7, [pc, #+1240] ; 0xA1A0000C
A1804694  F9B7 0000		ldrsh r0, [r7]

#16			AND		16#01	{LNXT:8|9|-1}
(*) INT
A1804698  2701     		mov r7, #1 ; 1
A180469A  4038     		and r0, r0, r7

#17			to_bool	{LNXT:8|9|-1}
(*) INT
A180469C  2800     		cmp r0, #0
A180469E  BF18 2001		nemov r0, #1
A18046A2  BF08 2000		eqmov r0, #0

#18			ST		ATS22_DUT.Ready	{LNXT:8|9|-1}
(*) BOOL
A18046A6  F8DF 74E4		ldr r7, [pc, #+1252] ; 0xA1A0001C
A18046AA  7038     		strb r0, [r7]

#19		
#20			(* ATS22_DUT.On 		:= to_bool(resp_eta_lcr[0] And 16#02); *)
#21			LD		resp_eta_lcr[0]	{LNXT:9|10|-1}
(*) UNDEF
A18046AC  F8DF 74BC		ldr r7, [pc, #+1212] ; 0xA1A0000C
A18046B0  F9B7 0000		ldrsh r0, [r7]

#22			AND		16#02	{LNXT:9|10|-1}
(*) INT
A18046B4  2702     		mov r7, #2 ; 2
A18046B6  4038     		and r0, r0, r7

#23			to_bool	{LNXT:9|10|-1}
(*) INT
A18046B8  2800     		cmp r0, #0
A18046BA  BF18 2001		nemov r0, #1
A18046BE  BF08 2000		eqmov r0, #0

#24			ST		ATS22_DUT.On	{LNXT:9|10|-1}
(*) BOOL
A18046C2  F8DF 74CC		ldr r7, [pc, #+1228] ; 0xA1A0001D
A18046C6  7038     		strb r0, [r7]

#25		
#26			(* ATS22_DUT.Trip 		:= to_bool(resp_eta_lcr[0] And 16#04); *)
#27			LD		resp_eta_lcr[0]	{LNXT:10|11|-1}
(*) UNDEF
A18046C8  F8DF 74A0		ldr r7, [pc, #+1184] ; 0xA1A0000C
A18046CC  F9B7 0000		ldrsh r0, [r7]

#28			AND		16#04	{LNXT:10|11|-1}
(*) INT
A18046D0  2704     		mov r7, #4 ; 4
A18046D2  4038     		and r0, r0, r7

#29			to_bool	{LNXT:10|11|-1}
(*) INT
A18046D4  2800     		cmp r0, #0
A18046D6  BF18 2001		nemov r0, #1
A18046DA  BF08 2000		eqmov r0, #0

#30			ST		ATS22_DUT.Trip	{LNXT:10|11|-1}
(*) BOOL
A18046DE  F8DF 74B4		ldr r7, [pc, #+1204] ; 0xA1A0001E
A18046E2  7038     		strb r0, [r7]

#31		
#32			(* ATS22_DUT.Warning 	:= to_bool(resp_eta_lcr[0] And 16#08); *)
#33			LD		resp_eta_lcr[0]	{LNXT:11|12|-1}
(*) UNDEF
A18046E4  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A0000C
A18046E8  F9B7 0000		ldrsh r0, [r7]

#34			AND		16#08	{LNXT:11|12|-1}
(*) INT
A18046EC  2708     		mov r7, #8 ; 8
A18046EE  4038     		and r0, r0, r7

#35			to_bool	{LNXT:11|12|-1}
(*) INT
A18046F0  2800     		cmp r0, #0
A18046F2  BF18 2001		nemov r0, #1
A18046F6  BF08 2000		eqmov r0, #0

#36			ST		ATS22_DUT.Warning	{LNXT:11|12|-1}
(*) BOOL
A18046FA  F8DF 749C		ldr r7, [pc, #+1180] ; 0xA1A0001F
A18046FE  7038     		strb r0, [r7]

#37		
#38			(* ATS22_DUT.LI3 		:= to_bool(resp_eta_lcr[0] And 16#20); *)
#39			LD		resp_eta_lcr[0]	{LNXT:12|13|-1}
(*) UNDEF
A1804700  F8DF 7468		ldr r7, [pc, #+1128] ; 0xA1A0000C
A1804704  F9B7 0000		ldrsh r0, [r7]

#40			AND		16#20	{LNXT:12|13|-1}
(*) INT
A1804708  2720     		mov r7, #32 ; 32
A180470A  4038     		and r0, r0, r7

#41			to_bool	{LNXT:12|13|-1}
(*) INT
A180470C  2800     		cmp r0, #0
A180470E  BF18 2001		nemov r0, #1
A1804712  BF08 2000		eqmov r0, #0

#42			ST		ATS22_DUT.LI3	{LNXT:12|13|-1}
(*) BOOL
A1804716  F8DF 7484		ldr r7, [pc, #+1156] ; 0xA1A00020
A180471A  7038     		strb r0, [r7]

#43		
#44			(* ATS22_DUT.LI2 		:= to_bool(resp_eta_lcr[0] And 16#40); *)
#45			LD		resp_eta_lcr[0]	{LNXT:13|14|-1}
(*) UNDEF
A180471C  F8DF 744C		ldr r7, [pc, #+1100] ; 0xA1A0000C
A1804720  F9B7 0000		ldrsh r0, [r7]

#46			AND		16#40	{LNXT:13|14|-1}
(*) INT
A1804724  2740     		mov r7, #64 ; 64
A1804726  4038     		and r0, r0, r7

#47			to_bool	{LNXT:13|14|-1}
(*) INT
A1804728  2800     		cmp r0, #0
A180472A  BF18 2001		nemov r0, #1
A180472E  BF08 2000		eqmov r0, #0

#48			ST		ATS22_DUT.LI2	{LNXT:13|14|-1}
(*) BOOL
A1804732  F8DF 746C		ldr r7, [pc, #+1132] ; 0xA1A00021
A1804736  7038     		strb r0, [r7]

#49		
#50			(* ATS22_DUT.LI1 		:= to_bool(resp_eta_lcr[0] And 16#80); *)
#51			LD		resp_eta_lcr[0]	{LNXT:14|17|-1}
(*) UNDEF
A1804738  F8DF 7430		ldr r7, [pc, #+1072] ; 0xA1A0000C
A180473C  F9B7 0000		ldrsh r0, [r7]

#52			AND		16#80	{LNXT:14|17|-1}
(*) INT
A1804740  2780     		mov r7, #128 ; 128
A1804742  4038     		and r0, r0, r7

#53			to_bool	{LNXT:14|17|-1}
(*) INT
A1804744  2800     		cmp r0, #0
A1804746  BF18 2001		nemov r0, #1
A180474A  BF08 2000		eqmov r0, #0

#54			ST		ATS22_DUT.LI1	{LNXT:14|17|-1}
(*) BOOL
A180474E  F8DF 7454		ldr r7, [pc, #+1108] ; 0xA1A00022
A1804752  7038     		strb r0, [r7]

#55		
#56			(* ATS_State_bits.0 := ATS22_DUT.Ready; *)
#57			MOVE		ATS22_DUT.Ready,ATS_State_bits.0	{LNXT:17|18|-1}
(*) BOOL
A1804754  F8DF 7434		ldr r7, [pc, #+1076] ; 0xA1A0001C
A1804758  7838     		ldrb r0, [r7]
A180475A  F8DF 73E8		ldr r7, [pc, #+1000] ; 0xA0003F10
A180475E  F8B7 8000		ldrh r8, [r7]
A1804762  F360 0800		bfi r8, r0, #0, #1
A1804766  F8A7 8000		strh r8, [r7]

#58		
#59			(* ATS_State_bits.1 := ATS22_DUT.On And i_run_ats; *)
#60			LD		ATS22_DUT.On	{LNXT:18|19|-1}
(*) UNDEF
A180476A  F8DF 7424		ldr r7, [pc, #+1060] ; 0xA1A0001D
A180476E  7838     		ldrb r0, [r7]

#61			AND		i_run_ats	{LNXT:18|19|-1}
(*) BOOL
A1804770  F8DF 7414		ldr r7, [pc, #+1044] ; 0xA1A0001B
A1804774  783F     		ldrb r7, [r7]
A1804776  4038     		and r0, r0, r7

#62			ST		ATS_State_bits.1	{LNXT:18|19|-1}
(*) BOOL
A1804778  F8DF 73C8		ldr r7, [pc, #+968] ; 0xA0003F10
A180477C  F8B7 8000		ldrh r8, [r7]
A1804780  F360 0841		bfi r8, r0, #1, #1
A1804784  F8A7 8000		strh r8, [r7]

#63		
#64			(* ATS_State_bits.2 := ATS22_DUT.Trip Or Not i_no_alm_ats ; *)
#65			LD		i_no_alm_ats	{LNXT:19|20|-1}
(*) UNDEF
A1804788  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001A
A180478C  7838     		ldrb r0, [r7]

#66			NOT	{LNXT:19|20|-1}
(*) BOOL
A180478E  2800     		cmp r0, #0
A1804790  BF08 2001		eqmov r0, #1
A1804794  BF18 2000		nemov r0, #0

#67			OR		ATS22_DUT.Trip	{LNXT:19|20|-1}
(*) BOOL
A1804798  F8DF 73F8		ldr r7, [pc, #+1016] ; 0xA1A0001E
A180479C  783F     		ldrb r7, [r7]
A180479E  4338     		orr r0, r0, r7

#68			ST		ATS_State_bits.2	{LNXT:19|20|-1}
(*) BOOL
A18047A0  F8DF 73A0		ldr r7, [pc, #+928] ; 0xA0003F10
A18047A4  F8B7 8000		ldrh r8, [r7]
A18047A8  F360 0882		bfi r8, r0, #2, #1
A18047AC  F8A7 8000		strh r8, [r7]

#69		
#70			(* ATS_State_bits.3 := ATS22_DUT.Warning; *)
#71			MOVE		ATS22_DUT.Warning,ATS_State_bits.3	{LNXT:20|21|-1}
(*) BOOL
A18047B0  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A0001F
A18047B4  7838     		ldrb r0, [r7]
A18047B6  F8DF 738C		ldr r7, [pc, #+908] ; 0xA0003F10
A18047BA  F8B7 8000		ldrh r8, [r7]
A18047BE  F360 08C3		bfi r8, r0, #3, #1
A18047C2  F8A7 8000		strh r8, [r7]

#72		
#73			(* ATS_State_bits.4 := ATS22_DUT.Local; *)
#74			MOVE		ATS22_DUT.Local,ATS_State_bits.4	{LNXT:21|22|-1}
(*) BOOL
A18047C6  F8DF 73E4		ldr r7, [pc, #+996] ; 0xA1A00024
A18047CA  7838     		ldrb r0, [r7]
A18047CC  F8DF 7374		ldr r7, [pc, #+884] ; 0xA0003F10
A18047D0  F8B7 8000		ldrh r8, [r7]
A18047D4  F360 1804		bfi r8, r0, #4, #1
A18047D8  F8A7 8000		strh r8, [r7]

#75		
#76			(* ATS_State_bits.5 := ATS22_DUT.Ramping; *)
#77			MOVE		ATS22_DUT.Ramping,ATS_State_bits.5	{LNXT:22|23|-1}
(*) BOOL
A18047DC  F8DF 73D0		ldr r7, [pc, #+976] ; 0xA1A00025
A18047E0  7838     		ldrb r0, [r7]
A18047E2  F8DF 7360		ldr r7, [pc, #+864] ; 0xA0003F10
A18047E6  F8B7 8000		ldrh r8, [r7]
A18047EA  F360 1845		bfi r8, r0, #5, #1
A18047EE  F8A7 8000		strh r8, [r7]

#78		
#79			(* ATS_State_bits.6 := ATS22_DUT.LI1; *)
#80			MOVE		ATS22_DUT.LI1,ATS_State_bits.6	{LNXT:23|24|-1}
(*) BOOL
A18047F2  F8DF 73B0		ldr r7, [pc, #+944] ; 0xA1A00022
A18047F6  7838     		ldrb r0, [r7]
A18047F8  F8DF 7348		ldr r7, [pc, #+840] ; 0xA0003F10
A18047FC  F8B7 8000		ldrh r8, [r7]
A1804800  F360 1886		bfi r8, r0, #6, #1
A1804804  F8A7 8000		strh r8, [r7]

#81		
#82			(* ATS_State_bits.7 := ATS22_DUT.LI2; *)
#83			MOVE		ATS22_DUT.LI2,ATS_State_bits.7	{LNXT:24|25|-1}
(*) BOOL
A1804808  F8DF 7394		ldr r7, [pc, #+916] ; 0xA1A00021
A180480C  7838     		ldrb r0, [r7]
A180480E  F8DF 7334		ldr r7, [pc, #+820] ; 0xA0003F10
A1804812  F8B7 8000		ldrh r8, [r7]
A1804816  F360 18C7		bfi r8, r0, #7, #1
A180481A  F8A7 8000		strh r8, [r7]

#84		
#85			(* ATS_State_bits.8 := ATS22_DUT.LI3; *)
#86			MOVE		ATS22_DUT.LI3,ATS_State_bits.8	{LNXT:25|28|-1}
(*) BOOL
A180481E  F8DF 737C		ldr r7, [pc, #+892] ; 0xA1A00020
A1804822  7838     		ldrb r0, [r7]
A1804824  F8DF 731C		ldr r7, [pc, #+796] ; 0xA0003F10
A1804828  F8B7 8000		ldrh r8, [r7]
A180482C  F360 2808		bfi r8, r0, #8, #1
A1804830  F8A7 8000		strh r8, [r7]

#87		
#88			(* ATS_State_bits.9 := i_pb_loc; *)
#89			MOVE		i_pb_loc,ATS_State_bits.9	{LNXT:28|29|-1}
(*) BOOL
A1804834  F8DF 739C		ldr r7, [pc, #+924] ; 0xA1A00038
A1804838  F9B7 0000		ldrsh r0, [r7]
A180483C  F8DF 7304		ldr r7, [pc, #+772] ; 0xA0003F10
A1804840  B082     		sub sp, sp, #8
A1804842  F8CD 0000		str r0, [sp]
A1804846  2800     		cmp r0, #0
A1804848  BF08 2000		eqmov r0, #0
A180484C  BF18 2001		nemov r0, #1
A1804850  F8B7 8000		ldrh r8, [r7]
A1804854  F360 2849		bfi r8, r0, #9, #1
A1804858  F8A7 8000		strh r8, [r7]
A180485C  F8DD 0000		ldr r0, [sp]
A1804860  B002     		add sp, sp, #8

#90		
#91			(* ATS_State_bits.10 := i_pb_rem; *)
#92			MOVE		i_pb_rem,ATS_State_bits.10	{LNXT:29|31|-1}
(*) INT
A1804862  F8DF 7374		ldr r7, [pc, #+884] ; 0xA1A0003A
A1804866  F9B7 0000		ldrsh r0, [r7]
A180486A  F8DF 72D8		ldr r7, [pc, #+728] ; 0xA0003F10
A180486E  B082     		sub sp, sp, #8
A1804870  F8CD 0000		str r0, [sp]
A1804874  2800     		cmp r0, #0
A1804876  BF08 2000		eqmov r0, #0
A180487A  BF18 2001		nemov r0, #1
A180487E  F8B7 8000		ldrh r8, [r7]
A1804882  F360 288A		bfi r8, r0, #10, #1
A1804886  F8A7 8000		strh r8, [r7]
A180488A  F8DD 0000		ldr r0, [sp]
A180488E  B002     		add sp, sp, #8

#93		
#94		
#95			(* IF i_pb_loc AND not i_pb_rem *)
#96			LD		i_pb_rem	{LNXT:31|-1|-1}
(*) UNDEF
A1804890  F8DF 7344		ldr r7, [pc, #+836] ; 0xA1A0003A
A1804894  F9B7 0000		ldrsh r0, [r7]

#97			NOT	{LNXT:31|-1|-1}
(-) INT
A1804898  43C0     		mvn r0, r0

#98			AND(		i_pb_loc	{LNXT:31|-1|-1}
(*) INT
A180489A  B082     		sub sp, sp, #8
A180489C  F8CD 0000		str r0, [sp]
A18048A0  F8DF 7330		ldr r7, [pc, #+816] ; 0xA1A00038
A18048A4  F9B7 0000		ldrsh r0, [r7]

#99			NOT	{LNXT:31|-1|-1}
(-) INT
A18048A8  43C0     		mvn r0, r0

#100			)	{LNXT:31|-1|-1}
(*) INT
A18048AA  4607     		mov r7, r0
A18048AC  F8DD 0000		ldr r0, [sp]
A18048B0  B002     		add sp, sp, #8
A18048B2  4038     		and r0, r0, r7

#101			JMPCN	$label0	{LNXT:31|32|34}
(-) INT
A18048B4  2800     		cmp r0, #0
A18048B6  D009     		beq #18 ; 0xA18048CC


#102		
#103			(* THEN *)
#104		
#105				(* ATS_State_bits.11 := TRUE; *)
#106				MOVE		TRUE,ATS_State_bits.11	{LNXT:32|34|-1}
(*) INT
A18048BA  2001     		mov r0, #1 ; 1
A18048BC  F8DF 7284		ldr r7, [pc, #+644] ; 0xA0003F10
A18048C0  F8B7 8000		ldrh r8, [r7]
A18048C4  F360 28CB		bfi r8, r0, #11, #1
A18048C8  F8A7 8000		strh r8, [r7]

#107		
#108		$label0:
#109			(* END_IF *)
#110		
#111		
#112			(* IF i_pb_loc AND i_pb_rem *)
#113			LD		i_pb_loc	{LNXT:34|-1|-1}
(*) UNDEF
A18048CC  F8DF 7304		ldr r7, [pc, #+772] ; 0xA1A00038
A18048D0  F9B7 0000		ldrsh r0, [r7]

#114			NOT	{LNXT:34|-1|-1}
(-) INT
A18048D4  43C0     		mvn r0, r0

#115			AND		i_pb_rem	{LNXT:34|-1|-1}
(*) INT
A18048D6  F8DF 7300		ldr r7, [pc, #+768] ; 0xA1A0003A
A18048DA  F9B7 7000		ldrsh r7, [r7]
A18048DE  4038     		and r0, r0, r7

#116			JMPCN	$label1	{LNXT:34|35|37}
(-) INT
A18048E0  2800     		cmp r0, #0
A18048E2  D009     		beq #18 ; 0xA18048F8


#117		
#118			(* THEN *)
#119		
#120				(* ATS_State_bits.11 := FALSE; *)
#121				MOVE		FALSE,ATS_State_bits.11	{LNXT:35|37|-1}
(*) INT
A18048E6  2000     		mov r0, #0 ; 0
A18048E8  F8DF 7258		ldr r7, [pc, #+600] ; 0xA0003F10
A18048EC  F8B7 8000		ldrh r8, [r7]
A18048F0  F360 28CB		bfi r8, r0, #11, #1
A18048F4  F8A7 8000		strh r8, [r7]

#122		
#123		$label1:
#124			(* END_IF *)
#125		
#126		
#127			(* IF i_pb_loc AND not i_pb_rem *)
#128			LD		i_pb_rem	{LNXT:37|-1|-1}
(*) UNDEF
A18048F8  F8DF 72DC		ldr r7, [pc, #+732] ; 0xA1A0003A
A18048FC  F9B7 0000		ldrsh r0, [r7]

#129			NOT	{LNXT:37|-1|-1}
(-) INT
A1804900  43C0     		mvn r0, r0

#130			AND		i_pb_loc	{LNXT:37|-1|-1}
(*) INT
A1804902  F8DF 72D0		ldr r7, [pc, #+720] ; 0xA1A00038
A1804906  F9B7 7000		ldrsh r7, [r7]
A180490A  4038     		and r0, r0, r7

#131			JMPCN	$label2	{LNXT:37|38|43}
(-) INT
A180490C  2800     		cmp r0, #0
A180490E  D009     		beq #18 ; 0xA1804924


#132		
#133			(* THEN *)
#134		
#135				(* ATS_State_bits.11 := FALSE; *)
#136				MOVE		FALSE,ATS_State_bits.11	{LNXT:38|43|-1}
(*) INT
A1804912  2000     		mov r0, #0 ; 0
A1804914  F8DF 722C		ldr r7, [pc, #+556] ; 0xA0003F10
A1804918  F8B7 8000		ldrh r8, [r7]
A180491C  F360 28CB		bfi r8, r0, #11, #1
A1804920  F8A7 8000		strh r8, [r7]

#137		
#138		$label2:
#139			(* END_IF *)
#140		
#141			(* ATS22_DUT.EtaCurrent := to_byte(SHR(resp_eta_lcr[0] AND 16#3F00, 16#08) * 200 / 63); *)
#142			LD		resp_eta_lcr[0]	{LNXT:43|44|-1}
(*) UNDEF
A1804924  F8DF 7244		ldr r7, [pc, #+580] ; 0xA1A0000C
A1804928  F9B7 0000		ldrsh r0, [r7]

#143			AND		16#3F00	{LNXT:43|44|-1}
(*) INT
A180492C  F44F 577C		mov r7, #16128 ; 16128
A1804930  4038     		and r0, r0, r7

#144			SHR		16#08	{LNXT:43|44|-1}
(*) INT
A1804932  0A00     		lsr r0, r0, #8
A1804934  0400     		lsl r0, r0, #16
A1804936  0C00     		lsr r0, r0, #16

#145			MUL		200	{LNXT:43|44|-1}
(*) INT
A1804938  27C8     		mov r7, #200 ; 200
A180493A  4378     		mul r0, r0, r7

#146			DIV		63	{LNXT:43|44|-1}
(*) INT
A180493C  273F     		mov r7, #63 ; 63
A180493E  B082     		sub sp, sp, #8
A1804940  F8CD 1000		str r1, [sp]
A1804944  4639     		mov r1, r7
A1804946  FB90 F0F1		sdiv r0, r0, r1
A180494A  F8DD 1000		ldr r1, [sp]
A180494E  B002     		add sp, sp, #8

#147			to_byte	{LNXT:43|44|-1}
(-) INT
#148			ST		ATS22_DUT.EtaCurrent	{LNXT:43|44|-1}
(*) BYTE
A1804950  F8DF 7254		ldr r7, [pc, #+596] ; 0xA1A00023
A1804954  7038     		strb r0, [r7]

#149		
#150			(* ATS_Current_prsnt	 := ATS22_DUT.EtaCurrent; *)
#151			MOVE		ATS22_DUT.EtaCurrent,ATS_Current_prsnt	{LNXT:44|46|-1}
(*) BYTE
A1804956  F8DF 7250		ldr r7, [pc, #+592] ; 0xA1A00023
A180495A  7838     		ldrb r0, [r7]
A180495C  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA0003F12
A1804960  8038     		strh r0, [r7]

#152		
#153			(* ATS22_DUT.Local 	:= to_bool(resp_eta_lcr[0] And 16#4000); *)
#154			LD		resp_eta_lcr[0]	{LNXT:46|47|-1}
(*) UNDEF
A1804962  F8DF 7208		ldr r7, [pc, #+520] ; 0xA1A0000C
A1804966  F9B7 0000		ldrsh r0, [r7]

#155			AND		16#4000	{LNXT:46|47|-1}
(*) INT
A180496A  F44F 4780		mov r7, #16384 ; 16384
A180496E  4038     		and r0, r0, r7

#156			to_bool	{LNXT:46|47|-1}
(*) INT
A1804970  2800     		cmp r0, #0
A1804972  BF18 2001		nemov r0, #1
A1804976  BF08 2000		eqmov r0, #0

#157			ST		ATS22_DUT.Local	{LNXT:46|47|-1}
(*) BOOL
A180497A  F8DF 7230		ldr r7, [pc, #+560] ; 0xA1A00024
A180497E  7038     		strb r0, [r7]

#158		
#159			(* ATS22_DUT.Ramping 	:= to_bool(resp_eta_lcr[0] And 16#8000); *)
#160			LD		resp_eta_lcr[0]	{LNXT:47|49|-1}
(*) UNDEF
A1804980  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A0000C
A1804984  F9B7 0000		ldrsh r0, [r7]

#161			AND		16#8000	{LNXT:47|49|-1}
(*) INT
A1804988  F44F 4700		mov r7, #32768 ; 32768
A180498C  4038     		and r0, r0, r7

#162			to_bool	{LNXT:47|49|-1}
(*) INT
A180498E  2800     		cmp r0, #0
A1804990  BF18 2001		nemov r0, #1
A1804994  BF08 2000		eqmov r0, #0

#163			ST		ATS22_DUT.Ramping	{LNXT:47|49|-1}
(*) BOOL
A1804998  F8DF 7214		ldr r7, [pc, #+532] ; 0xA1A00025
A180499C  7038     		strb r0, [r7]

#164		
#165			(* ATS22_DUT.Lcr1 := resp_eta_lcr[1]; *)
#166			MOVE		resp_eta_lcr[1],ATS22_DUT.Lcr1	{LNXT:49|50|-1}
(*) BOOL
A180499E  F8DF 71D0		ldr r7, [pc, #+464] ; 0xA1A0000E
A18049A2  F9B7 0000		ldrsh r0, [r7]
A18049A6  F8DF 720C		ldr r7, [pc, #+524] ; 0xA1A00026
A18049AA  8038     		strh r0, [r7]

#167		
#168			(* ATS22_DUT.Lcr2 := resp_eta_lcr[2]; *)
#169			MOVE		resp_eta_lcr[2],ATS22_DUT.Lcr2	{LNXT:50|51|-1}
(*) INT
A18049AC  F8DF 71C4		ldr r7, [pc, #+452] ; 0xA1A00010
A18049B0  F9B7 0000		ldrsh r0, [r7]
A18049B4  F8DF 7200		ldr r7, [pc, #+512] ; 0xA1A00028
A18049B8  8038     		strh r0, [r7]

#170		
#171			(* ATS22_DUT.Lcr3 := resp_eta_lcr[3]; *)
#172			MOVE		resp_eta_lcr[3],ATS22_DUT.Lcr3	{LNXT:51|53|-1}
(*) INT
A18049BA  F8DF 71BC		ldr r7, [pc, #+444] ; 0xA1A00012
A18049BE  F9B7 0000		ldrsh r0, [r7]
A18049C2  F8DF 71F8		ldr r7, [pc, #+504] ; 0xA1A0002A
A18049C6  8038     		strh r0, [r7]

#173		
#174			(* ATS_Current_L1 := ATS22_DUT.Lcr1; *)
#175			MOVE		ATS22_DUT.Lcr1,ATS_Current_L1	{LNXT:53|54|-1}
(*) INT
A18049C8  F8DF 71E8		ldr r7, [pc, #+488] ; 0xA1A00026
A18049CC  F9B7 0000		ldrsh r0, [r7]
A18049D0  F8DF 7178		ldr r7, [pc, #+376] ; 0xA0003F14
A18049D4  8038     		strh r0, [r7]

#176		
#177			(* ATS_Current_L2 := ATS22_DUT.Lcr2; *)
#178			MOVE		ATS22_DUT.Lcr2,ATS_Current_L2	{LNXT:54|55|-1}
(*) INT
A18049D6  F8DF 71E0		ldr r7, [pc, #+480] ; 0xA1A00028
A18049DA  F9B7 0000		ldrsh r0, [r7]
A18049DE  F8DF 7170		ldr r7, [pc, #+368] ; 0xA0003F16
A18049E2  8038     		strh r0, [r7]

#179		
#180			(* ATS_Current_L3 := ATS22_DUT.Lcr3; *)
#181			MOVE		ATS22_DUT.Lcr3,ATS_Current_L3	{LNXT:55|57|-1}
(*) INT
A18049E4  F8DF 71D4		ldr r7, [pc, #+468] ; 0xA1A0002A
A18049E8  F9B7 0000		ldrsh r0, [r7]
A18049EC  F8DF 7164		ldr r7, [pc, #+356] ; 0xA0003F18
A18049F0  8038     		strh r0, [r7]

#182		
#183			(* res := sysMbMRTU_FC03(	addr := 1, 
#184											base := 261, // 260
#185											no := 1, 
#186											object := ADR(resp_eta_lcr), 
#187											timeout := 200); *)
#188			ADR		resp_eta_lcr	{LNXT:57|63|-1}
(*) INT
A18049F2  F8DF 0178		ldr r0, [pc, #+376] ; 0xA1A0000C

#189			ST		$$TMP0	{LNXT:57|63|-1}
(*) @INT
A18049F6  F8DF 7184		ldr r7, [pc, #+388] ; 0xA1A00014
A18049FA  6038     		str r0, [r7]

#190			LDP0		1	{LNXT:57|63|-1}
(-) @INT
#191			sysMbMRTU_FC03		261, 1, $$TMP0, 200	{LNXT:57|63|-1}
(*) @INT
A18049FC  B082     		sub sp, sp, #8
A18049FE  2001     		mov r0, #1 ; 1
A1804A00  F8DF 71DC		ldr r7, [pc, #+476] ; 0x105
A1804A04  4639     		mov r1, r7
A1804A06  2701     		mov r7, #1 ; 1
A1804A08  463A     		mov r2, r7
A1804A0A  F8DF 7170		ldr r7, [pc, #+368] ; 0xA1A00014
A1804A0E  683B     		ldr r3, [r7]
A1804A10  27C8     		mov r7, #200 ; 200
A1804A12  F8CD 7000		str r7, [sp]
A1804A16  F8DF 41CC		ldr r4, [pc, #+460] ; 0x241DB
A1804A1A  F044 0401		orr r4, r4, #1
A1804A1E  47A0     		blx r4
A1804A20  B002     		add sp, sp, #8

#192			ST		res	{LNXT:57|63|-1}
(*) UINT
A1804A22  F8DF 715C		ldr r7, [pc, #+348] ; 0xA1A00018
A1804A26  8038     		strh r0, [r7]

#193		
#194			(* ATS22_DUT.LcrVoltage	:= resp_eta_lcr[0]; *)
#195			MOVE		resp_eta_lcr[0],ATS22_DUT.LcrVoltage	{LNXT:63|64|-1}
(*) INT
A1804A28  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0000C
A1804A2C  F9B7 0000		ldrsh r0, [r7]
A1804A30  F8DF 718C		ldr r7, [pc, #+396] ; 0xA1A0002C
A1804A34  8038     		strh r0, [r7]

#196		
#197			(* ATS_Voltage := ATS22_DUT.LcrVoltage; *)
#198			MOVE		ATS22_DUT.LcrVoltage,ATS_Voltage	{LNXT:64|68|-1}
(*) INT
A1804A36  F8DF 7188		ldr r7, [pc, #+392] ; 0xA1A0002C
A1804A3A  F9B7 0000		ldrsh r0, [r7]
A1804A3E  F8DF 7128		ldr r7, [pc, #+296] ; 0xA0003F24
A1804A42  8038     		strh r0, [r7]

#199		
#200			(* res := sysMbMRTU_FC03(	addr := 1, 
#201											base := 280, // 279
#202											no := 1, 
#203											object := ADR(resp_eta_lcr), 
#204											timeout := 200); *)
#205			ADR		resp_eta_lcr	{LNXT:68|74|-1}
(*) INT
A1804A44  F8DF 0124		ldr r0, [pc, #+292] ; 0xA1A0000C

#206			ST		$$TMP0	{LNXT:68|74|-1}
(*) @INT
A1804A48  F8DF 7130		ldr r7, [pc, #+304] ; 0xA1A00014
A1804A4C  6038     		str r0, [r7]

#207			LDP0		1	{LNXT:68|74|-1}
(-) @INT
#208			sysMbMRTU_FC03		280, 1, $$TMP0, 200	{LNXT:68|74|-1}
(*) @INT
A1804A4E  B082     		sub sp, sp, #8
A1804A50  2001     		mov r0, #1 ; 1
A1804A52  F44F 718C		mov r1, #280 ; 280
A1804A56  2701     		mov r7, #1 ; 1
A1804A58  463A     		mov r2, r7
A1804A5A  F8DF 7120		ldr r7, [pc, #+288] ; 0xA1A00014
A1804A5E  683B     		ldr r3, [r7]
A1804A60  27C8     		mov r7, #200 ; 200
A1804A62  F8CD 7000		str r7, [sp]
A1804A66  F8DF 417C		ldr r4, [pc, #+380] ; 0x241DB
A1804A6A  F044 0401		orr r4, r4, #1
A1804A6E  47A0     		blx r4
A1804A70  B002     		add sp, sp, #8

#209			ST		res	{LNXT:68|74|-1}
(*) UINT
A1804A72  F8DF 710C		ldr r7, [pc, #+268] ; 0xA1A00018
A1804A76  8038     		strh r0, [r7]

#210		
#211			(* ATS22_DUT.LastFLT 	:= resp_eta_lcr[0]; *)
#212			MOVE		resp_eta_lcr[0],ATS22_DUT.LastFLT	{LNXT:74|75|-1}
(*) INT
A1804A78  F8DF 70F0		ldr r7, [pc, #+240] ; 0xA1A0000C
A1804A7C  F9B7 0000		ldrsh r0, [r7]
A1804A80  F8DF 7140		ldr r7, [pc, #+320] ; 0xA1A0002E
A1804A84  8038     		strh r0, [r7]

#213		
#214			(* ATS_Last_FaultCode := ATS22_DUT.LastFLT; *)
#215			MOVE		ATS22_DUT.LastFLT,ATS_Last_FaultCode	{LNXT:75|78|-1}
(*) INT
A1804A86  F8DF 713C		ldr r7, [pc, #+316] ; 0xA1A0002E
A1804A8A  F9B7 0000		ldrsh r0, [r7]
A1804A8E  F8DF 70C8		ldr r7, [pc, #+200] ; 0xA0003F1A
A1804A92  8038     		strh r0, [r7]

#216		
#217			(* res := sysMbMRTU_FC03(	addr := 1, 
#218											base := 274, // 273
#219											no := 3, 
#220											object := ADR(resp_eta_lcr), 
#221											timeout := 200); *)
#222			ADR		resp_eta_lcr	{LNXT:78|84|-1}
(*) INT
A1804A94  F8DF 00D4		ldr r0, [pc, #+212] ; 0xA1A0000C

#223			ST		$$TMP0	{LNXT:78|84|-1}
(*) @INT
A1804A98  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A00014
A1804A9C  6038     		str r0, [r7]

#224			LDP0		1	{LNXT:78|84|-1}
(-) @INT
#225			sysMbMRTU_FC03		274, 3, $$TMP0, 200	{LNXT:78|84|-1}
(*) @INT
A1804A9E  B082     		sub sp, sp, #8
A1804AA0  2001     		mov r0, #1 ; 1
A1804AA2  F44F 7189		mov r1, #274 ; 274
A1804AA6  2703     		mov r7, #3 ; 3
A1804AA8  463A     		mov r2, r7
A1804AAA  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA1A00014
A1804AAE  683B     		ldr r3, [r7]
A1804AB0  27C8     		mov r7, #200 ; 200
A1804AB2  F8CD 7000		str r7, [sp]
A1804AB6  F8DF 412C		ldr r4, [pc, #+300] ; 0x241DB
A1804ABA  F044 0401		orr r4, r4, #1
A1804ABE  47A0     		blx r4
A1804AC0  B002     		add sp, sp, #8

#226			ST		res	{LNXT:78|84|-1}
(*) UINT
A1804AC2  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA1A00018
A1804AC6  8038     		strh r0, [r7]

#227		
#228		
#229			(* IF res <> 0 *)
#230			LD		res	{LNXT:84|-1|-1}
(*) UNDEF
A1804AC8  F8DF 70B4		ldr r7, [pc, #+180] ; 0xA1A00018
A1804ACC  F9B7 0000		ldrsh r0, [r7]

#231			NE		0	{LNXT:84|-1|-1}
(*) INT
A1804AD0  2800     		cmp r0, #0
A1804AD2  BF08 2000		eqmov r0, #0
A1804AD6  BF18 2001		nemov r0, #1

#232			JMPCN	$label3	{LNXT:84|84|86}
(-) BOOL
A1804ADA  2800     		cmp r0, #0
A1804ADC  D009     		beq #18 ; 0xA1804AF2


#233		
#234			(* THEN *)
#235		
#236				(* Alarms.6 := true; *)
#237				MOVE		true,Alarms.6	{LNXT:84|86|-1}
(*) BOOL
A1804AE0  2001     		mov r0, #1 ; 1
A1804AE2  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F20
A1804AE6  F8B7 8000		ldrh r8, [r7]
A1804AEA  F360 1886		bfi r8, r0, #6, #1
A1804AEE  F8A7 8000		strh r8, [r7]

#238		
#239		$label3:
#240			(* END_IF *)
#241		
#242			(* ATS22_DUT.MotRunTime 		:= resp_eta_lcr[0]; *)
#243			MOVE		resp_eta_lcr[0],ATS22_DUT.MotRunTime	{LNXT:86|87|-1}
(*) WORD
A1804AF2  F8DF 7078		ldr r7, [pc, #+120] ; 0xA1A0000C
A1804AF6  F9B7 0000		ldrsh r0, [r7]
A1804AFA  F8DF 70CC		ldr r7, [pc, #+204] ; 0xA1A00030
A1804AFE  8038     		strh r0, [r7]

#244		
#245			(* ATS22_DUT.MotStartCnt 		:= resp_eta_lcr[1]; *)
#246			MOVE		resp_eta_lcr[1],ATS22_DUT.MotStartCnt	{LNXT:87|88|-1}
(*) INT
A1804B00  F8DF 706C		ldr r7, [pc, #+108] ; 0xA1A0000E
A1804B04  F9B7 0000		ldrsh r0, [r7]
A1804B08  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A00032
A1804B0C  8038     		strh r0, [r7]

#247		
#248			(* ATS22_DUT.MotLastStartTime 	:= resp_eta_lcr[2]; *)
#249			MOVE		resp_eta_lcr[2],ATS22_DUT.MotLastStartTime	{LNXT:88|90|-1}
(*) INT
A1804B0E  F8DF 7064		ldr r7, [pc, #+100] ; 0xA1A00010
A1804B12  F9B7 0000		ldrsh r0, [r7]
A1804B16  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A00034
A1804B1A  8038     		strh r0, [r7]

#250		
#251			(* ATS_RunTime_Hors	:= to_word(ATS22_DUT.MotRunTime); *)
#252			LDP0		ATS22_DUT.MotRunTime	{LNXT:90|91|-1}
(-) INT
#253			to_word	{LNXT:90|91|-1}
(*) INT
A1804B1C  F8DF 70A8		ldr r7, [pc, #+168] ; 0xA1A00030
A1804B20  F9B7 0000		ldrsh r0, [r7]

#254			ST		ATS_RunTime_Hors	{LNXT:90|91|-1}
(*) WORD
A1804B24  F8DF 7034		ldr r7, [pc, #+52] ; 0xA0003F1C
A1804B28  8038     		strh r0, [r7]

#255		
#256			(* ATS_OnTimes_Cnt		:= to_word(ATS22_DUT.MotStartCnt); *)
#257			LDP0		ATS22_DUT.MotStartCnt	{LNXT:91|2|-1}
(-) WORD
#258			to_word	{LNXT:91|2|-1}
(*) WORD
A1804B2A  F8DF 70A0		ldr r7, [pc, #+160] ; 0xA1A00032
A1804B2E  F9B7 0000		ldrsh r0, [r7]

#259			ST		ATS_OnTimes_Cnt	{LNXT:91|2|-1}
(*) WORD
A1804B32  F8DF 702C		ldr r7, [pc, #+44] ; 0xA0003F1E
A1804B36  8038     		strh r0, [r7]

A1804B38  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804B3C  F8DD E000		ldr lr, [sp]
A1804B40  B002     		add sp, sp, #8

A1804B42  4770     		bx lr

A1804B44  FFFFFFFF		; 0xA0003F10
A1804B48  FFFFFFFF		; 0xA0003F12
A1804B4C  FFFFFFFF		; 0xA0003F14
A1804B50  FFFFFFFF		; 0xA0003F16
A1804B54  FFFFFFFF		; 0xA0003F18
A1804B58  FFFFFFFF		; 0xA0003F1A
A1804B5C  FFFFFFFF		; 0xA0003F1C
A1804B60  FFFFFFFF		; 0xA0003F1E
A1804B64  FFFFFFFF		; 0xA0003F20
A1804B68  FFFFFFFF		; 0xA0003F24
A1804B6C  A1A0000C		; 0xA1A0000C
A1804B70  A1A0000E		; 0xA1A0000E
A1804B74  A1A00010		; 0xA1A00010
A1804B78  A1A00012		; 0xA1A00012
A1804B7C  A1A00014		; 0xA1A00014
A1804B80  A1A00018		; 0xA1A00018
A1804B84  A1A0001A		; 0xA1A0001A
A1804B88  A1A0001B		; 0xA1A0001B
A1804B8C  A1A0001C		; 0xA1A0001C
A1804B90  A1A0001D		; 0xA1A0001D
A1804B94  A1A0001E		; 0xA1A0001E
A1804B98  A1A0001F		; 0xA1A0001F
A1804B9C  A1A00020		; 0xA1A00020
A1804BA0  A1A00021		; 0xA1A00021
A1804BA4  A1A00022		; 0xA1A00022
A1804BA8  A1A00023		; 0xA1A00023
A1804BAC  A1A00024		; 0xA1A00024
A1804BB0  A1A00025		; 0xA1A00025
A1804BB4  A1A00026		; 0xA1A00026
A1804BB8  A1A00028		; 0xA1A00028
A1804BBC  A1A0002A		; 0xA1A0002A
A1804BC0  A1A0002C		; 0xA1A0002C
A1804BC4  A1A0002E		; 0xA1A0002E
A1804BC8  A1A00030		; 0xA1A00030
A1804BCC  A1A00032		; 0xA1A00032
A1804BD0  A1A00034		; 0xA1A00034
A1804BD4  A1A00038		; 0xA1A00038
A1804BD8  A1A0003A		; 0xA1A0003A
A1804BDC  00000101		; 0x00000101
A1804BE0  00000105		; 0x00000105
A1804BE4  FFFFFFFF		; 0x000241DB

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1804BE8  B082     		sub sp, sp, #8
A1804BEA  F8CD E000		str lr, [sp]
A1804BEE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804BF2  F8DF 7050		ldr r7, [pc, #+80] ; 0x10000427
A1804BF6  7838     		ldrb r0, [r7]
A1804BF8  F8DF 7038		ldr r7, [pc, #+56] ; 0xA1A0001B
A1804BFC  7038     		strb r0, [r7]

A1804BFE  F8DF 7040		ldr r7, [pc, #+64] ; 0x10000426
A1804C02  7838     		ldrb r0, [r7]
A1804C04  F8DF 7028		ldr r7, [pc, #+40] ; 0xA1A0001A
A1804C08  7038     		strb r0, [r7]

A1804C0A  F8DF 703C		ldr r7, [pc, #+60] ; 0x1000044E
A1804C0E  8838     		ldrh r0, [r7]
A1804C10  F8DF 7024		ldr r7, [pc, #+36] ; 0xA1A00038
A1804C14  8038     		strh r0, [r7]

A1804C16  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000450
A1804C1A  8838     		ldrh r0, [r7]
A1804C1C  F8DF 701C		ldr r7, [pc, #+28] ; 0xA1A0003A
A1804C20  8038     		strh r0, [r7]

A1804C22  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804C26  F8DD E000		ldr lr, [sp]
A1804C2A  B002     		add sp, sp, #8

A1804C2C  4770     		bx lr

A1804C30  A1A0001A		; 0xA1A0001A
A1804C34  A1A0001B		; 0xA1A0001B
A1804C38  A1A00038		; 0xA1A00038
A1804C3C  A1A0003A		; 0xA1A0003A
A1804C40  FFFFFFFF		; 0x10000426
A1804C44  FFFFFFFF		; 0x10000427
A1804C48  FFFFFFFF		; 0x1000044E
A1804C4C  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1804C50  B082     		sub sp, sp, #8
A1804C52  F8CD E000		str lr, [sp]
A1804C56  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804C5A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804C5E  F8DD E000		ldr lr, [sp]
A1804C62  B002     		add sp, sp, #8

A1804C64  4770     		bx lr



**************************************************
	Task Background init code
**************************************************

A1804C66  B082     		sub sp, sp, #8
A1804C68  F8CD E000		str lr, [sp]
A1804C6C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804C70  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804C74  F8DD E000		ldr lr, [sp]
A1804C78  B002     		add sp, sp, #8

A1804C7A  4770     		bx lr

**************************************************
	List program: sr_init_counters
**************************************************

PROGRAM sr_init_counters

END_PROGRAM

A1804C90  B082     		sub sp, sp, #8
A1804C92  F8CD E000		str lr, [sp]
A1804C96  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_init_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_counter 	:= epprom_kw_cnt; *)
#4			MOVE		epprom_kw_cnt,kw_counter	{LNXT:1|2|-1}
(*) UDINT
A1804C9A  F8DF 7028		ldr r7, [pc, #+40] ; 0xA00017F8
A1804C9E  6838     		ldr r0, [r7]
A1804CA0  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003F04
A1804CA4  6038     		str r0, [r7]

#5		
#6			(* q_counter	:= epprom_q_cnt; *)
#7			MOVE		epprom_q_cnt,q_counter	{LNXT:2|1|-1}
(*) DWORD
A1804CA6  F8DF 7018		ldr r7, [pc, #+24] ; 0xA00017F0
A1804CAA  6838     		ldr r0, [r7]
A1804CAC  F8DF 701C		ldr r7, [pc, #+28] ; 0xA0003F08
A1804CB0  6038     		str r0, [r7]

A1804CB2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804CB6  F8DD E000		ldr lr, [sp]
A1804CBA  B002     		add sp, sp, #8

A1804CBC  4770     		bx lr

A1804CC0  FFFFFFFF		; 0xA00017F0
A1804CC4  FFFFFFFF		; 0xA00017F8
A1804CC8  FFFFFFFF		; 0xA0003F04
A1804CCC  FFFFFFFF		; 0xA0003F08

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1804CD0  4770     		bx lr


*** OUTPUT:
A1804CD2  4770     		bx lr



**************************************************
	Task Boot init code
**************************************************

A1804CD4  B082     		sub sp, sp, #8
A1804CD6  F8CD E000		str lr, [sp]
A1804CDA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804CDE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804CE2  F8DD E000		ldr lr, [sp]
A1804CE6  B002     		add sp, sp, #8

A1804CE8  4770     		bx lr

**************************************************
	List program: ParCheck
**************************************************

PROGRAM ParCheck

END_PROGRAM

A1804D00  B082     		sub sp, sp, #8
A1804D02  F8CD E000		str lr, [sp]
A1804D06  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:ParCheck}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Par_POLI AND 16#fc00) <> 2048 *)
#5			LD		Par_POLI	{LNXT:2|-1|-1}
(*) UNDEF
A1804D0A  F8DF 7034		ldr r7, [pc, #+52] ; 0x10000182
A1804D0E  8838     		ldrh r0, [r7]

#6			AND		16#fc00	{LNXT:2|-1|-1}
(*) UINT
A1804D10  F44F 477C		mov r7, #64512 ; 64512
A1804D14  4038     		and r0, r0, r7

#7			NE		2048	{LNXT:2|-1|-1}
(*) UINT
A1804D16  F44F 6700		mov r7, #2048 ; 2048
A1804D1A  42B8     		cmp r0, r7
A1804D1C  BF08 2000		eqmov r0, #0
A1804D20  BF18 2001		nemov r0, #1

#8			JMPCN	$label0	{LNXT:2|3|2}
(-) BOOL
A1804D24  2800     		cmp r0, #0
A1804D26  D005     		beq #10 ; 0xA1804D34


#9		
#10			(* THEN *)
#11		
#12				(* WHILE TRUE *)
#13		$label1:
#14				LD		TRUE	{LNXT:3|-1|-1}
(-) UNDEF
A1804D2A  2001     		mov r0, #1 ; 1

#15				JMPCN		$label2	{LNXT:3|2|2}
(-) BOOL
A1804D2C  2800     		cmp r0, #0
A1804D2E  D001     		beq #2 ; 0xA1804D34


#16		
#17				(* DO *)
#18					JMP		$label1	{LNXT:3|2|2}
(-) BOOL
A1804D32  E7FA     		b #-12 ; 0xA1804D2A

A1804D34  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804D38  F8DD E000		ldr lr, [sp]
A1804D3C  B002     		add sp, sp, #8

A1804D3E  4770     		bx lr

A1804D40  FFFFFFFF		; 0x10000182

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1804D44  4770     		bx lr


*** OUTPUT:
A1804D46  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

A1804D48  B082     		sub sp, sp, #8
A1804D4A  F8CD E000		str lr, [sp]
A1804D4E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804D52  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804D56  F8DD E000		ldr lr, [sp]
A1804D5A  B002     		add sp, sp, #8

A1804D5C  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

A1804D70  B082     		sub sp, sp, #8
A1804D72  F8CD E000		str lr, [sp]
A1804D76  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 3303890192; *)
#4			MOVE		3303890192,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
A1804D7A  F8DF 7040		ldr r7, [pc, #+64] ; 0xC4ED5D10
A1804D7E  4638     		mov r0, r7
A1804D80  F8DF 7030		ldr r7, [pc, #+48] ; 0xA1A0003C
A1804D84  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
A1804D86  F8DF 0028		ldr r0, [pc, #+40] ; 0xA1800100

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
A1804D8A  4607     		mov r7, r0
A1804D8C  4638     		mov r0, r7
A1804D8E  2715     		mov r7, #21 ; 21
A1804D90  4639     		mov r1, r7
A1804D92  F8DF 402C		ldr r4, [pc, #+44] ; 0x1398D
A1804D96  F044 0401		orr r4, r4, #1
A1804D9A  47A0     		blx r4

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
A1804D9C  F8DF 7018		ldr r7, [pc, #+24] ; 0xA1A00040
A1804DA0  7038     		strb r0, [r7]

A1804DA2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804DA6  F8DD E000		ldr lr, [sp]
A1804DAA  B002     		add sp, sp, #8

A1804DAC  4770     		bx lr

A1804DB0  A1800100		; 0xA1800100
A1804DB4  A1A0003C		; 0xA1A0003C
A1804DB8  A1A00040		; 0xA1A00040
A1804DBC  C4ED5D10		; 0xC4ED5D10
A1804DC0  FFFFFFFF		; 0x0001398D

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A1804DC4  4770     		bx lr


*** OUTPUT:
A1804DC6  4770     		bx lr



**************************************************
	Task Serv init code
**************************************************

A1804DC8  B082     		sub sp, sp, #8
A1804DCA  F8CD E000		str lr, [sp]
A1804DCE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1804DD2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1804DD6  F8DD E000		ldr lr, [sp]
A1804DDA  B002     		add sp, sp, #8

A1804DDC  4770     		bx lr

**************************************************
	List program: sr_pressure
**************************************************

PROGRAM sr_pressure

        VAR
tmp_test : INT;
	END_VAR

END_PROGRAM

A1804DF0  B082     		sub sp, sp, #8
A1804DF2  F8CD E000		str lr, [sp]
A1804DF6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:sr_pressure}
#1		(*$WAITSWITCH$*)
#2		
#3			(* Pressure := to_int(to_real(i_adc_pressure )/10); *)
#4			LDP0		i_adc_pressure	{LNXT:2|2|-1}
(-) UDINT
#5			to_real	{LNXT:2|2|-1}
(*) UDINT
A1804DFA  F8DF 705C		ldr r7, [pc, #+92] ; 0xA1A000AC
A1804DFE  F9B7 0000		ldrsh r0, [r7]
A1804E02  F8DF 405C		ldr r4, [pc, #+92] ; 0x111EB
A1804E06  F044 0401		orr r4, r4, #1
A1804E0A  47A0     		blx r4

#6			DIV		10	{LNXT:2|2|-1}
(*) REAL
A1804E0C  270A     		mov r7, #10 ; 10
A1804E0E  B082     		sub sp, sp, #8
A1804E10  F8CD 0000		str r0, [sp]
A1804E14  4638     		mov r0, r7
A1804E16  F8DF 4044		ldr r4, [pc, #+68] ; 0x111DB
A1804E1A  F044 0401		orr r4, r4, #1
A1804E1E  47A0     		blx r4
A1804E20  4607     		mov r7, r0
A1804E22  F8DD 0000		ldr r0, [sp]
A1804E26  B002     		add sp, sp, #8
A1804E28  B082     		sub sp, sp, #8
A1804E2A  F8CD 1000		str r1, [sp]
A1804E2E  4639     		mov r1, r7
A1804E30  F8DF 4034		ldr r4, [pc, #+52] ; 0x1124B
A1804E34  F044 0401		orr r4, r4, #1
A1804E38  47A0     		blx r4
A1804E3A  F8DD 1000		ldr r1, [sp]
A1804E3E  B002     		add sp, sp, #8

#7			to_int	{LNXT:2|2|-1}
(*) REAL
A1804E40  F8DF 4020		ldr r4, [pc, #+32] ; 0x1120B
A1804E44  F044 0401		orr r4, r4, #1
A1804E48  47A0     		blx r4

#8			ST		Pressure	{LNXT:2|2|-1}
(*) INT
A1804E4A  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F00
A1804E4E  8038     		strh r0, [r7]

A1804E50  E00C     		b #24

A1804E54  FFFFFFFF		; 0xA0003F00
A1804E58  A1A000AC		; 0xA1A000AC
A1804E5C  FFFFFFFF		; 0x000111DB
A1804E60  FFFFFFFF		; 0x000111EB
A1804E64  FFFFFFFF		; 0x0001120B
A1804E68  FFFFFFFF		; 0x0001124B

END_PROGRAM
**************************************************
	List program: sr_counters
**************************************************

PROGRAM sr_counters

        VAR
kw_trig : R_TRIG;
q_trig : R_TRIG;
kw_pulses_per_acs : UINT;
q_pulses_per_acs : UINT;
test_freq : UDINT;
	END_VAR

END_PROGRAM

#0		{SRC:sr_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* kw_pulses_per_acs 	:= 8000; *)
#4			MOVE		8000,kw_pulses_per_acs	{LNXT:2|3|-1}
(*) UDINT
A1804E6C  F44F 50FA		mov r0, #8000 ; 8000
A1804E70  F8DF 7108		ldr r7, [pc, #+264] ; 0xA1A000A8
A1804E74  8038     		strh r0, [r7]

#5		
#6			(* q_pulses_per_acs	:= 1; *)
#7			MOVE		1,q_pulses_per_acs	{LNXT:3|15|-1}
(*) UINT
A1804E76  2001     		mov r0, #1 ; 1
A1804E78  F8DF 7104		ldr r7, [pc, #+260] ; 0xA1A000AA
A1804E7C  8038     		strh r0, [r7]

#8		
#9		
#10			(* IF fdi_q_cnt >= q_pulses_per_acs *)
#11			LD		fdi_q_cnt	{LNXT:15|-1|-1}
(*) UNDEF
A1804E7E  F8DF 7114		ldr r7, [pc, #+276] ; 0x100004F8
A1804E82  6838     		ldr r0, [r7]

#12			GE		q_pulses_per_acs	{LNXT:15|-1|-1}
(*) UDINT
A1804E84  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000AA
A1804E88  883F     		ldrh r7, [r7]
A1804E8A  42B8     		cmp r0, r7
A1804E8C  BF38 2000		lomov r0, #0
A1804E90  BF28 2001		hsmov r0, #1

#13			JMPCN	$label0	{LNXT:15|16|20}
(-) BOOL
A1804E94  2800     		cmp r0, #0
A1804E96  D00B     		beq #22 ; 0xA1804EB0


#14		
#15			(* THEN *)
#16		
#17				(* q_counter := q_counter + 1; *)
#18				LD		q_counter	{LNXT:16|17|-1}
(*) UNDEF
A1804E9A  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA0003F08
A1804E9E  6838     		ldr r0, [r7]

#19				ADD		1	{LNXT:16|17|-1}
(-) DWORD
A1804EA0  1C40     		add r0, r0, #1

#20				ST		q_counter	{LNXT:16|17|-1}
(*) DWORD
A1804EA2  F8DF 70D0		ldr r7, [pc, #+208] ; 0xA0003F08
A1804EA6  6038     		str r0, [r7]

#21		
#22				(* fdi_q_reset := true; *)
#23				MOVE		true,fdi_q_reset	{LNXT:17|20|-1}
(*) DWORD
A1804EA8  2001     		mov r0, #1 ; 1
A1804EAA  F8DF 70F0		ldr r7, [pc, #+240] ; 0x100007DD
A1804EAE  7038     		strb r0, [r7]

#24		
#25		$label0:
#26			(* END_IF *)
#27		
#28			(* q_value := to_int((3600 * to_real(fdi_q_freq)) / (to_real(q_pulses_per_acs) / 1)); *)
#29			LDP0		fdi_q_freq	{LNXT:20|2|-1}
(-) BOOL
#30			to_real	{LNXT:20|2|-1}
(*) BOOL
A1804EB0  F8DF 70E4		ldr r7, [pc, #+228] ; 0x100004FC
A1804EB4  6838     		ldr r0, [r7]
A1804EB6  F8DF 40CC		ldr r4, [pc, #+204] ; 0x111DB
A1804EBA  F044 0401		orr r4, r4, #1
A1804EBE  47A0     		blx r4

#31			MUL		3600	{LNXT:20|2|-1}
(*) REAL
A1804EC0  F44F 6761		mov r7, #3600 ; 3600
A1804EC4  B082     		sub sp, sp, #8
A1804EC6  F8CD 0000		str r0, [sp]
A1804ECA  4638     		mov r0, r7
A1804ECC  F8DF 40B4		ldr r4, [pc, #+180] ; 0x111DB
A1804ED0  F044 0401		orr r4, r4, #1
A1804ED4  47A0     		blx r4
A1804ED6  4607     		mov r7, r0
A1804ED8  F8DD 0000		ldr r0, [sp]
A1804EDC  B002     		add sp, sp, #8
A1804EDE  B082     		sub sp, sp, #8
A1804EE0  F8CD 1000		str r1, [sp]
A1804EE4  4639     		mov r1, r7
A1804EE6  F8DF 40A4		ldr r4, [pc, #+164] ; 0x1123B
A1804EEA  F044 0401		orr r4, r4, #1
A1804EEE  47A0     		blx r4
A1804EF0  F8DD 1000		ldr r1, [sp]
A1804EF4  B002     		add sp, sp, #8

#32			DIV(		0	{LNXT:20|2|-1}
(*) REAL
A1804EF6  B082     		sub sp, sp, #8
A1804EF8  F8CD 0000		str r0, [sp]
A1804EFC  2000     		mov r0, #0 ; 0

#33			LDP0		q_pulses_per_acs	{LNXT:20|2|-1}
(-) USINT
#34			to_real	{LNXT:20|2|-1}
(*) USINT
A1804EFE  F8DF 7080		ldr r7, [pc, #+128] ; 0xA1A000AA
A1804F02  8838     		ldrh r0, [r7]
A1804F04  F8DF 407C		ldr r4, [pc, #+124] ; 0x111DB
A1804F08  F044 0401		orr r4, r4, #1
A1804F0C  47A0     		blx r4

#35			DIV		1	{LNXT:20|2|-1}
(*) REAL
A1804F0E  2701     		mov r7, #1 ; 1
A1804F10  B082     		sub sp, sp, #8
A1804F12  F8CD 0000		str r0, [sp]
A1804F16  4638     		mov r0, r7
A1804F18  F8DF 4068		ldr r4, [pc, #+104] ; 0x111DB
A1804F1C  F044 0401		orr r4, r4, #1
A1804F20  47A0     		blx r4
A1804F22  4607     		mov r7, r0
A1804F24  F8DD 0000		ldr r0, [sp]
A1804F28  B002     		add sp, sp, #8
A1804F2A  B082     		sub sp, sp, #8
A1804F2C  F8CD 1000		str r1, [sp]
A1804F30  4639     		mov r1, r7
A1804F32  F8DF 405C		ldr r4, [pc, #+92] ; 0x1124B
A1804F36  F044 0401		orr r4, r4, #1
A1804F3A  47A0     		blx r4
A1804F3C  F8DD 1000		ldr r1, [sp]
A1804F40  B002     		add sp, sp, #8

#36			)	{LNXT:20|2|-1}
(*) REAL
A1804F42  4607     		mov r7, r0
A1804F44  F8DD 0000		ldr r0, [sp]
A1804F48  B002     		add sp, sp, #8
A1804F4A  B082     		sub sp, sp, #8
A1804F4C  F8CD 1000		str r1, [sp]
A1804F50  4639     		mov r1, r7
A1804F52  F8DF 403C		ldr r4, [pc, #+60] ; 0x1124B
A1804F56  F044 0401		orr r4, r4, #1
A1804F5A  47A0     		blx r4
A1804F5C  F8DD 1000		ldr r1, [sp]
A1804F60  B002     		add sp, sp, #8

#37			to_int	{LNXT:20|2|-1}
(*) REAL
A1804F62  F8DF 4024		ldr r4, [pc, #+36] ; 0x1120B
A1804F66  F044 0401		orr r4, r4, #1
A1804F6A  47A0     		blx r4

#38			ST		q_value	{LNXT:20|2|-1}
(*) INT
A1804F6C  F8DF 7008		ldr r7, [pc, #+8] ; 0xA0003F0E
A1804F70  8038     		strh r0, [r7]

A1804F72  E015     		b #42

A1804F74  FFFFFFFF		; 0xA0003F08
A1804F78  FFFFFFFF		; 0xA0003F0E
A1804F7C  A1A000A8		; 0xA1A000A8
A1804F80  A1A000AA		; 0xA1A000AA
A1804F84  FFFFFFFF		; 0x000111DB
A1804F88  FFFFFFFF		; 0x0001120B
A1804F8C  FFFFFFFF		; 0x0001123B
A1804F90  FFFFFFFF		; 0x0001124B
A1804F94  FFFFFFFF		; 0x100004F8
A1804F98  FFFFFFFF		; 0x100004FC
A1804F9C  FFFFFFFF		; 0x100007DD

END_PROGRAM
**************************************************
	List program: sr_save_counters
**************************************************

PROGRAM sr_save_counters

        VAR
power_err : R_TRIG;
ton_start_up : TON;
res_q : BOOL;
res_kw : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:sr_save_counters}
#1		(*$WAITSWITCH$*)
#2		
#3			(* ton_start_up *)
#4			MOVE		true,ton_start_up.IN	{LNXT:1|-1|-1}
(*) UDINT
A1804FA0  2001     		mov r0, #1 ; 1
A1804FA2  F8DF 7100		ldr r7, [pc, #+256] ; 0xA1A000B4
A1804FA6  7038     		strb r0, [r7]

#5			MOVE		5000,ton_start_up.PT	{LNXT:1|-1|-1}
(*) BOOL
A1804FA8  F8DF 7110		ldr r7, [pc, #+272] ; 0x1388
A1804FAC  4638     		mov r0, r7
A1804FAE  F8DF 70F8		ldr r7, [pc, #+248] ; 0xA1A000B8
A1804FB2  6038     		str r0, [r7]

#6			CAL		ton_start_up	{LNXT:1|2|-1}
(*) UDINT
A1804FB4  E92D 0021		stmdb sp!, { r0, r5 }
A1804FB8  F8DF 50E4		ldr r5, [pc, #+228] ; 0xA1A000B0
A1804FBC  F8DF 40D0		ldr r4, [pc, #+208] ; 0xA1804470
A1804FC0  F044 0401		orr r4, r4, #1
A1804FC4  47A0     		blx r4
A1804FC6  E8BD 0021		ldmia sp!, { r0, r5 }

#7		
#8			(* power_err *)
#9			LD		ton_start_up.Q	{LNXT:2|-1|-1}
(*) UNDEF
A1804FCA  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA1A000BC
A1804FCE  7838     		ldrb r0, [r7]

#10			AND		i_rnpp	{LNXT:2|-1|-1}
(*) BOOL
A1804FD0  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A000A6
A1804FD4  783F     		ldrb r7, [r7]
A1804FD6  4038     		and r0, r0, r7

#11			ST		power_err.clk	{LNXT:2|-1|-1}
(*) BOOL
A1804FD8  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA1A000C5
A1804FDC  7038     		strb r0, [r7]

#12			CAL		power_err	{LNXT:2|3|-1}
(*) BOOL
A1804FDE  E92D 0021		stmdb sp!, { r0, r5 }
A1804FE2  F8DF 50CC		ldr r5, [pc, #+204] ; 0xA1A000C4
A1804FE6  F8DF 40A4		ldr r4, [pc, #+164] ; 0xA1804438
A1804FEA  F044 0401		orr r4, r4, #1
A1804FEE  47A0     		blx r4
A1804FF0  E8BD 0021		ldmia sp!, { r0, r5 }

#13		
#14		
#15			(* IF power_err.q *)
#16			LD		power_err.q	{LNXT:3|-1|-1}
(*) UNDEF
A1804FF4  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A000C6
A1804FF8  7838     		ldrb r0, [r7]

#17			JMPCN	$label0	{LNXT:3|4|1}
(-) BOOL
A1804FFA  2800     		cmp r0, #0
A1804FFC  D03C     		beq #120 ; 0xA1805078


#18		
#19			(* THEN *)
#20		
#21		
#22				(* IF epprom_q_cnt <> q_counter *)
#23				LD		epprom_q_cnt	{LNXT:4|-1|-1}
(*) UNDEF
A1805000  F8DF 7078		ldr r7, [pc, #+120] ; 0xA00017F0
A1805004  6838     		ldr r0, [r7]

#24				NE		q_counter	{LNXT:4|-1|-1}
(*) DWORD
A1805006  F8DF 7080		ldr r7, [pc, #+128] ; 0xA0003F08
A180500A  683F     		ldr r7, [r7]
A180500C  42B8     		cmp r0, r7
A180500E  BF08 2000		eqmov r0, #0
A1805012  BF18 2001		nemov r0, #1

#25				JMPCN	$label1	{LNXT:4|4|5}
(-) BOOL
A1805016  2800     		cmp r0, #0
A1805018  D010     		beq #32 ; 0xA180503C


#26		
#27				(* THEN *)
#28		
#29					(* res_q := sysWriteParUINT(ADR(epprom_q_cnt), q_counter); *)
#30					ADR		epprom_q_cnt	{LNXT:4|5|-1}
(*) BOOL
A180501C  F8DF 005C		ldr r0, [pc, #+92] ; 0xA00017F0

#31					sysWriteParUINT		q_counter	{LNXT:4|5|-1}
(*) @DWORD
A1805020  4607     		mov r7, r0
A1805022  4638     		mov r0, r7
A1805024  F8DF 7060		ldr r7, [pc, #+96] ; 0xA0003F08
A1805028  683F     		ldr r7, [r7]
A180502A  4639     		mov r1, r7
A180502C  F8DF 4090		ldr r4, [pc, #+144] ; 0x27D11
A1805030  F044 0401		orr r4, r4, #1
A1805034  47A0     		blx r4

#32					ST		res_q	{LNXT:4|5|-1}
(*) BOOL
A1805036  F8DF 7064		ldr r7, [pc, #+100] ; 0xA1A000AF
A180503A  7038     		strb r0, [r7]

#33		
#34		$label1:
#35				(* END_IF *)
#36		
#37		
#38				(* IF epprom_kw_cnt <> kw_counter *)
#39				LD		epprom_kw_cnt	{LNXT:5|-1|-1}
(*) UNDEF
A180503C  F8DF 7040		ldr r7, [pc, #+64] ; 0xA00017F8
A1805040  6838     		ldr r0, [r7]

#40				NE		kw_counter	{LNXT:5|-1|-1}
(*) DWORD
A1805042  F8DF 7040		ldr r7, [pc, #+64] ; 0xA0003F04
A1805046  683F     		ldr r7, [r7]
A1805048  42B8     		cmp r0, r7
A180504A  BF08 2000		eqmov r0, #0
A180504E  BF18 2001		nemov r0, #1

#41				JMPCN	$label2	{LNXT:5|5|1}
(-) BOOL
A1805052  2800     		cmp r0, #0
A1805054  D010     		beq #32 ; 0xA1805078


#42		
#43				(* THEN *)
#44		
#45					(* res_kw := sysWriteParUINT(ADR(epprom_kw_cnt), kw_counter); *)
#46					ADR		epprom_kw_cnt	{LNXT:5|1|-1}
(*) BOOL
A1805058  F8DF 0024		ldr r0, [pc, #+36] ; 0xA00017F8

#47					sysWriteParUINT		kw_counter	{LNXT:5|1|-1}
(*) @DWORD
A180505C  4607     		mov r7, r0
A180505E  4638     		mov r0, r7
A1805060  F8DF 7020		ldr r7, [pc, #+32] ; 0xA0003F04
A1805064  683F     		ldr r7, [r7]
A1805066  4639     		mov r1, r7
A1805068  F8DF 4054		ldr r4, [pc, #+84] ; 0x27D11
A180506C  F044 0401		orr r4, r4, #1
A1805070  47A0     		blx r4

#48					ST		res_kw	{LNXT:5|1|-1}
(*) BOOL
A1805072  F8DF 7024		ldr r7, [pc, #+36] ; 0xA1A000AE
A1805076  7038     		strb r0, [r7]

A1805078  E024     		b #72

A180507C  FFFFFFFF		; 0xA00017F0
A1805080  FFFFFFFF		; 0xA00017F8
A1805084  FFFFFFFF		; 0xA0003F04
A1805088  FFFFFFFF		; 0xA0003F08
A180508C  A1804438		; 0xA1804438
A1805090  A1804470		; 0xA1804470
A1805094  A1A000A6		; 0xA1A000A6
A1805098  A1A000AE		; 0xA1A000AE
A180509C  A1A000AF		; 0xA1A000AF
A18050A0  A1A000B0		; 0xA1A000B0
A18050A4  A1A000B4		; 0xA1A000B4
A18050A8  A1A000B8		; 0xA1A000B8
A18050AC  A1A000BC		; 0xA1A000BC
A18050B0  A1A000C4		; 0xA1A000C4
A18050B4  A1A000C5		; 0xA1A000C5
A18050B8  A1A000C6		; 0xA1A000C6
A18050BC  00001388		; 0x00001388
A18050C0  FFFFFFFF		; 0x00027D11

END_PROGRAM
**************************************************
	List program: sr_ATS_Ctrl
**************************************************

PROGRAM sr_ATS_Ctrl

        VAR
TON_StartUp_1 : TON;
TON_StartUp_2 : TON;
stopping_timer : TON;
downtimeIN : BOOL;
washing_timer : TON;
checkWashAndStart : CheckWashAndStart;
isRunningWash : BOOL;
onWash : BOOL := false;
time_sec : INT := 4000;
	END_VAR

END_PROGRAM

#0		{SRC:sr_ATS_Ctrl}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF onWash *)
#5			LD		onWash	{LNXT:1|-1|-1}
(*) UNDEF
A18050C4  F8DF 7390		ldr r7, [pc, #+912] ; 0xA1A00041
A18050C8  7838     		ldrb r0, [r7]

#6			JMPCN	$label0	{LNXT:1|10|22}
(-) BOOL
A18050CA  2800     		cmp r0, #0
A18050CC  D02E     		beq #92 ; 0xA180512C


#7		
#8			(* THEN *)
#9		
#10				(* checkWashAndStart *)
#11				MOVE		o_val_close_fall,checkWashAndStart.o_val_close_fall_FB	{LNXT:10|-1|-1}
(*) BOOL
A18050D0  F8DF 03F0		ldr r0, [pc, #+1008] ; 0x100004AD
A18050D4  F8DF 739C		ldr r7, [pc, #+924] ; 0xA1A0006C
A18050D8  6038     		str r0, [r7]

#12				MOVE		o_val_close_R,checkWashAndStart.o_val_close_R_FB	{LNXT:11|-1|-1}
(*) BOOL^
A18050DA  F8DF 03F0		ldr r0, [pc, #+1008] ; 0x100004AF
A18050DE  F8DF 738C		ldr r7, [pc, #+908] ; 0xA1A00064
A18050E2  6038     		str r0, [r7]

#13				MOVE		o_val_open_fall,checkWashAndStart.o_val_open_fall_FB	{LNXT:12|-1|-1}
(*) BOOL^
A18050E4  F8DF 03D8		ldr r0, [pc, #+984] ; 0x100004AC
A18050E8  F8DF 7384		ldr r7, [pc, #+900] ; 0xA1A00068
A18050EC  6038     		str r0, [r7]

#14				MOVE		o_val_open_R,checkWashAndStart.o_val_open_R_FB	{LNXT:13|-1|-1}
(*) BOOL^
A18050EE  F8DF 03D8		ldr r0, [pc, #+984] ; 0x100004AE
A18050F2  F8DF 7374		ldr r7, [pc, #+884] ; 0xA1A00060
A18050F6  6038     		str r0, [r7]

#15				MOVE		sv_washing,checkWashAndStart.sv_washing_FB	{LNXT:14|-1|-1}
(*) BOOL^
A18050F8  F8DF 0350		ldr r0, [pc, #+848] ; 0xA0003F26
A18050FC  F8DF 7364		ldr r7, [pc, #+868] ; 0xA1A0005C
A1805100  6038     		str r0, [r7]

#16				MOVE		q_start_ats,checkWashAndStart.q_start_ats_FB	{LNXT:15|-1|-1}
(*) BOOL^
A1805102  F8DF 03CC		ldr r0, [pc, #+972] ; 0x100004B3
A1805106  F8DF 7370		ldr r7, [pc, #+880] ; 0xA1A00070
A180510A  6038     		str r0, [r7]

#17				MOVE		time_sec,checkWashAndStart.ep_time_wash_FB	{LNXT:16|-1|-1}
(*) BOOL^
A180510C  F8DF 034C		ldr r0, [pc, #+844] ; 0xA1A00042
A1805110  F8DF 7368		ldr r7, [pc, #+872] ; 0xA1A00074
A1805114  6038     		str r0, [r7]

#18				CAL		checkWashAndStart	{LNXT:10|22|-1}
(*) INT^
A1805116  E92D 0021		stmdb sp!, { r0, r5 }
A180511A  F8DF 5344		ldr r5, [pc, #+836] ; 0xA1A00044
A180511E  F8DF 4334		ldr r4, [pc, #+820] ; 0xA1804510
A1805122  F044 0401		orr r4, r4, #1
A1805126  47A0     		blx r4
A1805128  E8BD 0021		ldmia sp!, { r0, r5 }

#19		
#20		$label0:
#21			(* END_IF *)
#22		
#23		
#24			(* IF i_run_ats and i_pb_rem = 1 *)
#25			LD		i_pb_rem	{LNXT:22|-1|-1}
(*) UNDEF
A180512C  F8DF 7350		ldr r7, [pc, #+848] ; 0xA1A00078
A1805130  F9B7 0000		ldrsh r0, [r7]

#26			EQ		1	{LNXT:22|-1|-1}
(*) INT
A1805134  2801     		cmp r0, #1
A1805136  BF18 2000		nemov r0, #0
A180513A  BF08 2001		eqmov r0, #1

#27			AND(		i_run_ats	{LNXT:22|-1|-1}
(*) BOOL
A180513E  B082     		sub sp, sp, #8
A1805140  F8CD 0000		str r0, [sp]
A1805144  F8DF 733C		ldr r7, [pc, #+828] ; 0xA1A0007A
A1805148  7838     		ldrb r0, [r7]

#28			NOT	{LNXT:22|-1|-1}
(*) BOOL
A180514A  2800     		cmp r0, #0
A180514C  BF08 2001		eqmov r0, #1
A1805150  BF18 2000		nemov r0, #0

#29			)	{LNXT:22|-1|-1}
(*) BOOL
A1805154  4607     		mov r7, r0
A1805156  F8DD 0000		ldr r0, [sp]
A180515A  B002     		add sp, sp, #8
A180515C  4038     		and r0, r0, r7

#30			JMPCN	$label1	{LNXT:22|23|28}
(-) BOOL
A180515E  2800     		cmp r0, #0
A1805160  D008     		beq #16 ; 0xA1805174


#31		
#32			(* THEN *)
#33		
#34				(* o_val_close_fall:=true; *)
#35				MOVE		true,o_val_close_fall	{LNXT:23|24|-1}
(*) BOOL
A1805164  2001     		mov r0, #1 ; 1
A1805166  F8DF 735C		ldr r7, [pc, #+860] ; 0x100004AD
A180516A  7038     		strb r0, [r7]

#36		
#37				(* o_val_close_R:=true; *)
#38				MOVE		true,o_val_close_R	{LNXT:24|28|-1}
(*) BOOL
A180516C  2001     		mov r0, #1 ; 1
A180516E  F8DF 735C		ldr r7, [pc, #+860] ; 0x100004AF
A1805172  7038     		strb r0, [r7]

#39		
#40		$label1:
#41			(* END_IF *)
#42		
#43			(* TON_StartUp_1 *)
#44			MOVE		q_start_ats,TON_StartUp_1.IN	{LNXT:28|-1|-1}
(*) BOOL
A1805174  F8DF 7358		ldr r7, [pc, #+856] ; 0x100004B3
A1805178  7838     		ldrb r0, [r7]
A180517A  F8DF 7314		ldr r7, [pc, #+788] ; 0xA1A00080
A180517E  7038     		strb r0, [r7]

#45			MOVE		20000,TON_StartUp_1.PT	{LNXT:28|-1|-1}
(*) BOOL
A1805180  F8DF 7338		ldr r7, [pc, #+824] ; 0x4E20
A1805184  4638     		mov r0, r7
A1805186  F8DF 730C		ldr r7, [pc, #+780] ; 0xA1A00084
A180518A  6038     		str r0, [r7]

#46			CAL		TON_StartUp_1	{LNXT:28|29|-1}
(*) UDINT
A180518C  E92D 0021		stmdb sp!, { r0, r5 }
A1805190  F8DF 52F8		ldr r5, [pc, #+760] ; 0xA1A0007C
A1805194  F8DF 42B8		ldr r4, [pc, #+696] ; 0xA1804470
A1805198  F044 0401		orr r4, r4, #1
A180519C  47A0     		blx r4
A180519E  E8BD 0021		ldmia sp!, { r0, r5 }

#47		
#48			(* TON_StartUp_2 *)
#49			MOVE		TON_StartUp_1.Q,TON_StartUp_2.IN	{LNXT:29|-1|-1}
(*) UDINT
A18051A2  F8DF 72F4		ldr r7, [pc, #+756] ; 0xA1A00088
A18051A6  7838     		ldrb r0, [r7]
A18051A8  F8DF 72F4		ldr r7, [pc, #+756] ; 0xA1A00094
A18051AC  7038     		strb r0, [r7]

#50			MOVE		1000,TON_StartUp_2.PT	{LNXT:29|-1|-1}
(*) BOOL
A18051AE  F44F 707A		mov r0, #1000 ; 1000
A18051B2  F8DF 72F0		ldr r7, [pc, #+752] ; 0xA1A00098
A18051B6  6038     		str r0, [r7]

#51			CAL		TON_StartUp_2	{LNXT:29|31|-1}
(*) UDINT
A18051B8  E92D 0021		stmdb sp!, { r0, r5 }
A18051BC  F8DF 52DC		ldr r5, [pc, #+732] ; 0xA1A00090
A18051C0  F8DF 428C		ldr r4, [pc, #+652] ; 0xA1804470
A18051C4  F044 0401		orr r4, r4, #1
A18051C8  47A0     		blx r4
A18051CA  E8BD 0021		ldmia sp!, { r0, r5 }

#52		
#53		
#54			(* IF q_start_ats *)
#55			LD		q_start_ats	{LNXT:31|-1|-1}
(*) UNDEF
A18051CE  F8DF 7300		ldr r7, [pc, #+768] ; 0x100004B3
A18051D2  7838     		ldrb r0, [r7]

#56			JMPCN	$label2	{LNXT:31|32|41}
(-) BOOL
A18051D4  2800     		cmp r0, #0
A18051D6  D030     		beq #96 ; 0xA180523A


#57		
#58			(* THEN *)
#59		
#60		
#61				(* IF i_sns_pressure And TON_StartUp_1.Q *)
#62				LD		i_sns_pressure	{LNXT:32|-1|-1}
(*) UNDEF
A18051DA  F8DF 72AC		ldr r7, [pc, #+684] ; 0xA1A0007B
A18051DE  7838     		ldrb r0, [r7]

#63				NOT	{LNXT:32|-1|-1}
(*) BOOL
A18051E0  2800     		cmp r0, #0
A18051E2  BF08 2001		eqmov r0, #1
A18051E6  BF18 2000		nemov r0, #0

#64				AND		TON_StartUp_1.Q	{LNXT:32|-1|-1}
(*) BOOL
A18051EA  F8DF 72AC		ldr r7, [pc, #+684] ; 0xA1A00088
A18051EE  783F     		ldrb r7, [r7]
A18051F0  4038     		and r0, r0, r7

#65				JMPCN	$label3	{LNXT:32|33|35}
(-) BOOL
A18051F2  2800     		cmp r0, #0
A18051F4  D009     		beq #18 ; 0xA180520A


#66		
#67				(* THEN *)
#68		
#69					(* Alarms.0 := True; *)
#70					MOVE		True,Alarms.0	{LNXT:33|35|-1}
(*) BOOL
A18051F8  2001     		mov r0, #1 ; 1
A18051FA  F8DF 7248		ldr r7, [pc, #+584] ; 0xA0003F20
A18051FE  F8B7 8000		ldrh r8, [r7]
A1805202  F360 0800		bfi r8, r0, #0, #1
A1805206  F8A7 8000		strh r8, [r7]

#71		
#72		$label3:
#73				(* END_IF *)
#74		
#75		
#76				(* IF i_sns_pressure And TON_StartUp_2.Q *)
#77				LD		i_sns_pressure	{LNXT:35|-1|-1}
(*) UNDEF
A180520A  F8DF 727C		ldr r7, [pc, #+636] ; 0xA1A0007B
A180520E  7838     		ldrb r0, [r7]

#78				NOT	{LNXT:35|-1|-1}
(*) BOOL
A1805210  2800     		cmp r0, #0
A1805212  BF08 2001		eqmov r0, #1
A1805216  BF18 2000		nemov r0, #0

#79				AND		TON_StartUp_2.Q	{LNXT:35|-1|-1}
(*) BOOL
A180521A  F8DF 728C		ldr r7, [pc, #+652] ; 0xA1A0009C
A180521E  783F     		ldrb r7, [r7]
A1805220  4038     		and r0, r0, r7

#80				JMPCN	$label4	{LNXT:35|36|41}
(-) BOOL
A1805222  2800     		cmp r0, #0
A1805224  D009     		beq #18 ; 0xA180523A


#81		
#82				(* THEN *)
#83		
#84					(* Alarms.1 := True; *)
#85					MOVE		True,Alarms.1	{LNXT:36|41|-1}
(*) BOOL
A1805228  2001     		mov r0, #1 ; 1
A180522A  F8DF 7218		ldr r7, [pc, #+536] ; 0xA0003F20
A180522E  F8B7 8000		ldrh r8, [r7]
A1805232  F360 0841		bfi r8, r0, #1, #1
A1805236  F8A7 8000		strh r8, [r7]

#86		
#87		$label4:
#88				(* END_IF *)
#89		
#90		$label2:
#91			(* END_IF *)
#92		
#93		
#94			(* IF q_start_ats *)
#95			LD		q_start_ats	{LNXT:41|-1|-1}
(*) UNDEF
A180523A  F8DF 7294		ldr r7, [pc, #+660] ; 0x100004B3
A180523E  7838     		ldrb r0, [r7]

#96			NOT	{LNXT:41|-1|-1}
(*) BOOL
A1805240  2800     		cmp r0, #0
A1805242  BF08 2001		eqmov r0, #1
A1805246  BF18 2000		nemov r0, #0

#97			JMPCN	$label5	{LNXT:41|42|44}
(-) BOOL
A180524A  2800     		cmp r0, #0
A180524C  D006     		beq #12 ; 0xA180525C


#98		
#99			(* THEN *)
#100		
#101				(* downtimeIN:=true; *)
#102				MOVE		true,downtimeIN	{LNXT:42|54|-1}
(*) BOOL
A1805250  2001     		mov r0, #1 ; 1
A1805252  F8DF 7258		ldr r7, [pc, #+600] ; 0xA1A000A4
A1805256  7038     		strb r0, [r7]

#103				JMP		$label6	{LNXT:41|42|44}
(-) BOOL
A1805258  E004     		b #8 ; 0xA1805264


#104		$label5:
#105		
#106			(* ELSE *)
#107		
#108				(* downtimeIN:=false; *)
#109				MOVE		false,downtimeIN	{LNXT:44|54|-1}
(*) BOOL
A180525C  2000     		mov r0, #0 ; 0
A180525E  F8DF 724C		ldr r7, [pc, #+588] ; 0xA1A000A4
A1805262  7038     		strb r0, [r7]

#110		
#111		$label6:
#112			(* END_IF *)
#113		
#114			(* Alarms.2 := i_sns_door; *)
#115			MOVE		i_sns_door,Alarms.2	{LNXT:54|57|-1}
(*) BOOL
A1805264  F8DF 7248		ldr r7, [pc, #+584] ; 0xA1A000A5
A1805268  7838     		ldrb r0, [r7]
A180526A  F8DF 71D8		ldr r7, [pc, #+472] ; 0xA0003F20
A180526E  F8B7 8000		ldrh r8, [r7]
A1805272  F360 0882		bfi r8, r0, #2, #1
A1805276  F8A7 8000		strh r8, [r7]

#116		
#117			(* Alarms.3 := i_rnpp; *)
#118			MOVE		i_rnpp,Alarms.3	{LNXT:57|63|-1}
(*) BOOL
A180527A  F8DF 7238		ldr r7, [pc, #+568] ; 0xA1A000A6
A180527E  7838     		ldrb r0, [r7]
A1805280  F8DF 71C0		ldr r7, [pc, #+448] ; 0xA0003F20
A1805284  F8B7 8000		ldrh r8, [r7]
A1805288  F360 08C3		bfi r8, r0, #3, #1
A180528C  F8A7 8000		strh r8, [r7]

#119		
#120			(* Alarms.5 := i_no_alm_ats; *)
#121			MOVE		i_no_alm_ats,Alarms.5	{LNXT:63|72|-1}
(*) BOOL
A1805290  F8DF 7224		ldr r7, [pc, #+548] ; 0xA1A000A7
A1805294  7838     		ldrb r0, [r7]
A1805296  F8DF 71AC		ldr r7, [pc, #+428] ; 0xA0003F20
A180529A  F8B7 8000		ldrh r8, [r7]
A180529E  F360 1845		bfi r8, r0, #5, #1
A18052A2  F8A7 8000		strh r8, [r7]

#122		
#123		
#124			(* IF i_pb_rem = 1 And Not Alarms.0 And Not Alarms.3 And Not Alarms.4 And Not Alarms.5 And Not Alarms.7 *)
#125			LD		Alarms.7	{LNXT:72|-1|-1}
(*) UNDEF
A18052A6  F8DF 719C		ldr r7, [pc, #+412] ; 0xA0003F20
A18052AA  8838     		ldrh r0, [r7]
A18052AC  F3C0 10C0		ubfx r0, r0, #7, #1

#126			NOT	{LNXT:72|-1|-1}
(*) BOOL
A18052B0  2800     		cmp r0, #0
A18052B2  BF08 2001		eqmov r0, #1
A18052B6  BF18 2000		nemov r0, #0

#127			AND(		Alarms.5	{LNXT:72|-1|-1}
(*) BOOL
A18052BA  B082     		sub sp, sp, #8
A18052BC  F8CD 0000		str r0, [sp]
A18052C0  F8DF 7180		ldr r7, [pc, #+384] ; 0xA0003F20
A18052C4  8838     		ldrh r0, [r7]
A18052C6  F3C0 1040		ubfx r0, r0, #5, #1

#128			NOT	{LNXT:72|-1|-1}
(*) BOOL
A18052CA  2800     		cmp r0, #0
A18052CC  BF08 2001		eqmov r0, #1
A18052D0  BF18 2000		nemov r0, #0

#129			AND(		Alarms.4	{LNXT:72|-1|-1}
(*) BOOL
A18052D4  B082     		sub sp, sp, #8
A18052D6  F8CD 0000		str r0, [sp]
A18052DA  F8DF 7168		ldr r7, [pc, #+360] ; 0xA0003F20
A18052DE  8838     		ldrh r0, [r7]
A18052E0  F3C0 1000		ubfx r0, r0, #4, #1

#130			NOT	{LNXT:72|-1|-1}
(*) BOOL
A18052E4  2800     		cmp r0, #0
A18052E6  BF08 2001		eqmov r0, #1
A18052EA  BF18 2000		nemov r0, #0

#131			AND(		Alarms.3	{LNXT:72|-1|-1}
(*) BOOL
A18052EE  B082     		sub sp, sp, #8
A18052F0  F8CD 0000		str r0, [sp]
A18052F4  F8DF 714C		ldr r7, [pc, #+332] ; 0xA0003F20
A18052F8  8838     		ldrh r0, [r7]
A18052FA  F3C0 00C0		ubfx r0, r0, #3, #1

#132			NOT	{LNXT:72|-1|-1}
(*) BOOL
A18052FE  2800     		cmp r0, #0
A1805300  BF08 2001		eqmov r0, #1
A1805304  BF18 2000		nemov r0, #0

#133			AND(		Alarms.0	{LNXT:72|-1|-1}
(*) BOOL
A1805308  B082     		sub sp, sp, #8
A180530A  F8CD 0000		str r0, [sp]
A180530E  F8DF 7134		ldr r7, [pc, #+308] ; 0xA0003F20
A1805312  8838     		ldrh r0, [r7]
A1805314  F3C0 0000		ubfx r0, r0, #0, #1

#134			NOT	{LNXT:72|-1|-1}
(*) BOOL
A1805318  2800     		cmp r0, #0
A180531A  BF08 2001		eqmov r0, #1
A180531E  BF18 2000		nemov r0, #0

#135			AND(		i_pb_rem	{LNXT:72|-1|-1}
(*) BOOL
A1805322  B082     		sub sp, sp, #8
A1805324  F8CD 0000		str r0, [sp]
A1805328  F8DF 7154		ldr r7, [pc, #+340] ; 0xA1A00078
A180532C  F9B7 0000		ldrsh r0, [r7]

#136			EQ		1	{LNXT:72|-1|-1}
(*) INT
A1805330  2801     		cmp r0, #1
A1805332  BF18 2000		nemov r0, #0
A1805336  BF08 2001		eqmov r0, #1

#137			)	{LNXT:72|-1|-1}
(*) BOOL
A180533A  4607     		mov r7, r0
A180533C  F8DD 0000		ldr r0, [sp]
A1805340  B002     		add sp, sp, #8
A1805342  4038     		and r0, r0, r7

#138			)	{LNXT:72|-1|-1}
(*) BOOL
A1805344  4607     		mov r7, r0
A1805346  F8DD 0000		ldr r0, [sp]
A180534A  B002     		add sp, sp, #8
A180534C  4038     		and r0, r0, r7

#139			)	{LNXT:72|-1|-1}
(*) BOOL
A180534E  4607     		mov r7, r0
A1805350  F8DD 0000		ldr r0, [sp]
A1805354  B002     		add sp, sp, #8
A1805356  4038     		and r0, r0, r7

#140			)	{LNXT:72|-1|-1}
(*) BOOL
A1805358  4607     		mov r7, r0
A180535A  F8DD 0000		ldr r0, [sp]
A180535E  B002     		add sp, sp, #8
A1805360  4038     		and r0, r0, r7

#141			)	{LNXT:72|-1|-1}
(*) BOOL
A1805362  4607     		mov r7, r0
A1805364  F8DD 0000		ldr r0, [sp]
A1805368  B002     		add sp, sp, #8
A180536A  4038     		and r0, r0, r7

#142			JMPCN	$label7	{LNXT:72|74|89}
(-) BOOL
A180536C  2800     		cmp r0, #0
A180536E  D03E     		beq #124 ; 0xA18053EE


#143		
#144			(* THEN *)
#145		
#146		
#147				(* IF CMD.0 *)
#148				LD		CMD.0	{LNXT:74|-1|-1}
(*) UNDEF
A1805372  F8DF 70D4		ldr r7, [pc, #+212] ; 0xA0003F22
A1805376  8838     		ldrh r0, [r7]
A1805378  F3C0 0000		ubfx r0, r0, #0, #1

#149				JMPCN	$label9	{LNXT:74|75|85}
(-) BOOL
A180537C  2800     		cmp r0, #0
A180537E  D030     		beq #96 ; 0xA18053E2


#150		
#151				(* THEN *)
#152		
#153					(* checkWashAndStart *)
#154					MOVE		o_val_close_fall,checkWashAndStart.o_val_close_fall_FB	{LNXT:75|-1|-1}
(*) BOOL
A1805382  F8DF 0140		ldr r0, [pc, #+320] ; 0x100004AD
A1805386  F8DF 70EC		ldr r7, [pc, #+236] ; 0xA1A0006C
A180538A  6038     		str r0, [r7]

#155					MOVE		o_val_close_R,checkWashAndStart.o_val_close_R_FB	{LNXT:76|-1|-1}
(*) BOOL^
A180538C  F8DF 013C		ldr r0, [pc, #+316] ; 0x100004AF
A1805390  F8DF 70D8		ldr r7, [pc, #+216] ; 0xA1A00064
A1805394  6038     		str r0, [r7]

#156					MOVE		o_val_open_fall,checkWashAndStart.o_val_open_fall_FB	{LNXT:77|-1|-1}
(*) BOOL^
A1805396  F8DF 0128		ldr r0, [pc, #+296] ; 0x100004AC
A180539A  F8DF 70D4		ldr r7, [pc, #+212] ; 0xA1A00068
A180539E  6038     		str r0, [r7]

#157					MOVE		o_val_open_R,checkWashAndStart.o_val_open_R_FB	{LNXT:78|-1|-1}
(*) BOOL^
A18053A0  F8DF 0124		ldr r0, [pc, #+292] ; 0x100004AE
A18053A4  F8DF 70C0		ldr r7, [pc, #+192] ; 0xA1A00060
A18053A8  6038     		str r0, [r7]

#158					MOVE		sv_washing,checkWashAndStart.sv_washing_FB	{LNXT:79|-1|-1}
(*) BOOL^
A18053AA  F8DF 00A0		ldr r0, [pc, #+160] ; 0xA0003F26
A18053AE  F8DF 70B4		ldr r7, [pc, #+180] ; 0xA1A0005C
A18053B2  6038     		str r0, [r7]

#159					MOVE		q_start_ats,checkWashAndStart.q_start_ats_FB	{LNXT:80|-1|-1}
(*) BOOL^
A18053B4  F8DF 0118		ldr r0, [pc, #+280] ; 0x100004B3
A18053B8  F8DF 70BC		ldr r7, [pc, #+188] ; 0xA1A00070
A18053BC  6038     		str r0, [r7]

#160					MOVE		ep_time_wash,checkWashAndStart.ep_time_wash_FB	{LNXT:81|-1|-1}
(*) BOOL^
A18053BE  F8DF 0080		ldr r0, [pc, #+128] ; 0xA00017F4
A18053C2  F8DF 70B8		ldr r7, [pc, #+184] ; 0xA1A00074
A18053C6  6038     		str r0, [r7]

#161					CAL		checkWashAndStart	{LNXT:75|104|-1}
(*) INT^
A18053C8  E92D 0021		stmdb sp!, { r0, r5 }
A18053CC  F8DF 5090		ldr r5, [pc, #+144] ; 0xA1A00044
A18053D0  F8DF 4080		ldr r4, [pc, #+128] ; 0xA1804510
A18053D4  F044 0401		orr r4, r4, #1
A18053D8  47A0     		blx r4
A18053DA  E8BD 0021		ldmia sp!, { r0, r5 }

#162					JMP		$label10	{LNXT:74|75|85}
(-) INT^
A18053DE  E004     		b #8 ; 0xA18053EA


#163		$label9:
#164		
#165				(* ELSE *)
#166		
#167					(* q_start_ats := False; *)
#168					MOVE		False,q_start_ats	{LNXT:85|104|-1}
(*) INT^
A18053E2  2000     		mov r0, #0 ; 0
A18053E4  F8DF 70E8		ldr r7, [pc, #+232] ; 0x100004B3
A18053E8  7038     		strb r0, [r7]

#169		
#170		$label10:
#171				(* END_IF *)
#172				JMP		$label8	{LNXT:72|74|89}
(-) BOOL
A18053EA  E00D     		b #26 ; 0xA1805408


#173		$label7:
#174		
#175			(* ELSE *)
#176		
#177				(* CMD.0 := False; *)
#178				MOVE		False,CMD.0	{LNXT:89|90|-1}
(*) BOOL
A18053EE  2000     		mov r0, #0 ; 0
A18053F0  F8DF 7054		ldr r7, [pc, #+84] ; 0xA0003F22
A18053F4  F8B7 8000		ldrh r8, [r7]
A18053F8  F360 0800		bfi r8, r0, #0, #1
A18053FC  F8A7 8000		strh r8, [r7]

#179		
#180				(* q_start_ats := False; *)
#181				MOVE		False,q_start_ats	{LNXT:90|104|-1}
(*) WORD
A1805400  2000     		mov r0, #0 ; 0
A1805402  F8DF 70CC		ldr r7, [pc, #+204] ; 0x100004B3
A1805406  7038     		strb r0, [r7]

#182		
#183		$label8:
#184			(* END_IF *)
#185		
#186		
#187			(* IF CMD.1 *)
#188			LD		CMD.1	{LNXT:104|-1|-1}
(*) UNDEF
A1805408  F8DF 703C		ldr r7, [pc, #+60] ; 0xA0003F22
A180540C  8838     		ldrh r0, [r7]
A180540E  F3C0 0040		ubfx r0, r0, #1, #1

#189			JMPCN	$label11	{LNXT:104|105|1}
(-) BOOL
A1805412  2800     		cmp r0, #0
A1805414  D00D     		beq #26 ; 0xA1805432


#190		
#191			(* THEN *)
#192		
#193				(* Alarms := 0; *)
#194				MOVE		0,Alarms	{LNXT:105|106|-1}
(*) BOOL
A1805418  2000     		mov r0, #0 ; 0
A180541A  F8DF 7028		ldr r7, [pc, #+40] ; 0xA0003F20
A180541E  8038     		strh r0, [r7]

#195		
#196				(* CMD.1 := False; *)
#197				MOVE		False,CMD.1	{LNXT:106|1|-1}
(*) WORD
A1805420  2000     		mov r0, #0 ; 0
A1805422  F8DF 7024		ldr r7, [pc, #+36] ; 0xA0003F22
A1805426  F8B7 8000		ldrh r8, [r7]
A180542A  F360 0841		bfi r8, r0, #1, #1
A180542E  F8A7 8000		strh r8, [r7]

A1805432  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805436  F8DD E000		ldr lr, [sp]
A180543A  B002     		add sp, sp, #8

A180543C  4770     		bx lr

A1805440  FFFFFFFF		; 0xA00017F4
A1805444  FFFFFFFF		; 0xA0003F20
A1805448  FFFFFFFF		; 0xA0003F22
A180544C  FFFFFFFF		; 0xA0003F26
A1805450  A1804470		; 0xA1804470
A1805454  A1804510		; 0xA1804510
A1805458  A1A00041		; 0xA1A00041
A180545C  A1A00042		; 0xA1A00042
A1805460  A1A00044		; 0xA1A00044
A1805464  A1A0005C		; 0xA1A0005C
A1805468  A1A00060		; 0xA1A00060
A180546C  A1A00064		; 0xA1A00064
A1805470  A1A00068		; 0xA1A00068
A1805474  A1A0006C		; 0xA1A0006C
A1805478  A1A00070		; 0xA1A00070
A180547C  A1A00074		; 0xA1A00074
A1805480  A1A00078		; 0xA1A00078
A1805484  A1A0007A		; 0xA1A0007A
A1805488  A1A0007B		; 0xA1A0007B
A180548C  A1A0007C		; 0xA1A0007C
A1805490  A1A00080		; 0xA1A00080
A1805494  A1A00084		; 0xA1A00084
A1805498  A1A00088		; 0xA1A00088
A180549C  A1A00090		; 0xA1A00090
A18054A0  A1A00094		; 0xA1A00094
A18054A4  A1A00098		; 0xA1A00098
A18054A8  A1A0009C		; 0xA1A0009C
A18054AC  A1A000A4		; 0xA1A000A4
A18054B0  A1A000A5		; 0xA1A000A5
A18054B4  A1A000A6		; 0xA1A000A6
A18054B8  A1A000A7		; 0xA1A000A7
A18054BC  00004E20		; 0x00004E20
A18054C0  FFFFFFFF		; 0x100004AC
A18054C4  FFFFFFFF		; 0x100004AD
A18054C8  FFFFFFFF		; 0x100004AE
A18054CC  FFFFFFFF		; 0x100004AF
A18054D0  FFFFFFFF		; 0x100004B3

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
A18054D4  B082     		sub sp, sp, #8
A18054D6  F8CD E000		str lr, [sp]
A18054DA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18054DE  F8DF 7094		ldr r7, [pc, #+148] ; 0x10000450
A18054E2  8838     		ldrh r0, [r7]
A18054E4  F8DF 7058		ldr r7, [pc, #+88] ; 0xA1A00078
A18054E8  8038     		strh r0, [r7]

A18054EA  F8DF 7080		ldr r7, [pc, #+128] ; 0x10000427
A18054EE  7838     		ldrb r0, [r7]
A18054F0  F8DF 7050		ldr r7, [pc, #+80] ; 0xA1A0007A
A18054F4  7038     		strb r0, [r7]

A18054F6  F8DF 7064		ldr r7, [pc, #+100] ; 0x10000422
A18054FA  7838     		ldrb r0, [r7]
A18054FC  F8DF 7048		ldr r7, [pc, #+72] ; 0xA1A0007B
A1805500  7038     		strb r0, [r7]

A1805502  F8DF 705C		ldr r7, [pc, #+92] ; 0x10000423
A1805506  7838     		ldrb r0, [r7]
A1805508  F8DF 7040		ldr r7, [pc, #+64] ; 0xA1A000A5
A180550C  7038     		strb r0, [r7]

A180550E  F8DF 7054		ldr r7, [pc, #+84] ; 0x10000424
A1805512  7838     		ldrb r0, [r7]
A1805514  F8DF 7038		ldr r7, [pc, #+56] ; 0xA1A000A6
A1805518  7038     		strb r0, [r7]

A180551A  F8DF 704C		ldr r7, [pc, #+76] ; 0x10000426
A180551E  7838     		ldrb r0, [r7]
A1805520  F8DF 7030		ldr r7, [pc, #+48] ; 0xA1A000A7
A1805524  7038     		strb r0, [r7]

A1805526  F8DF 7048		ldr r7, [pc, #+72] ; 0x10000442
A180552A  8838     		ldrh r0, [r7]
A180552C  F8DF 7028		ldr r7, [pc, #+40] ; 0xA1A000AC
A1805530  8038     		strh r0, [r7]

A1805532  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805536  F8DD E000		ldr lr, [sp]
A180553A  B002     		add sp, sp, #8

A180553C  4770     		bx lr

A1805540  A1A00078		; 0xA1A00078
A1805544  A1A0007A		; 0xA1A0007A
A1805548  A1A0007B		; 0xA1A0007B
A180554C  A1A000A5		; 0xA1A000A5
A1805550  A1A000A6		; 0xA1A000A6
A1805554  A1A000A7		; 0xA1A000A7
A1805558  A1A000AC		; 0xA1A000AC
A180555C  FFFFFFFF		; 0x10000422
A1805560  FFFFFFFF		; 0x10000423
A1805564  FFFFFFFF		; 0x10000424
A1805568  FFFFFFFF		; 0x10000426
A180556C  FFFFFFFF		; 0x10000427
A1805570  FFFFFFFF		; 0x10000442
A1805574  FFFFFFFF		; 0x10000450


*** OUTPUT:
A1805578  B082     		sub sp, sp, #8
A180557A  F8CD E000		str lr, [sp]
A180557E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A1805582  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A1805586  F8DD E000		ldr lr, [sp]
A180558A  B002     		add sp, sp, #8

A180558C  4770     		bx lr



**************************************************
	Task Timed init code
**************************************************

A180558E  B082     		sub sp, sp, #8
A1805590  F8CD E000		str lr, [sp]
A1805594  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

Var init: V::SR_ATS_CTRL.TIME_SEC = 4000
A1805598  F8DF 0018		ldr r0, [pc, #+24] ; 0xFA0
A180559C  F8DF 7010		ldr r7, [pc, #+16] ; 0xA1A00042
A18055A0  8038     		strh r0, [r7]

A18055A2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18055A6  F8DD E000		ldr lr, [sp]
A18055AA  B002     		add sp, sp, #8

A18055AC  4770     		bx lr

A18055B0  A1A00042		; 0xA1A00042
A18055B4  00000FA0		; 0x00000FA0



**************************************************
	Global init code
**************************************************

A18055D0  B082     		sub sp, sp, #8
A18055D2  F8CD E000		str lr, [sp]
A18055D6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18055DA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18055DE  F8DD E000		ldr lr, [sp]
A18055E2  B002     		add sp, sp, #8

A18055E4  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

A18055E6  B082     		sub sp, sp, #8
A18055E8  F8CD E000		str lr, [sp]
A18055EC  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

A18055F0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
A18055F4  F8DD E000		ldr lr, [sp]
A18055F8  B002     		add sp, sp, #8

A18055FA  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000A1800000h
End code area:            		00000000A1805A48h
Code size:                		00005A48h

Start local data area:    		00000000A1A00000h
End local data area:      		00000000A1A000C8h
Local data size:          		000000C8h

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                4BBD94B1
DEBUG MEMO ID:                          A180B976
FULL MEMO ID:                           0000FF2D
********************************************
